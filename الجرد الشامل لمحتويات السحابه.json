[
  {
    "snapshot": {
      "roles": [
        {
          "inherit": true,
          "rolname": "anon",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": false,
          "replication": false
        },
        {
          "inherit": true,
          "rolname": "authenticated",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": false,
          "replication": false
        },
        {
          "inherit": false,
          "rolname": "authenticator",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": false,
          "replication": false
        },
        {
          "inherit": true,
          "rolname": "dashboard_user",
          "createdb": true,
          "bypassrls": false,
          "superuser": false,
          "createrole": true,
          "replication": true
        },
        {
          "inherit": true,
          "rolname": "postgres",
          "createdb": true,
          "bypassrls": true,
          "superuser": false,
          "createrole": true,
          "replication": true
        },
        {
          "inherit": true,
          "rolname": "service_role",
          "createdb": false,
          "bypassrls": true,
          "superuser": false,
          "createrole": false,
          "replication": false
        },
        {
          "inherit": true,
          "rolname": "supabase_admin",
          "createdb": true,
          "bypassrls": true,
          "superuser": true,
          "createrole": true,
          "replication": true
        },
        {
          "inherit": false,
          "rolname": "supabase_auth_admin",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": true,
          "replication": false
        },
        {
          "inherit": true,
          "rolname": "supabase_read_only_user",
          "createdb": false,
          "bypassrls": true,
          "superuser": false,
          "createrole": false,
          "replication": false
        },
        {
          "inherit": false,
          "rolname": "supabase_realtime_admin",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": false,
          "replication": false
        },
        {
          "inherit": true,
          "rolname": "supabase_replication_admin",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": false,
          "replication": true
        },
        {
          "inherit": false,
          "rolname": "supabase_storage_admin",
          "createdb": false,
          "bypassrls": false,
          "superuser": false,
          "createrole": true,
          "replication": false
        }
      ],
      "views": [
        {
          "view": "_schemas",
          "schema": "admin",
          "definition": " SELECT n.oid AS nsp_oid,\n    n.nspname AS schema_name,\n    r.rolname AS owner\n   FROM pg_namespace n\n     JOIN pg_roles r ON r.oid = n.nspowner\n  WHERE n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY n.nspname;"
        },
        {
          "view": "auth_objects",
          "schema": "admin",
          "definition": " SELECT c.relname AS object_name,\n    c.relkind AS kind\n   FROM pg_class c\n     JOIN pg_namespace n ON n.oid = c.relnamespace\n  WHERE n.nspname = 'auth'::name\n  ORDER BY c.relkind, c.relname;"
        },
        {
          "view": "chat_tables_missing_account_triad",
          "schema": "admin",
          "definition": " WITH has_col AS (\n         SELECT columns.table_schema AS schema,\n            columns.table_name,\n            columns.column_name\n           FROM information_schema.columns\n          WHERE columns.table_schema::name = 'public'::name AND columns.table_name::name ~~ 'chat_%'::text\n        )\n SELECT 'public'::name::information_schema.sql_identifier AS schema,\n    table_name,\n    NOT (EXISTS ( SELECT 1\n           FROM has_col\n          WHERE has_col.table_name::name = t.table_name::name AND has_col.column_name::name = 'account_id'::name)) AS missing_account_id,\n        CASE\n            WHEN table_name::name = ANY (ARRAY['chat_messages'::name, 'chat_attachments'::name, 'chat_reactions'::name]) THEN NOT (EXISTS ( SELECT 1\n               FROM has_col\n              WHERE has_col.table_name::name = t.table_name::name AND has_col.column_name::name = 'device_id'::name))\n            ELSE false\n        END AS missing_device_id,\n        CASE\n            WHEN table_name::name = ANY (ARRAY['chat_messages'::name, 'chat_attachments'::name, 'chat_reactions'::name]) THEN NOT (EXISTS ( SELECT 1\n               FROM has_col\n              WHERE has_col.table_name::name = t.table_name::name AND has_col.column_name::name = 'local_id'::name))\n            ELSE false\n        END AS missing_local_id\n   FROM ( SELECT DISTINCT tables.table_name\n           FROM information_schema.tables\n          WHERE tables.table_schema::name = 'public'::name AND tables.table_name::name ~~ 'chat_%'::text) t\n  ORDER BY table_name;"
        },
        {
          "view": "constraints",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    c.relname AS table_name,\n    con.conname AS constraint_name,\n    con.contype AS constraint_type,\n    pg_get_constraintdef(con.oid) AS definition,\n    con.convalidated AS validated,\n    con.condeferrable AS \"deferrable\",\n    con.condeferred AS deferred\n   FROM pg_constraint con\n     JOIN pg_class c ON c.oid = con.conrelid\n     JOIN pg_namespace n ON n.oid = c.relnamespace\n  WHERE n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY n.nspname, c.relname, con.contype, con.conname;"
        },
        {
          "view": "duplicate_indexes",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    t.relname AS table_name,\n    i1.relname AS index1,\n    i2.relname AS index2,\n    pg_get_indexdef(i1.oid) AS index1_def,\n    pg_get_indexdef(i2.oid) AS index2_def\n   FROM pg_index x\n     JOIN pg_class i1 ON i1.oid = x.indexrelid\n     JOIN pg_class t ON t.oid = x.indrelid\n     JOIN pg_namespace n ON n.oid = t.relnamespace\n     JOIN pg_index y ON y.indrelid = x.indrelid AND y.indexrelid > x.indexrelid\n     JOIN pg_class i2 ON i2.oid = y.indexrelid\n  WHERE (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])) AND x.indkey = y.indkey AND x.indclass = y.indclass AND NOT x.indpred::text IS DISTINCT FROM y.indpred::text;"
        },
        {
          "view": "extensions_installed",
          "schema": "admin",
          "definition": " SELECT e.extname AS extension,\n    e.extversion AS version,\n    n.nspname AS schema\n   FROM pg_extension e\n     JOIN pg_namespace n ON n.oid = e.extnamespace\n  ORDER BY e.extname;"
        },
        {
          "view": "foreign_keys",
          "schema": "admin",
          "definition": " WITH fk AS (\n         SELECT n.nspname AS schema,\n            c.relname AS table_name,\n            con.conname AS fk_name,\n            pg_get_constraintdef(con.oid) AS fk_def,\n            con.conkey AS src_cols_attnums,\n            con.confkey AS dst_cols_attnums,\n            con.conrelid AS src_oid,\n            con.confrelid AS dst_oid,\n            con.confupdtype,\n            con.confdeltype\n           FROM pg_constraint con\n             JOIN pg_class c ON c.oid = con.conrelid\n             JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE con.contype = 'f'::\"char\" AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name]))\n        )\n SELECT schema,\n    table_name,\n    fk_name,\n    ( SELECT array_agg(a.attname ORDER BY k.ord) AS array_agg\n           FROM unnest(fk.src_cols_attnums) WITH ORDINALITY k(attnum, ord)\n             JOIN pg_attribute a ON a.attrelid = fk.src_oid AND a.attnum = k.attnum) AS src_cols,\n    ( SELECT pg_class.relname\n           FROM pg_class\n          WHERE pg_class.oid = fk.dst_oid) AS ref_table,\n    ( SELECT array_agg(a.attname ORDER BY k.ord) AS array_agg\n           FROM unnest(fk.dst_cols_attnums) WITH ORDINALITY k(attnum, ord)\n             JOIN pg_attribute a ON a.attrelid = fk.dst_oid AND a.attnum = k.attnum) AS ref_cols,\n        CASE confupdtype\n            WHEN 'a'::\"char\" THEN 'NO ACTION'::text\n            WHEN 'r'::\"char\" THEN 'RESTRICT'::text\n            WHEN 'c'::\"char\" THEN 'CASCADE'::text\n            WHEN 'n'::\"char\" THEN 'SET NULL'::text\n            WHEN 'd'::\"char\" THEN 'SET DEFAULT'::text\n            ELSE confupdtype::text\n        END AS on_update,\n        CASE confdeltype\n            WHEN 'a'::\"char\" THEN 'NO ACTION'::text\n            WHEN 'r'::\"char\" THEN 'RESTRICT'::text\n            WHEN 'c'::\"char\" THEN 'CASCADE'::text\n            WHEN 'n'::\"char\" THEN 'SET NULL'::text\n            WHEN 'd'::\"char\" THEN 'SET DEFAULT'::text\n            ELSE confdeltype::text\n        END AS on_delete\n   FROM fk\n  ORDER BY schema, table_name, fk_name;"
        },
        {
          "view": "functions",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    p.proname AS function_name,\n    l.lanname AS language,\n    pg_get_function_result(p.oid) AS returns,\n    p.prokind AS kind,\n    p.provolatile AS volatility,\n    p.prosecdef AS security_definer,\n    obj_description(p.oid) AS description\n   FROM pg_proc p\n     JOIN pg_namespace n ON n.oid = p.pronamespace\n     JOIN pg_language l ON l.oid = p.prolang\n  WHERE n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY n.nspname, p.proname;"
        },
        {
          "view": "indexes",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    t.relname AS table_name,\n    i.relname AS index_name,\n    ix.indisunique AS is_unique,\n    ix.indisprimary AS is_primary,\n    ix.indisvalid AS is_valid,\n    pg_get_indexdef(i.oid) AS index_def\n   FROM pg_index ix\n     JOIN pg_class t ON t.oid = ix.indrelid\n     JOIN pg_class i ON i.oid = ix.indexrelid\n     JOIN pg_namespace n ON n.oid = t.relnamespace\n  WHERE n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY n.nspname, t.relname, i.relname;"
        },
        {
          "view": "materialized_views",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    c.relname AS matview_name,\n    pg_get_viewdef(c.oid, true) AS definition\n   FROM pg_class c\n     JOIN pg_namespace n ON n.oid = c.relnamespace\n  WHERE c.relkind = 'm'::\"char\" AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name]))\n  ORDER BY n.nspname, c.relname;"
        },
        {
          "view": "missing_fk_indexes",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    t.relname AS table_name,\n    con.conname AS fk_name,\n    ( SELECT array_agg(a.attname ORDER BY k.ord) AS array_agg\n           FROM unnest(con.conkey) WITH ORDINALITY k(attnum, ord)\n             JOIN pg_attribute a ON a.attrelid = t.oid AND a.attnum = k.attnum) AS src_cols\n   FROM pg_constraint con\n     JOIN pg_class t ON t.oid = con.conrelid\n     JOIN pg_namespace n ON n.oid = t.relnamespace\n  WHERE con.contype = 'f'::\"char\" AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])) AND NOT (EXISTS ( SELECT 1\n           FROM pg_index i\n          WHERE i.indrelid = t.oid AND i.indisvalid AND (i.indkey::smallint[])[1:array_length(con.conkey, 1)] = con.conkey))\n  ORDER BY n.nspname, t.relname, con.conname;"
        },
        {
          "view": "objects_overview",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    c.relname AS object_name,\n        CASE c.relkind\n            WHEN 'r'::\"char\" THEN 'table'::text\n            WHEN 'v'::\"char\" THEN 'view'::text\n            WHEN 'm'::\"char\" THEN 'materialized_view'::text\n            WHEN 'i'::\"char\" THEN 'index'::text\n            WHEN 'S'::\"char\" THEN 'sequence'::text\n            WHEN 'f'::\"char\" THEN 'foreign_table'::text\n            WHEN 'p'::\"char\" THEN 'partitioned_table'::text\n            WHEN 'I'::\"char\" THEN 'partitioned_index'::text\n            ELSE c.relkind::text\n        END AS kind,\n    pg_get_userbyid(c.relowner) AS owner,\n    c.relrowsecurity AS rls_enabled,\n    c.relforcerowsecurity AS rls_forced,\n    obj_description(c.oid) AS description\n   FROM pg_class c\n     JOIN pg_namespace n ON n.oid = c.relnamespace\n  WHERE n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY n.nspname, (\n        CASE c.relkind\n            WHEN 'r'::\"char\" THEN 'table'::text\n            WHEN 'v'::\"char\" THEN 'view'::text\n            WHEN 'm'::\"char\" THEN 'materialized_view'::text\n            WHEN 'i'::\"char\" THEN 'index'::text\n            WHEN 'S'::\"char\" THEN 'sequence'::text\n            WHEN 'f'::\"char\" THEN 'foreign_table'::text\n            WHEN 'p'::\"char\" THEN 'partitioned_table'::text\n            WHEN 'I'::\"char\" THEN 'partitioned_index'::text\n            ELSE c.relkind::text\n        END), c.relname;"
        },
        {
          "view": "rls_enabled_but_no_policies",
          "schema": "admin",
          "definition": " SELECT schema,\n    table_name,\n    rls_enabled,\n    rls_forced,\n    owner\n   FROM admin.tables t\n  WHERE rls_enabled IS TRUE AND NOT (EXISTS ( SELECT 1\n           FROM admin.rls_policies p\n          WHERE p.schema = t.schema::name AND p.table_name = t.table_name::name))\n  ORDER BY schema, table_name;"
        },
        {
          "view": "rls_policies",
          "schema": "admin",
          "definition": " SELECT schemaname AS schema,\n    tablename AS table_name,\n    policyname AS policy_name,\n    permissive,\n    roles,\n    cmd AS command,\n    qual AS using_expr,\n    with_check AS check_expr\n   FROM pg_policies\n  WHERE schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY schemaname, tablename, policyname;"
        },
        {
          "view": "schema_audit",
          "schema": "admin",
          "definition": " WITH tbls AS (\n         SELECT c_1.oid,\n            n.nspname AS schema,\n            c_1.relname AS name,\n            c_1.relkind,\n            c_1.relrowsecurity\n           FROM pg_class c_1\n             JOIN pg_namespace n ON n.oid = c_1.relnamespace\n          WHERE n.nspname = 'public'::name AND (c_1.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"]))\n        ), cols AS (\n         SELECT columns.table_schema,\n            columns.table_name,\n            bool_or(columns.column_name::name = 'account_id'::name) AS has_account_id,\n            bool_or(columns.column_name::name = 'updated_at'::name) AS has_updated_at\n           FROM information_schema.columns\n          WHERE columns.table_schema::name = 'public'::name\n          GROUP BY columns.table_schema, columns.table_name\n        ), touch_trg AS (\n         SELECT t_1.tgrelid AS oid\n           FROM pg_trigger t_1\n             JOIN pg_proc p_1 ON p_1.oid = t_1.tgfoid\n          WHERE NOT t_1.tgisinternal AND p_1.proname = 'tg_touch_updated_at'::name\n        ), fill_trg AS (\n         SELECT t_1.tgrelid AS oid\n           FROM pg_trigger t_1\n             JOIN pg_proc p_1 ON p_1.oid = t_1.tgfoid\n          WHERE NOT t_1.tgisinternal AND p_1.proname = 'tg_fill_account_id'::name\n        ), pol AS (\n         SELECT p_1.polrelid AS oid,\n            count(*) FILTER (WHERE p_1.polname ~~ 'pol_%'::text) AS pol_star,\n            count(*) FILTER (WHERE p_1.polname !~~ 'pol_%'::text) AS pol_legacy\n           FROM pg_policy p_1\n          GROUP BY p_1.polrelid\n        ), idx AS (\n         SELECT i.indexrelid,\n            i.indrelid,\n            i.indisunique,\n            am.amname,\n            COALESCE(pg_get_expr(i.indpred, i.indrelid), ''::text) AS pred,\n            COALESCE(pg_get_expr(i.indexprs, i.indrelid), ''::text) AS exprs,\n            i.indkey::text AS k,\n            i.indcollation::text AS coll,\n            i.indclass::text AS cls,\n            i.indoption::text AS opt\n           FROM pg_index i\n             JOIN pg_class t_1 ON t_1.oid = i.indrelid\n             JOIN pg_namespace n ON n.oid = t_1.relnamespace\n             JOIN pg_class c_1 ON c_1.oid = i.indexrelid\n             JOIN pg_am am ON am.oid = c_1.relam\n          WHERE n.nspname = 'public'::name AND (t_1.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"]))\n        ), idx_dups AS (\n         SELECT d_1.indrelid,\n            sum(d_1.cnt - 1) AS dup_indexes\n           FROM ( SELECT idx.indrelid,\n                    idx.indisunique,\n                    idx.amname,\n                    idx.pred,\n                    idx.exprs,\n                    idx.k,\n                    idx.coll,\n                    idx.cls,\n                    idx.opt,\n                    count(*) AS cnt\n                   FROM idx\n                  GROUP BY idx.indrelid, idx.indisunique, idx.amname, idx.pred, idx.exprs, idx.k, idx.coll, idx.cls, idx.opt\n                 HAVING count(*) > 1) d_1\n          GROUP BY d_1.indrelid\n        ), ux_account_local AS (\n         SELECT i.indrelid,\n            bool_or(ordcols.cols = ARRAY['account_id'::name, 'local_id'::name] AND i.indisunique) AS has_ux_account_local\n           FROM pg_index i\n             JOIN pg_class t_1 ON t_1.oid = i.indrelid\n             JOIN pg_namespace n ON n.oid = t_1.relnamespace\n             CROSS JOIN LATERAL ( SELECT array_agg(a.attname ORDER BY k.ord) AS cols\n                   FROM unnest(i.indkey) WITH ORDINALITY k(attnum, ord)\n                     JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = k.attnum) ordcols\n          WHERE n.nspname = 'public'::name AND (t_1.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"]))\n          GROUP BY i.indrelid\n        )\n SELECT t.schema,\n    t.name AS table_name,\n    t.relkind,\n    COALESCE(c.has_account_id, false) AS has_account_id,\n    COALESCE(c.has_updated_at, false) AS has_updated_at,\n    t.relrowsecurity AS rls_enabled,\n    COALESCE(p.pol_star, 0::bigint) AS pol_star,\n    COALESCE(p.pol_legacy, 0::bigint) AS pol_legacy,\n    (t.oid IN ( SELECT touch_trg.oid\n           FROM touch_trg)) AS has_touch_trg,\n    (t.oid IN ( SELECT fill_trg.oid\n           FROM fill_trg)) AS has_fill_trg,\n    COALESCE(d.dup_indexes, 0::numeric) AS dup_index_count,\n        CASE\n            WHEN COALESCE(c.has_account_id, false) AND (EXISTS ( SELECT 1\n               FROM information_schema.columns ic\n              WHERE ic.table_schema::name = t.schema AND ic.table_name::name = t.name AND ic.column_name::name = 'local_id'::name)) THEN COALESCE(u.has_ux_account_local, false)\n            ELSE NULL::boolean\n        END AS has_ux_account_local\n   FROM tbls t\n     LEFT JOIN cols c ON c.table_schema::name = t.schema AND c.table_name::name = t.name\n     LEFT JOIN pol p ON p.oid = t.oid\n     LEFT JOIN idx_dups d ON d.indrelid = t.oid\n     LEFT JOIN ux_account_local u ON u.indrelid = t.oid\n  ORDER BY t.schema, t.name;"
        },
        {
          "view": "sequences",
          "schema": "admin",
          "definition": " SELECT sequence_schema AS schema,\n    sequence_name,\n    data_type,\n    start_value,\n    minimum_value,\n    maximum_value,\n    increment,\n    cycle_option\n   FROM information_schema.sequences\n  WHERE sequence_schema::name <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY sequence_schema, sequence_name;"
        },
        {
          "view": "size_overview",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    c.relname AS name,\n        CASE c.relkind\n            WHEN 'r'::\"char\" THEN 'table'::text\n            WHEN 'i'::\"char\" THEN 'index'::text\n            WHEN 'm'::\"char\" THEN 'materialized_view'::text\n            ELSE c.relkind::text\n        END AS kind,\n    pg_total_relation_size(c.oid::regclass) AS total_bytes,\n    pg_relation_size(c.oid::regclass) AS rel_bytes,\n    pg_indexes_size(c.oid::regclass) AS idx_bytes\n   FROM pg_class c\n     JOIN pg_namespace n ON n.oid = c.relnamespace\n  WHERE (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'i'::\"char\", 'm'::\"char\"]))\n  ORDER BY (pg_total_relation_size(c.oid::regclass)) DESC;"
        },
        {
          "view": "storage_buckets",
          "schema": "admin",
          "definition": " SELECT id,\n    name,\n    owner,\n    public,\n    file_size_limit,\n    allowed_mime_types,\n    avif_autodetection,\n    created_at,\n    updated_at\n   FROM storage.buckets b\n  ORDER BY name;"
        },
        {
          "view": "table_columns",
          "schema": "admin",
          "definition": " SELECT cols.table_schema AS schema,\n    cols.table_name,\n    cols.ordinal_position,\n    cols.column_name,\n    cols.data_type,\n    cols.udt_name,\n    cols.is_nullable,\n    cols.column_default,\n    pgd.description AS comment\n   FROM information_schema.columns cols\n     LEFT JOIN pg_class c ON c.relname = cols.table_name::name\n     LEFT JOIN pg_namespace n ON n.oid = c.relnamespace AND n.nspname = cols.table_schema::name\n     LEFT JOIN pg_description pgd ON pgd.objoid = c.oid AND pgd.objsubid = cols.ordinal_position::integer\n  WHERE cols.table_schema::name <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY cols.table_schema, cols.table_name, cols.ordinal_position;"
        },
        {
          "view": "table_privileges",
          "schema": "admin",
          "definition": " SELECT table_schema AS schema,\n    table_name,\n    grantee,\n    privilege_type,\n    is_grantable\n   FROM information_schema.table_privileges\n  WHERE table_schema::name <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY table_schema, table_name, grantee, privilege_type;"
        },
        {
          "view": "table_quality",
          "schema": "admin",
          "definition": " WITH t AS (\n         SELECT tables.schema,\n            tables.table_name,\n            tables.rls_enabled,\n            tables.rls_forced,\n            tables.owner\n           FROM admin.tables\n          WHERE tables.schema::name <> ALL (ARRAY['auth'::name, 'storage'::name])\n        ), col AS (\n         SELECT table_columns.schema,\n            table_columns.table_name,\n            table_columns.column_name,\n            table_columns.data_type,\n            table_columns.udt_name,\n            table_columns.column_default,\n            table_columns.is_nullable\n           FROM admin.table_columns\n        )\n SELECT schema,\n    table_name,\n    rls_enabled,\n    COALESCE(( SELECT count(*) AS count\n           FROM admin.rls_policies p\n          WHERE p.schema = t.schema::name AND p.table_name = t.table_name::name), 0::bigint) AS rls_policy_count,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'id'::name)) AS has_id,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'created_at'::name)) AS has_created_at,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'updated_at'::name)) AS has_updated_at,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND (col.column_name::name = 'deleted_at'::name OR col.column_name::name = 'is_deleted'::name))) AS has_soft_delete,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'account_id'::name)) AS has_account_id,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'device_id'::name)) AS has_device_id,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'local_id'::name)) AS has_local_id,\n    (EXISTS ( SELECT 1\n           FROM pg_index i\n             JOIN pg_class tc ON tc.oid = i.indrelid\n             JOIN pg_namespace ns ON ns.oid = tc.relnamespace\n          WHERE ns.nspname = t.schema::name AND tc.relname = t.table_name::name AND i.indisunique AND (( SELECT q.arr[1:3] AS arr\n                   FROM ( SELECT array_agg(a.attname::text ORDER BY k.ord) AS arr\n                           FROM unnest(i.indkey) WITH ORDINALITY k(attnum, ord)\n                             JOIN pg_attribute a ON a.attrelid = tc.oid AND a.attnum = k.attnum) q)) = ARRAY['account_id'::text, 'device_id'::text, 'local_id'::text])) AS has_ux_account_device_local_prefix,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'created_at'::name AND (col.data_type::text ~~* '%timestamp%'::text OR (col.udt_name::name = ANY (ARRAY['timestamptz'::name, 'timestamp'::name]))))) AS created_at_is_ts,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'updated_at'::name AND (col.data_type::text ~~* '%timestamp%'::text OR (col.udt_name::name = ANY (ARRAY['timestamptz'::name, 'timestamp'::name]))))) AS updated_at_is_ts,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'created_at'::name AND (col.column_default::text ~~* '%now(%'::text OR col.column_default::text ~~* '%timezone%'::text))) AS created_at_has_default_now,\n    (EXISTS ( SELECT 1\n           FROM col\n          WHERE col.schema::name = t.schema::name AND col.table_name::name = t.table_name::name AND col.column_name::name = 'updated_at'::name AND (col.column_default::text ~~* '%now(%'::text OR col.column_default::text ~~* '%timezone%'::text))) AS updated_at_has_default_now\n   FROM t\n  ORDER BY schema, table_name;"
        },
        {
          "view": "tables",
          "schema": "admin",
          "definition": " SELECT t.table_schema AS schema,\n    t.table_name,\n    c.relrowsecurity AS rls_enabled,\n    c.relforcerowsecurity AS rls_forced,\n    pg_get_userbyid(c.relowner) AS owner\n   FROM information_schema.tables t\n     JOIN pg_class c ON c.relname = t.table_name::name\n     JOIN pg_namespace n ON n.oid = c.relnamespace AND n.nspname = t.table_schema::name\n  WHERE t.table_type::text = 'BASE TABLE'::text AND (t.table_schema::name <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name]))\n  ORDER BY t.table_schema, t.table_name;"
        },
        {
          "view": "tables_without_rls",
          "schema": "admin",
          "definition": " SELECT schema,\n    table_name,\n    rls_enabled,\n    rls_forced,\n    owner\n   FROM admin.tables\n  WHERE rls_enabled IS FALSE\n  ORDER BY schema, table_name;"
        },
        {
          "view": "timestamp_without_tz",
          "schema": "admin",
          "definition": " SELECT schema,\n    table_name,\n    column_name,\n    data_type,\n    column_default\n   FROM admin.table_columns\n  WHERE data_type::text = 'timestamp without time zone'::text OR udt_name::name = 'timestamp'::name\n  ORDER BY schema, table_name, column_name;"
        },
        {
          "view": "triggers",
          "schema": "admin",
          "definition": " SELECT n.nspname AS schema,\n    c.relname AS table_name,\n    t.tgname AS trigger_name,\n    pg_get_triggerdef(t.oid, true) AS trigger_def,\n        CASE t.tgenabled\n            WHEN 'O'::\"char\" THEN true\n            ELSE false\n        END AS enabled,\n    p.proname AS function_name\n   FROM pg_trigger t\n     JOIN pg_class c ON c.oid = t.tgrelid\n     JOIN pg_namespace n ON n.oid = c.relnamespace\n     JOIN pg_proc p ON p.oid = t.tgfoid\n  WHERE NOT t.tgisinternal AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name]))\n  ORDER BY n.nspname, c.relname, t.tgname;"
        },
        {
          "view": "views",
          "schema": "admin",
          "definition": " SELECT table_schema AS schema,\n    table_name AS view_name,\n    view_definition\n   FROM information_schema.views\n  WHERE table_schema::name <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'pg_toast'::name])\n  ORDER BY table_schema, table_name;"
        },
        {
          "view": "pg_stat_statements",
          "schema": "extensions",
          "definition": " SELECT userid,\n    dbid,\n    toplevel,\n    queryid,\n    query,\n    plans,\n    total_plan_time,\n    min_plan_time,\n    max_plan_time,\n    mean_plan_time,\n    stddev_plan_time,\n    calls,\n    total_exec_time,\n    min_exec_time,\n    max_exec_time,\n    mean_exec_time,\n    stddev_exec_time,\n    rows,\n    shared_blks_hit,\n    shared_blks_read,\n    shared_blks_dirtied,\n    shared_blks_written,\n    local_blks_hit,\n    local_blks_read,\n    local_blks_dirtied,\n    local_blks_written,\n    temp_blks_read,\n    temp_blks_written,\n    shared_blk_read_time,\n    shared_blk_write_time,\n    local_blk_read_time,\n    local_blk_write_time,\n    temp_blk_read_time,\n    temp_blk_write_time,\n    wal_records,\n    wal_fpi,\n    wal_bytes,\n    jit_functions,\n    jit_generation_time,\n    jit_inlining_count,\n    jit_inlining_time,\n    jit_optimization_count,\n    jit_optimization_time,\n    jit_emission_count,\n    jit_emission_time,\n    jit_deform_count,\n    jit_deform_time,\n    stats_since,\n    minmax_stats_since\n   FROM pg_stat_statements(true) pg_stat_statements(userid, dbid, toplevel, queryid, query, plans, total_plan_time, min_plan_time, max_plan_time, mean_plan_time, stddev_plan_time, calls, total_exec_time, min_exec_time, max_exec_time, mean_exec_time, stddev_exec_time, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, shared_blk_read_time, shared_blk_write_time, local_blk_read_time, local_blk_write_time, temp_blk_read_time, temp_blk_write_time, wal_records, wal_fpi, wal_bytes, jit_functions, jit_generation_time, jit_inlining_count, jit_inlining_time, jit_optimization_count, jit_optimization_time, jit_emission_count, jit_emission_time, jit_deform_count, jit_deform_time, stats_since, minmax_stats_since);"
        },
        {
          "view": "pg_stat_statements_info",
          "schema": "extensions",
          "definition": " SELECT dealloc,\n    stats_reset\n   FROM pg_stat_statements_info() pg_stat_statements_info(dealloc, stats_reset);"
        },
        {
          "view": "v_chat_conversations_for_me",
          "schema": "public",
          "definition": " WITH mine AS (\n         SELECT p.conversation_id\n           FROM chat_participants p\n          WHERE p.user_uid = auth.uid()\n        ), unread AS (\n         SELECT c_1.id AS conversation_id,\n            r.last_read_at,\n            (( SELECT count(1) AS count\n                   FROM chat_messages m_1\n                  WHERE m_1.conversation_id = c_1.id AND COALESCE(m_1.deleted, false) = false AND (r.last_read_at IS NULL OR m_1.created_at > r.last_read_at)))::integer AS unread_count\n           FROM chat_conversations c_1\n             LEFT JOIN v_chat_reads_for_me r ON r.conversation_id = c_1.id\n        )\n SELECT c.id,\n    c.account_id,\n    c.is_group,\n    c.title,\n    c.created_by,\n    c.created_at,\n    c.updated_at,\n    c.last_msg_at,\n    c.last_msg_snippet,\n    lm.last_message_id,\n    lm.last_message_kind,\n    lm.last_message_body,\n    lm.last_message_created_at,\n    u.last_read_at,\n    u.unread_count,\n        CASE\n            WHEN lm.last_message_kind = 'image'::text THEN '📷 صورة'::text\n            WHEN lm.last_message_body IS NULL OR btrim(lm.last_message_body) = ''::text THEN NULL::text\n            WHEN char_length(lm.last_message_body) > 64 THEN substr(lm.last_message_body, 1, 64) || '…'::text\n            ELSE lm.last_message_body\n        END AS last_message_text\n   FROM chat_conversations c\n     JOIN mine m ON m.conversation_id = c.id\n     LEFT JOIN v_chat_last_message lm ON lm.conversation_id = c.id\n     LEFT JOIN unread u ON u.conversation_id = c.id;"
        },
        {
          "view": "v_chat_last_message",
          "schema": "public",
          "definition": " SELECT c.id AS conversation_id,\n    lm.id AS last_message_id,\n    lm.kind AS last_message_kind,\n    lm.body AS last_message_body,\n    lm.created_at AS last_message_created_at\n   FROM chat_conversations c\n     LEFT JOIN LATERAL ( SELECT m.id,\n            m.kind,\n            m.body,\n            m.created_at\n           FROM chat_messages m\n          WHERE m.conversation_id = c.id AND COALESCE(m.deleted, false) = false\n          ORDER BY m.created_at DESC\n         LIMIT 1) lm ON true;"
        },
        {
          "view": "v_chat_messages_with_attachments",
          "schema": "public",
          "definition": " SELECT m.id,\n    m.conversation_id,\n    m.sender_uid,\n    m.sender_email,\n    m.kind,\n    m.body,\n    m.created_at,\n    m.edited,\n    m.deleted,\n    m.edited_at,\n    m.deleted_at,\n    COALESCE(jsonb_agg(jsonb_build_object('id', a.id, 'message_id', a.message_id, 'bucket', a.bucket, 'path', a.path, 'mime_type', a.mime_type, 'size_bytes', a.size_bytes, 'width', a.width, 'height', a.height, 'created_at', a.created_at)) FILTER (WHERE a.id IS NOT NULL), '[]'::jsonb) AS attachments\n   FROM chat_messages m\n     LEFT JOIN chat_attachments a ON a.message_id = m.id\n  GROUP BY m.id, m.conversation_id, m.sender_uid, m.sender_email, m.kind, m.body, m.created_at, m.edited, m.deleted, m.edited_at, m.deleted_at;"
        },
        {
          "view": "v_chat_reads_for_me",
          "schema": "public",
          "definition": " SELECT conversation_id,\n    last_read_message_id,\n    last_read_at\n   FROM chat_reads r\n  WHERE user_uid = auth.uid();"
        },
        {
          "view": "v_chat_unreads_by_account",
          "schema": "public",
          "definition": " SELECT cu.user_uid,\n    c.account_id,\n    sum(cu.unread_count)::integer AS unread_count\n   FROM chat_unreads cu\n     JOIN chat_conversations c ON c.id = cu.conversation_id\n  GROUP BY cu.user_uid, c.account_id;"
        },
        {
          "view": "v_dm_partner_email",
          "schema": "public",
          "definition": " SELECT c.id AS conversation_id,\n    me.user_uid AS my_uid,\n    other.user_uid AS other_uid,\n    COALESCE(other.email, 'unknown@local'::text) AS other_email\n   FROM chat_conversations c\n     JOIN chat_participants me ON me.conversation_id = c.id\n     JOIN chat_participants other ON other.conversation_id = c.id AND other.user_uid <> me.user_uid\n  WHERE c.is_group = false;"
        },
        {
          "view": "v_my_accounts",
          "schema": "public",
          "definition": " SELECT DISTINCT au.account_id\n   FROM account_users au\n  WHERE au.user_uid = auth.uid() AND COALESCE(au.disabled, false) = false\nUNION\n SELECT DISTINCT p.account_id\n   FROM profiles p\n  WHERE p.id = auth.uid() AND p.account_id IS NOT NULL;"
        },
        {
          "view": "decrypted_secrets",
          "schema": "vault",
          "definition": " SELECT id,\n    name,\n    description,\n    secret,\n    convert_from(vault._crypto_aead_det_decrypt(message => decode(secret, 'base64'::text), additional => convert_to(id::text, 'utf8'::name), key_id => 0::bigint, context => '\\x7067736f6469756d'::bytea, nonce => nonce), 'utf8'::name) AS decrypted_secret,\n    key_id,\n    nonce,\n    created_at,\n    updated_at\n   FROM vault.secrets s;"
        }
      ],
      "grants": [
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "_schemas",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "auth_objects",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_tables_missing_account_triad",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "constraints",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "duplicate_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "extensions_installed",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "foreign_keys",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "functions",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "materialized_views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "missing_fk_indexes",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "objects_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "rls_enabled_but_no_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "rls_policies",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "schema_audit",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "sequences",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "size_overview",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "storage_buckets",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "table_columns",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "table_privileges",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "table_quality",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "tables",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "tables_without_rls",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "timestamp_without_tz",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "triggers",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "views",
          "schema": "admin",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "identities",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "instances",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_authorizations",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_clients",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "oauth_consents",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "sessions",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "users",
          "schema": "auth",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "PUBLIC",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "PUBLIC",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "dashboard_user",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "pg_stat_statements_info",
          "schema": "extensions",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "kv_secrets",
          "schema": "private",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "account_users",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "appointments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "clinics",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "complaints",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "consumptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "doctors",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "drugs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "item_types",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "medical_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "memberships",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "patient_services",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "patients",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "profiles",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "purchases",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "returns",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "super_admins",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_conversations_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_last_message",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_messages_with_attachments",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_reads_for_me",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_chat_unreads_by_account",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_dm_partner_email",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "v_my_accounts",
          "schema": "public",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "dashboard_user",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "messages",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "subscription",
          "schema": "realtime",
          "grantee": "supabase_realtime_admin",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "objects",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "anon",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "authenticated",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "INSERT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "REFERENCES",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRIGGER",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "TRUNCATE",
          "is_grantable": "NO"
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "grantee": "service_role",
          "privilege": "UPDATE",
          "is_grantable": "NO"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "INSERT",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "TRIGGER",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "seed_files",
          "schema": "supabase_migrations",
          "grantee": "postgres",
          "privilege": "UPDATE",
          "is_grantable": "YES"
        },
        {
          "table": "decrypted_secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "decrypted_secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "decrypted_secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "decrypted_secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "decrypted_secrets",
          "schema": "vault",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "decrypted_secrets",
          "schema": "vault",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        },
        {
          "table": "secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "DELETE",
          "is_grantable": "YES"
        },
        {
          "table": "secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "REFERENCES",
          "is_grantable": "YES"
        },
        {
          "table": "secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "SELECT",
          "is_grantable": "YES"
        },
        {
          "table": "secrets",
          "schema": "vault",
          "grantee": "postgres",
          "privilege": "TRUNCATE",
          "is_grantable": "YES"
        },
        {
          "table": "secrets",
          "schema": "vault",
          "grantee": "service_role",
          "privilege": "DELETE",
          "is_grantable": "NO"
        },
        {
          "table": "secrets",
          "schema": "vault",
          "grantee": "service_role",
          "privilege": "SELECT",
          "is_grantable": "NO"
        }
      ],
      "tables": [
        {
          "owner": "supabase_auth_admin",
          "table": "audit_log_entries",
          "schema": "auth",
          "columns": [
            {
              "name": "instance_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "json",
              "collation": null,
              "data_type": "json",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "ip_address",
              "default": "''::character varying",
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX audit_log_entries_pkey ON auth.audit_log_entries USING btree (id)",
              "name": "audit_log_entries_pkey"
            },
            {
              "def": "CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id)",
              "name": "audit_logs_instance_id_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "audit_log_entries_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "flow_state",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "auth_code",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "code_challenge_method",
              "default": null,
              "identity": "NO",
              "udt_name": "code_challenge_method",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "code_challenge",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "provider_type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "provider_access_token",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "provider_refresh_token",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "authentication_method",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "auth_code_issued_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC)",
              "name": "flow_state_created_at_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX flow_state_pkey ON auth.flow_state USING btree (id)",
              "name": "flow_state_pkey"
            },
            {
              "def": "CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code)",
              "name": "idx_auth_code"
            },
            {
              "def": "CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method)",
              "name": "idx_user_id_auth_method"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "flow_state_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "identities",
          "schema": "auth",
          "columns": [
            {
              "name": "provider_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "identity_data",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "provider",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "last_sign_in_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "ALWAYS",
              "is_nullable": "YES"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops)",
              "name": "identities_email_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX identities_pkey ON auth.identities USING btree (id)",
              "name": "identities_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX identities_provider_id_provider_unique ON auth.identities USING btree (provider_id, provider)",
              "name": "identities_provider_id_provider_unique"
            },
            {
              "def": "CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id)",
              "name": "identities_user_id_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "identities_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "identities_provider_id_provider_unique",
              "type": "u",
              "definition": "UNIQUE (provider_id, provider)"
            },
            {
              "name": "identities_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "instances",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "uuid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "raw_base_config",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX instances_pkey ON auth.instances USING btree (id)",
              "name": "instances_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "instances_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "mfa_amr_claims",
          "schema": "auth",
          "columns": [
            {
              "name": "session_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "authentication_method",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX amr_id_pk ON auth.mfa_amr_claims USING btree (id)",
              "name": "amr_id_pk"
            },
            {
              "def": "CREATE UNIQUE INDEX mfa_amr_claims_session_id_authentication_method_pkey ON auth.mfa_amr_claims USING btree (session_id, authentication_method)",
              "name": "mfa_amr_claims_session_id_authentication_method_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "amr_id_pk",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "mfa_amr_claims_session_id_authentication_method_pkey",
              "type": "u",
              "definition": "UNIQUE (session_id, authentication_method)"
            },
            {
              "name": "mfa_amr_claims_session_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "mfa_challenges",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "factor_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "verified_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "ip_address",
              "default": null,
              "identity": "NO",
              "udt_name": "inet",
              "collation": null,
              "data_type": "inet",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "otp_code",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "web_authn_session_data",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC)",
              "name": "mfa_challenge_created_at_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX mfa_challenges_pkey ON auth.mfa_challenges USING btree (id)",
              "name": "mfa_challenges_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "mfa_challenges_auth_factor_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE"
            },
            {
              "name": "mfa_challenges_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "mfa_factors",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "friendly_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "factor_type",
              "default": null,
              "identity": "NO",
              "udt_name": "factor_type",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "status",
              "default": null,
              "identity": "NO",
              "udt_name": "factor_status",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "secret",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "last_challenged_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "web_authn_credential",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "web_authn_aaguid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at)",
              "name": "factor_id_created_at_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX mfa_factors_last_challenged_at_key ON auth.mfa_factors USING btree (last_challenged_at)",
              "name": "mfa_factors_last_challenged_at_key"
            },
            {
              "def": "CREATE UNIQUE INDEX mfa_factors_pkey ON auth.mfa_factors USING btree (id)",
              "name": "mfa_factors_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text)",
              "name": "mfa_factors_user_friendly_name_unique"
            },
            {
              "def": "CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id)",
              "name": "mfa_factors_user_id_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone)",
              "name": "unique_phone_factor_per_user"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "mfa_factors_last_challenged_at_key",
              "type": "u",
              "definition": "UNIQUE (last_challenged_at)"
            },
            {
              "name": "mfa_factors_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "mfa_factors_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "oauth_authorizations",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "authorization_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "client_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "redirect_uri",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "scope",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "state",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "resource",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "code_challenge",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "code_challenge_method",
              "default": null,
              "identity": "NO",
              "udt_name": "code_challenge_method",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "response_type",
              "default": "'code'::auth.oauth_response_type",
              "identity": "NO",
              "udt_name": "oauth_response_type",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "status",
              "default": "'pending'::auth.oauth_authorization_status",
              "identity": "NO",
              "udt_name": "oauth_authorization_status",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "authorization_code",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "expires_at",
              "default": "(now() + '00:03:00'::interval)",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "approved_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX oauth_auth_pending_exp_idx ON auth.oauth_authorizations USING btree (expires_at) WHERE (status = 'pending'::auth.oauth_authorization_status)",
              "name": "oauth_auth_pending_exp_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX oauth_authorizations_authorization_code_key ON auth.oauth_authorizations USING btree (authorization_code)",
              "name": "oauth_authorizations_authorization_code_key"
            },
            {
              "def": "CREATE UNIQUE INDEX oauth_authorizations_authorization_id_key ON auth.oauth_authorizations USING btree (authorization_id)",
              "name": "oauth_authorizations_authorization_id_key"
            },
            {
              "def": "CREATE UNIQUE INDEX oauth_authorizations_pkey ON auth.oauth_authorizations USING btree (id)",
              "name": "oauth_authorizations_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "oauth_authorizations_authorization_code_key",
              "type": "u",
              "definition": "UNIQUE (authorization_code)"
            },
            {
              "name": "oauth_authorizations_authorization_code_length",
              "type": "c",
              "definition": "CHECK (char_length(authorization_code) <= 255)"
            },
            {
              "name": "oauth_authorizations_authorization_id_key",
              "type": "u",
              "definition": "UNIQUE (authorization_id)"
            },
            {
              "name": "oauth_authorizations_client_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (client_id) REFERENCES auth.oauth_clients(id) ON DELETE CASCADE"
            },
            {
              "name": "oauth_authorizations_code_challenge_length",
              "type": "c",
              "definition": "CHECK (char_length(code_challenge) <= 128)"
            },
            {
              "name": "oauth_authorizations_expires_at_future",
              "type": "c",
              "definition": "CHECK (expires_at > created_at)"
            },
            {
              "name": "oauth_authorizations_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "oauth_authorizations_redirect_uri_length",
              "type": "c",
              "definition": "CHECK (char_length(redirect_uri) <= 2048)"
            },
            {
              "name": "oauth_authorizations_resource_length",
              "type": "c",
              "definition": "CHECK (char_length(resource) <= 2048)"
            },
            {
              "name": "oauth_authorizations_scope_length",
              "type": "c",
              "definition": "CHECK (char_length(scope) <= 4096)"
            },
            {
              "name": "oauth_authorizations_state_length",
              "type": "c",
              "definition": "CHECK (char_length(state) <= 4096)"
            },
            {
              "name": "oauth_authorizations_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "oauth_clients",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "client_secret_hash",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "registration_type",
              "default": null,
              "identity": "NO",
              "udt_name": "oauth_registration_type",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "redirect_uris",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "grant_types",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "client_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "client_uri",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "logo_uri",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "deleted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "client_type",
              "default": "'confidential'::auth.oauth_client_type",
              "identity": "NO",
              "udt_name": "oauth_client_type",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX oauth_clients_deleted_at_idx ON auth.oauth_clients USING btree (deleted_at)",
              "name": "oauth_clients_deleted_at_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX oauth_clients_pkey ON auth.oauth_clients USING btree (id)",
              "name": "oauth_clients_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "oauth_clients_client_name_length",
              "type": "c",
              "definition": "CHECK (char_length(client_name) <= 1024)"
            },
            {
              "name": "oauth_clients_client_uri_length",
              "type": "c",
              "definition": "CHECK (char_length(client_uri) <= 2048)"
            },
            {
              "name": "oauth_clients_logo_uri_length",
              "type": "c",
              "definition": "CHECK (char_length(logo_uri) <= 2048)"
            },
            {
              "name": "oauth_clients_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "oauth_consents",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "client_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "scopes",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "granted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "revoked_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX oauth_consents_active_client_idx ON auth.oauth_consents USING btree (client_id) WHERE (revoked_at IS NULL)",
              "name": "oauth_consents_active_client_idx"
            },
            {
              "def": "CREATE INDEX oauth_consents_active_user_client_idx ON auth.oauth_consents USING btree (user_id, client_id) WHERE (revoked_at IS NULL)",
              "name": "oauth_consents_active_user_client_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX oauth_consents_pkey ON auth.oauth_consents USING btree (id)",
              "name": "oauth_consents_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX oauth_consents_user_client_unique ON auth.oauth_consents USING btree (user_id, client_id)",
              "name": "oauth_consents_user_client_unique"
            },
            {
              "def": "CREATE INDEX oauth_consents_user_order_idx ON auth.oauth_consents USING btree (user_id, granted_at DESC)",
              "name": "oauth_consents_user_order_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "oauth_consents_client_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (client_id) REFERENCES auth.oauth_clients(id) ON DELETE CASCADE"
            },
            {
              "name": "oauth_consents_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "oauth_consents_revoked_after_granted",
              "type": "c",
              "definition": "CHECK (revoked_at IS NULL OR revoked_at >= granted_at)"
            },
            {
              "name": "oauth_consents_scopes_length",
              "type": "c",
              "definition": "CHECK (char_length(scopes) <= 2048)"
            },
            {
              "name": "oauth_consents_scopes_not_empty",
              "type": "c",
              "definition": "CHECK (char_length(TRIM(BOTH FROM scopes)) > 0)"
            },
            {
              "name": "oauth_consents_user_client_unique",
              "type": "u",
              "definition": "UNIQUE (user_id, client_id)"
            },
            {
              "name": "oauth_consents_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "one_time_tokens",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "token_type",
              "default": null,
              "identity": "NO",
              "udt_name": "one_time_token_type",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "token_hash",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "relates_to",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX one_time_tokens_pkey ON auth.one_time_tokens USING btree (id)",
              "name": "one_time_tokens_pkey"
            },
            {
              "def": "CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to)",
              "name": "one_time_tokens_relates_to_hash_idx"
            },
            {
              "def": "CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash)",
              "name": "one_time_tokens_token_hash_hash_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type)",
              "name": "one_time_tokens_user_id_token_type_key"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "one_time_tokens_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "one_time_tokens_token_hash_check",
              "type": "c",
              "definition": "CHECK (char_length(token_hash) > 0)"
            },
            {
              "name": "one_time_tokens_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "refresh_tokens",
          "schema": "auth",
          "columns": [
            {
              "name": "instance_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "id",
              "default": "nextval('auth.refresh_tokens_id_seq'::regclass)",
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "token",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "revoked",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "parent",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "session_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id)",
              "name": "refresh_tokens_instance_id_idx"
            },
            {
              "def": "CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id)",
              "name": "refresh_tokens_instance_id_user_id_idx"
            },
            {
              "def": "CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent)",
              "name": "refresh_tokens_parent_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX refresh_tokens_pkey ON auth.refresh_tokens USING btree (id)",
              "name": "refresh_tokens_pkey"
            },
            {
              "def": "CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked)",
              "name": "refresh_tokens_session_id_revoked_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX refresh_tokens_token_unique ON auth.refresh_tokens USING btree (token)",
              "name": "refresh_tokens_token_unique"
            },
            {
              "def": "CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC)",
              "name": "refresh_tokens_updated_at_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "refresh_tokens_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "refresh_tokens_session_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE"
            },
            {
              "name": "refresh_tokens_token_unique",
              "type": "u",
              "definition": "UNIQUE (token)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "saml_providers",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "sso_provider_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "entity_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "metadata_xml",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "metadata_url",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "attribute_mapping",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "name_id_format",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX saml_providers_entity_id_key ON auth.saml_providers USING btree (entity_id)",
              "name": "saml_providers_entity_id_key"
            },
            {
              "def": "CREATE UNIQUE INDEX saml_providers_pkey ON auth.saml_providers USING btree (id)",
              "name": "saml_providers_pkey"
            },
            {
              "def": "CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id)",
              "name": "saml_providers_sso_provider_id_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "entity_id not empty",
              "type": "c",
              "definition": "CHECK (char_length(entity_id) > 0)"
            },
            {
              "name": "metadata_url not empty",
              "type": "c",
              "definition": "CHECK (metadata_url = NULL::text OR char_length(metadata_url) > 0)"
            },
            {
              "name": "metadata_xml not empty",
              "type": "c",
              "definition": "CHECK (char_length(metadata_xml) > 0)"
            },
            {
              "name": "saml_providers_entity_id_key",
              "type": "u",
              "definition": "UNIQUE (entity_id)"
            },
            {
              "name": "saml_providers_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "saml_providers_sso_provider_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "saml_relay_states",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "sso_provider_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "request_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "for_email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "redirect_to",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "flow_state_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC)",
              "name": "saml_relay_states_created_at_idx"
            },
            {
              "def": "CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email)",
              "name": "saml_relay_states_for_email_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX saml_relay_states_pkey ON auth.saml_relay_states USING btree (id)",
              "name": "saml_relay_states_pkey"
            },
            {
              "def": "CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id)",
              "name": "saml_relay_states_sso_provider_id_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "request_id not empty",
              "type": "c",
              "definition": "CHECK (char_length(request_id) > 0)"
            },
            {
              "name": "saml_relay_states_flow_state_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE"
            },
            {
              "name": "saml_relay_states_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "saml_relay_states_sso_provider_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "schema_migrations",
          "schema": "auth",
          "columns": [
            {
              "name": "version",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX schema_migrations_pkey ON auth.schema_migrations USING btree (version)",
              "name": "schema_migrations_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "schema_migrations_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (version)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "sessions",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "factor_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "aal",
              "default": null,
              "identity": "NO",
              "udt_name": "aal_level",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "not_after",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "refreshed_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "user_agent",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "ip",
              "default": null,
              "identity": "NO",
              "udt_name": "inet",
              "collation": null,
              "data_type": "inet",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "tag",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "oauth_client_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC)",
              "name": "sessions_not_after_idx"
            },
            {
              "def": "CREATE INDEX sessions_oauth_client_id_idx ON auth.sessions USING btree (oauth_client_id)",
              "name": "sessions_oauth_client_id_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX sessions_pkey ON auth.sessions USING btree (id)",
              "name": "sessions_pkey"
            },
            {
              "def": "CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id)",
              "name": "sessions_user_id_idx"
            },
            {
              "def": "CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at)",
              "name": "user_id_created_at_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "sessions_oauth_client_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (oauth_client_id) REFERENCES auth.oauth_clients(id) ON DELETE CASCADE"
            },
            {
              "name": "sessions_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "sessions_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "sso_domains",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "sso_provider_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "domain",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain))",
              "name": "sso_domains_domain_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX sso_domains_pkey ON auth.sso_domains USING btree (id)",
              "name": "sso_domains_pkey"
            },
            {
              "def": "CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id)",
              "name": "sso_domains_sso_provider_id_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "domain not empty",
              "type": "c",
              "definition": "CHECK (char_length(domain) > 0)"
            },
            {
              "name": "sso_domains_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "sso_domains_sso_provider_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "sso_providers",
          "schema": "auth",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "resource_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "disabled",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX sso_providers_pkey ON auth.sso_providers USING btree (id)",
              "name": "sso_providers_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id))",
              "name": "sso_providers_resource_id_idx"
            },
            {
              "def": "CREATE INDEX sso_providers_resource_id_pattern_idx ON auth.sso_providers USING btree (resource_id text_pattern_ops)",
              "name": "sso_providers_resource_id_pattern_idx"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "resource_id not empty",
              "type": "c",
              "definition": "CHECK (resource_id = NULL::text OR char_length(resource_id) > 0)"
            },
            {
              "name": "sso_providers_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_auth_admin",
          "table": "users",
          "schema": "auth",
          "columns": [
            {
              "name": "instance_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "aud",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "role",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "encrypted_password",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email_confirmed_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "invited_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "confirmation_token",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "confirmation_sent_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "recovery_token",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "recovery_sent_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email_change_token_new",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email_change",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email_change_sent_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "last_sign_in_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "raw_app_meta_data",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "raw_user_meta_data",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_super_admin",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone",
              "default": "NULL::character varying",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_confirmed_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_change",
              "default": "''::character varying",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_change_token",
              "default": "''::character varying",
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_change_sent_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "confirmed_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "ALWAYS",
              "is_nullable": "YES"
            },
            {
              "name": "email_change_token_current",
              "default": "''::character varying",
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email_change_confirm_status",
              "default": "0",
              "identity": "NO",
              "udt_name": "int2",
              "collation": null,
              "data_type": "smallint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "banned_until",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "reauthentication_token",
              "default": "''::character varying",
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "reauthentication_sent_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_sso_user",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "deleted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_anonymous",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text)",
              "name": "confirmation_token_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text)",
              "name": "email_change_token_current_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text)",
              "name": "email_change_token_new_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text)",
              "name": "reauthentication_token_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text)",
              "name": "recovery_token_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false)",
              "name": "users_email_partial_key"
            },
            {
              "def": "CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text))",
              "name": "users_instance_id_email_idx"
            },
            {
              "def": "CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id)",
              "name": "users_instance_id_idx"
            },
            {
              "def": "CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous)",
              "name": "users_is_anonymous_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX users_phone_key ON auth.users USING btree (phone)",
              "name": "users_phone_key"
            },
            {
              "def": "CREATE UNIQUE INDEX users_pkey ON auth.users USING btree (id)",
              "name": "users_pkey"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user()",
              "name": "on_auth_user_created",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "users_email_change_confirm_status_check",
              "type": "c",
              "definition": "CHECK (email_change_confirm_status >= 0 AND email_change_confirm_status <= 2)"
            },
            {
              "name": "users_phone_key",
              "type": "u",
              "definition": "UNIQUE (phone)"
            },
            {
              "name": "users_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "kv_secrets",
          "schema": "private",
          "columns": [
            {
              "name": "k",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "v",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX kv_secrets_pkey ON private.kv_secrets USING btree (k)",
              "name": "kv_secrets_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "kv_secrets_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (k)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "account_feature_permissions",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "allowed_features",
              "default": "'{}'::text[]",
              "identity": "NO",
              "udt_name": "_text",
              "collation": null,
              "data_type": "ARRAY",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "can_create",
              "default": "true",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "can_update",
              "default": "true",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "can_delete",
              "default": "true",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX account_feature_permissions_account_id_user_uid_key ON public.account_feature_permissions USING btree (account_id, user_uid)",
              "name": "account_feature_permissions_account_id_user_uid_key"
            },
            {
              "def": "CREATE UNIQUE INDEX account_feature_permissions_pkey ON public.account_feature_permissions USING btree (id)",
              "name": "account_feature_permissions_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX afp_account_user_uid_idx ON public.account_feature_permissions USING btree (account_id, user_uid)",
              "name": "afp_account_user_uid_idx"
            },
            {
              "def": "CREATE INDEX idx_afp_acc_user ON public.account_feature_permissions USING btree (account_id, user_uid)",
              "name": "idx_afp_acc_user"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER tg_afp_updated_at BEFORE UPDATE ON account_feature_permissions FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "tg_afp_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "account_feature_permissions_account_id_user_uid_key",
              "type": "u",
              "definition": "UNIQUE (account_id, user_uid)"
            },
            {
              "name": "account_feature_permissions_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "account_users",
          "schema": "public",
          "columns": [
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "role",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "disabled",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX account_users_account_lower_email_idx ON public.account_users USING btree (account_id, lower(email))",
              "name": "account_users_account_lower_email_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX account_users_account_user_uq ON public.account_users USING btree (account_id, user_uid)",
              "name": "account_users_account_user_uq"
            },
            {
              "def": "CREATE UNIQUE INDEX account_users_pkey ON public.account_users USING btree (account_id, user_uid)",
              "name": "account_users_pkey"
            },
            {
              "def": "CREATE INDEX account_users_role_idx ON public.account_users USING btree (role)",
              "name": "account_users_role_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX account_users_uix_account_device_local ON public.account_users USING btree (account_id, device_id, local_id)",
              "name": "account_users_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX account_users_unique_account_user ON public.account_users USING btree (account_id, user_uid)",
              "name": "account_users_unique_account_user"
            },
            {
              "def": "CREATE UNIQUE INDEX account_users_user_account_uidx ON public.account_users USING btree (user_uid, account_id)",
              "name": "account_users_user_account_uidx"
            },
            {
              "def": "CREATE INDEX account_users_user_idx ON public.account_users USING btree (user_uid)",
              "name": "account_users_user_idx"
            },
            {
              "def": "CREATE INDEX idx_account_users_account ON public.account_users USING btree (account_id)",
              "name": "idx_account_users_account"
            },
            {
              "def": "CREATE INDEX idx_account_users_email ON public.account_users USING btree (lower(email))",
              "name": "idx_account_users_email"
            },
            {
              "def": "CREATE INDEX idx_account_users_user ON public.account_users USING btree (user_uid)",
              "name": "idx_account_users_user"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER tg_account_users_ensure_clinic BEFORE INSERT OR UPDATE OF account_id ON account_users FOR EACH ROW EXECUTE FUNCTION trg_account_users_ensure_clinic()",
              "name": "tg_account_users_ensure_clinic",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_account_users_fill_account_id BEFORE INSERT ON account_users FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_account_users_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_account_users_fill_email BEFORE INSERT OR UPDATE ON account_users FOR EACH ROW EXECUTE FUNCTION trg_account_users_fill_email()",
              "name": "trg_account_users_fill_email",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_account_users_touch_updated_at BEFORE INSERT OR UPDATE ON account_users FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_account_users_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_account_users_updated_at BEFORE UPDATE ON account_users FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_account_users_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "account_users_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "account_users_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (account_id, user_uid)"
            },
            {
              "name": "account_users_role_check",
              "type": "c",
              "definition": "CHECK (role = ANY (ARRAY['owner'::text, 'employee'::text, 'superAdmin'::text]))"
            },
            {
              "name": "account_users_unique_account_user",
              "type": "u",
              "definition": "UNIQUE (account_id, user_uid)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "accounts",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "owner_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "frozen",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX accounts_pkey ON public.accounts USING btree (id)",
              "name": "accounts_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX accounts_uix_account_device_local ON public.accounts USING btree (account_id, device_id, local_id)",
              "name": "accounts_uix_account_device_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER accounts__fill_owner_uid BEFORE INSERT ON accounts FOR EACH ROW EXECUTE FUNCTION tg_accounts_fill_owner_uid()",
              "name": "accounts__fill_owner_uid",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "accounts_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "alert_settings",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "item_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "threshold",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "notify_time",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "is_enabled",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "last_triggered",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX alert_settings_acc_upd_idx ON public.alert_settings USING btree (account_id, updated_at DESC)",
              "name": "alert_settings_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX alert_settings_account_device_local_idx ON public.alert_settings USING btree (account_id, device_id, local_id)",
              "name": "alert_settings_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX alert_settings_pkey ON public.alert_settings USING btree (id)",
              "name": "alert_settings_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX alert_settings_uix_acc_dev_local ON public.alert_settings USING btree (account_id, device_id, local_id)",
              "name": "alert_settings_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX alert_settings_uix_account_device_local ON public.alert_settings USING btree (account_id, device_id, local_id)",
              "name": "alert_settings_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_alert_settings_account ON public.alert_settings USING btree (account_id)",
              "name": "idx_alert_settings_account"
            },
            {
              "def": "CREATE INDEX idx_alert_settings_account_item_id ON public.alert_settings USING btree (account_id, item_id)",
              "name": "idx_alert_settings_account_item_id"
            },
            {
              "def": "CREATE INDEX idx_alert_settings_account_local ON public.alert_settings USING btree (account_id, local_id)",
              "name": "idx_alert_settings_account_local"
            },
            {
              "def": "CREATE INDEX idx_alert_settings_item_id ON public.alert_settings USING btree (item_id)",
              "name": "idx_alert_settings_item_id"
            },
            {
              "def": "CREATE INDEX ix_alert_settings_acc_updated_at ON public.alert_settings USING btree (account_id, updated_at DESC)",
              "name": "ix_alert_settings_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_alert_settings_acc_dev_local ON public.alert_settings USING btree (account_id, device_id, local_id)",
              "name": "uix_alert_settings_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_alert_settings BEFORE INSERT OR UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_alert_settings",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_alert_settings_fill_account_id BEFORE INSERT ON alert_settings FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_alert_settings_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_alert_settings AFTER INSERT OR DELETE OR UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_alert_settings",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_alert_settings_fill_account_id BEFORE INSERT ON alert_settings FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_alert_settings_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_alert_settings_set_updated_at BEFORE INSERT OR UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_alert_settings_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_alert_settings_touch_updated_at BEFORE INSERT OR UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_alert_settings_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_alert_settings_updated_at BEFORE UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_alert_settings_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON alert_settings FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON alert_settings FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "alert_settings_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "alert_settings_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "appointments",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "patient_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "appointment_time",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "status",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "notes",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX appointments_acc_upd_idx ON public.appointments USING btree (account_id, updated_at DESC)",
              "name": "appointments_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX appointments_account_device_local_idx ON public.appointments USING btree (account_id, device_id, local_id)",
              "name": "appointments_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX appointments_pkey ON public.appointments USING btree (id)",
              "name": "appointments_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX appointments_uix_acc_dev_local ON public.appointments USING btree (account_id, device_id, local_id)",
              "name": "appointments_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX appointments_uix_account_device_local ON public.appointments USING btree (account_id, device_id, local_id)",
              "name": "appointments_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_appointments_account ON public.appointments USING btree (account_id)",
              "name": "idx_appointments_account"
            },
            {
              "def": "CREATE INDEX idx_appointments_account_appointment_time ON public.appointments USING btree (account_id, appointment_time)",
              "name": "idx_appointments_account_appointment_time"
            },
            {
              "def": "CREATE INDEX idx_appointments_account_local ON public.appointments USING btree (account_id, local_id)",
              "name": "idx_appointments_account_local"
            },
            {
              "def": "CREATE INDEX idx_appointments_account_patient_id ON public.appointments USING btree (account_id, patient_id)",
              "name": "idx_appointments_account_patient_id"
            },
            {
              "def": "CREATE INDEX idx_appointments_patient_id ON public.appointments USING btree (patient_id)",
              "name": "idx_appointments_patient_id"
            },
            {
              "def": "CREATE INDEX idx_appointments_time ON public.appointments USING btree (appointment_time)",
              "name": "idx_appointments_time"
            },
            {
              "def": "CREATE INDEX ix_appointments_acc_updated_at ON public.appointments USING btree (account_id, updated_at DESC)",
              "name": "ix_appointments_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_appointments_acc_dev_local ON public.appointments USING btree (account_id, device_id, local_id)",
              "name": "uix_appointments_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_appointments BEFORE INSERT OR UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_appointments",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_appointments_fill_account_id BEFORE INSERT ON appointments FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_appointments_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_appointments AFTER INSERT OR DELETE OR UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_appointments",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_appointments_fill_account_id BEFORE INSERT ON appointments FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_appointments_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_appointments_set_updated_at BEFORE INSERT OR UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_appointments_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_appointments_touch_updated_at BEFORE INSERT OR UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_appointments_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_appointments_updated_at BEFORE UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_appointments_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON appointments FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "appointments_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "appointments_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "attachments",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "nextval('attachments_id_seq'::regclass)",
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "patient_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "file_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "storage_path",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "mime_type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "size_bytes",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX attachments_pkey ON public.attachments USING btree (id)",
              "name": "attachments_pkey"
            },
            {
              "def": "CREATE INDEX ix_attachments_acc_updated_at ON public.attachments USING btree (account_id, updated_at DESC)",
              "name": "ix_attachments_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uidx_attachments_sync_key ON public.attachments USING btree (account_id, device_id, local_id)",
              "name": "uidx_attachments_sync_key"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_attachments_acc_dev_local ON public.attachments USING btree (account_id, device_id, local_id) WHERE ((account_id IS NOT NULL) AND (local_id IS NOT NULL) AND (device_id <> ''::text))",
              "name": "uix_attachments_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX ux_attachments_account_local ON public.attachments USING btree (account_id, local_id)",
              "name": "ux_attachments_account_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON attachments FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_attachments AFTER INSERT OR DELETE OR UPDATE ON attachments FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_attachments",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_attachments_fill_account_id BEFORE INSERT ON attachments FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_attachments_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_attachments_updated_at BEFORE UPDATE ON attachments FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_attachments_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON attachments FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "attachments_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "attachments_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "audit_logs",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "nextval('audit_logs_id_seq'::regclass)",
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "actor_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "actor_email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "table_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "op",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "row_pk",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "before_row",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "after_row",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "diff",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX audit_logs_pkey ON public.audit_logs USING btree (id)",
              "name": "audit_logs_pkey"
            },
            {
              "def": "CREATE INDEX idx_audit_logs_acc_created ON public.audit_logs USING btree (account_id, created_at DESC)",
              "name": "idx_audit_logs_acc_created"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "audit_logs_op_check",
              "type": "c",
              "definition": "CHECK (op = ANY (ARRAY['insert'::text, 'update'::text, 'delete'::text]))"
            },
            {
              "name": "audit_logs_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "chat_attachments",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "message_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "bucket",
              "default": "'chat-attachments'::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "path",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "mime_type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "size_bytes",
              "default": "0",
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "width",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "height",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_deleted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "deleted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX chat_attachments_bucket_path_key ON public.chat_attachments USING btree (bucket, path)",
              "name": "chat_attachments_bucket_path_key"
            },
            {
              "def": "CREATE INDEX chat_attachments_message_id_idx ON public.chat_attachments USING btree (message_id)",
              "name": "chat_attachments_message_id_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX chat_attachments_pkey ON public.chat_attachments USING btree (id)",
              "name": "chat_attachments_pkey"
            },
            {
              "def": "CREATE INDEX idx_chat_atts_message ON public.chat_attachments USING btree (message_id)",
              "name": "idx_chat_atts_message"
            },
            {
              "def": "CREATE INDEX ix_chat_attachments_account_msg ON public.chat_attachments USING btree (account_id, message_id)",
              "name": "ix_chat_attachments_account_msg"
            },
            {
              "def": "CREATE INDEX ix_chat_attachments_active ON public.chat_attachments USING btree (message_id) WHERE (is_deleted = false)",
              "name": "ix_chat_attachments_active"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_chat_attachments_acc_dev_local ON public.chat_attachments USING btree (account_id, device_id, local_id) WHERE ((account_id IS NOT NULL) AND (device_id IS NOT NULL) AND (local_id IS NOT NULL))",
              "name": "uix_chat_attachments_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_chat_atts_acc_dev_local ON public.chat_attachments USING btree (account_id, device_id, local_id)",
              "name": "uix_chat_atts_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER soft_delete_chat_attachments BEFORE DELETE ON chat_attachments FOR EACH ROW EXECUTE FUNCTION fn_soft_delete_by_id()",
              "name": "soft_delete_chat_attachments",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_set_acc_on_attachments BEFORE INSERT OR UPDATE ON chat_attachments FOR EACH ROW EXECUTE FUNCTION fn_set_account_from_message_on_attachments()",
              "name": "trg_set_acc_on_attachments",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_attachments_bucket_path_key",
              "type": "u",
              "definition": "UNIQUE (bucket, path)"
            },
            {
              "name": "chat_attachments_message_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (message_id) REFERENCES chat_messages(id) ON DELETE CASCADE"
            },
            {
              "name": "chat_attachments_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "ck_chat_attachments_local_id_positive",
              "type": "c",
              "definition": "CHECK (local_id IS NULL OR local_id > 0)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "chat_conversations",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_group",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "title",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_by",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "last_msg_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "last_msg_snippet",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_deleted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "deleted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX chat_conversations_last_msg_idx ON public.chat_conversations USING btree (last_msg_at DESC)",
              "name": "chat_conversations_last_msg_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX chat_conversations_pkey ON public.chat_conversations USING btree (id)",
              "name": "chat_conversations_pkey"
            },
            {
              "def": "CREATE INDEX idx_chat_convs_account ON public.chat_conversations USING btree (account_id)",
              "name": "idx_chat_convs_account"
            },
            {
              "def": "CREATE INDEX idx_chat_convs_created_by ON public.chat_conversations USING btree (created_by)",
              "name": "idx_chat_convs_created_by"
            },
            {
              "def": "CREATE INDEX idx_chat_convs_updated ON public.chat_conversations USING btree (updated_at DESC)",
              "name": "idx_chat_convs_updated"
            },
            {
              "def": "CREATE INDEX idx_conv_created_at ON public.chat_conversations USING btree (created_at DESC)",
              "name": "idx_conv_created_at"
            },
            {
              "def": "CREATE INDEX ix_chat_conversations_acc_updated_at ON public.chat_conversations USING btree (account_id, updated_at DESC)",
              "name": "ix_chat_conversations_acc_updated_at"
            },
            {
              "def": "CREATE INDEX ix_chat_conversations_active ON public.chat_conversations USING btree (account_id, id) WHERE (is_deleted = false)",
              "name": "ix_chat_conversations_active"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER soft_delete_chat_conversations BEFORE DELETE ON chat_conversations FOR EACH ROW EXECUTE FUNCTION fn_soft_delete_by_id()",
              "name": "soft_delete_chat_conversations",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_chat_conversations_ensure_clinic BEFORE INSERT OR UPDATE OF account_id ON chat_conversations FOR EACH ROW EXECUTE FUNCTION trg_chat_conversations_ensure_clinic()",
              "name": "tg_chat_conversations_ensure_clinic",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_chat_conversations_set_updated BEFORE UPDATE ON chat_conversations FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_chat_conversations_set_updated",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_conv_auto_add_creator AFTER INSERT ON chat_conversations FOR EACH ROW EXECUTE FUNCTION trg_conv_auto_add_creator()",
              "name": "trg_conv_auto_add_creator",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON chat_conversations FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_conversations_created_by_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE RESTRICT"
            },
            {
              "name": "chat_conversations_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "fk_chat_conversations_account",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES clinics(id) ON DELETE SET NULL"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "chat_messages",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "conversation_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "sender_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "sender_email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "kind",
              "default": "'text'::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "body",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "patient_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "edited",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "deleted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "edited_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "deleted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "text",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "attachments",
              "default": "'[]'::jsonb",
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "reply_to_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "mentions",
              "default": null,
              "identity": "NO",
              "udt_name": "_text",
              "collation": null,
              "data_type": "ARRAY",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "reply_to_message_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "reply_to_snippet",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_deleted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX chat_messages_conv_created_not_deleted_idx ON public.chat_messages USING btree (conversation_id, created_at DESC) WHERE (deleted IS NOT TRUE)",
              "name": "chat_messages_conv_created_not_deleted_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX chat_messages_pkey ON public.chat_messages USING btree (id)",
              "name": "chat_messages_pkey"
            },
            {
              "def": "CREATE INDEX chat_messages_reply_to_idx ON public.chat_messages USING btree (reply_to_message_id)",
              "name": "chat_messages_reply_to_idx"
            },
            {
              "def": "CREATE INDEX chat_messages_trgm_idx ON public.chat_messages USING gin ((((COALESCE(body, ''::text) || ' '::text) || COALESCE(text, ''::text))) gin_trgm_ops)",
              "name": "chat_messages_trgm_idx"
            },
            {
              "def": "CREATE INDEX idx_chat_messages_conv_created_not_deleted ON public.chat_messages USING btree (conversation_id, created_at DESC) WHERE (COALESCE(deleted, false) = false)",
              "name": "idx_chat_messages_conv_created_not_deleted"
            },
            {
              "def": "CREATE INDEX idx_chat_messages_conv_sender_created ON public.chat_messages USING btree (conversation_id, sender_uid, created_at)",
              "name": "idx_chat_messages_conv_sender_created"
            },
            {
              "def": "CREATE INDEX idx_chat_messages_kind_deleted ON public.chat_messages USING btree (kind, deleted)",
              "name": "idx_chat_messages_kind_deleted"
            },
            {
              "def": "CREATE INDEX idx_chat_msgs_conv_created ON public.chat_messages USING btree (conversation_id, created_at DESC)",
              "name": "idx_chat_msgs_conv_created"
            },
            {
              "def": "CREATE INDEX idx_chat_msgs_reply_to ON public.chat_messages USING btree (reply_to_id)",
              "name": "idx_chat_msgs_reply_to"
            },
            {
              "def": "CREATE INDEX idx_chat_msgs_sender ON public.chat_messages USING btree (sender_uid)",
              "name": "idx_chat_msgs_sender"
            },
            {
              "def": "CREATE INDEX idx_msg_conv_deleted ON public.chat_messages USING btree (deleted)",
              "name": "idx_msg_conv_deleted"
            },
            {
              "def": "CREATE INDEX idx_msgs_conv_kind_created_not_deleted ON public.chat_messages USING btree (conversation_id, kind, created_at DESC) WHERE (COALESCE(deleted, false) = false)",
              "name": "idx_msgs_conv_kind_created_not_deleted"
            },
            {
              "def": "CREATE INDEX idx_msgs_kind_created_not_deleted ON public.chat_messages USING btree (kind, created_at DESC) WHERE (COALESCE(deleted, false) = false)",
              "name": "idx_msgs_kind_created_not_deleted"
            },
            {
              "def": "CREATE INDEX ix_chat_messages_active ON public.chat_messages USING btree (conversation_id, created_at) WHERE (is_deleted = false)",
              "name": "ix_chat_messages_active"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_chat_messages_acc_dev_local ON public.chat_messages USING btree (account_id, device_id, local_id)",
              "name": "uix_chat_messages_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uq_chat_messages_dev_local ON public.chat_messages USING btree (device_id, local_id)",
              "name": "uq_chat_messages_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uq_chat_messages_device_local ON public.chat_messages USING btree (device_id, local_id)",
              "name": "uq_chat_messages_device_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER soft_delete_chat_messages BEFORE DELETE ON chat_messages FOR EACH ROW EXECUTE FUNCTION fn_soft_delete_by_id()",
              "name": "soft_delete_chat_messages",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_after_msg_delete_recalc AFTER DELETE ON chat_messages FOR EACH ROW EXECUTE FUNCTION fn_after_msg_delete_recalc_unreads()",
              "name": "trg_after_msg_delete_recalc",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_after_msg_insert_unreads AFTER INSERT ON chat_messages FOR EACH ROW EXECUTE FUNCTION fn_after_msg_insert_unreads()",
              "name": "trg_after_msg_insert_unreads",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_after_msg_insert_update_conv AFTER INSERT ON chat_messages FOR EACH ROW EXECUTE FUNCTION fn_after_msg_insert_update_conv()",
              "name": "trg_after_msg_insert_update_conv",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_after_msg_update_deleted AFTER UPDATE OF deleted ON chat_messages FOR EACH ROW EXECUTE FUNCTION fn_after_msg_update_deleted()",
              "name": "trg_after_msg_update_deleted",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_after_msg_update_deleted_recalc AFTER UPDATE OF deleted ON chat_messages FOR EACH ROW EXECUTE FUNCTION fn_after_msg_delete_recalc_unreads()",
              "name": "trg_after_msg_update_deleted_recalc",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_messages_fill_defaults BEFORE INSERT ON chat_messages FOR EACH ROW EXECUTE FUNCTION trg_messages_fill_defaults()",
              "name": "trg_messages_fill_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_messages_update_conversation_last_del AFTER DELETE ON chat_messages FOR EACH ROW EXECUTE FUNCTION trg_messages_update_conversation_last()",
              "name": "trg_messages_update_conversation_last_del",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_messages_update_conversation_last_ins AFTER INSERT ON chat_messages FOR EACH ROW EXECUTE FUNCTION trg_messages_update_conversation_last()",
              "name": "trg_messages_update_conversation_last_ins",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_messages_update_conversation_last_upd AFTER UPDATE OF body, text, deleted, created_at, kind ON chat_messages FOR EACH ROW EXECUTE FUNCTION trg_messages_update_conversation_last()",
              "name": "trg_messages_update_conversation_last_upd",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_messages_conversation_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            },
            {
              "name": "chat_messages_kind_check",
              "type": "c",
              "definition": "CHECK (kind = ANY (ARRAY['text'::text, 'image'::text]))"
            },
            {
              "name": "chat_messages_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "chat_messages_reply_fk",
              "type": "f",
              "definition": "FOREIGN KEY (reply_to_id) REFERENCES chat_messages(id) ON DELETE SET NULL"
            },
            {
              "name": "chat_messages_sender_uid_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (sender_uid) REFERENCES auth.users(id) ON DELETE RESTRICT"
            },
            {
              "name": "ck_chat_messages_local_id_positive",
              "type": "c",
              "definition": "CHECK (local_id IS NULL OR local_id > 0)"
            },
            {
              "name": "fk_chat_messages_conversation",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "chat_participants",
          "schema": "public",
          "columns": [
            {
              "name": "conversation_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "role",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "joined_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "muted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "nickname",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX chat_participants_pkey ON public.chat_participants USING btree (conversation_id, user_uid)",
              "name": "chat_participants_pkey"
            },
            {
              "def": "CREATE INDEX chat_participants_user_conv_idx ON public.chat_participants USING btree (user_uid, conversation_id)",
              "name": "chat_participants_user_conv_idx"
            },
            {
              "def": "CREATE INDEX chat_participants_user_idx ON public.chat_participants USING btree (user_uid)",
              "name": "chat_participants_user_idx"
            },
            {
              "def": "CREATE INDEX idx_chat_participants_conv_user ON public.chat_participants USING btree (conversation_id, user_uid)",
              "name": "idx_chat_participants_conv_user"
            },
            {
              "def": "CREATE INDEX idx_chat_participants_conversation_id ON public.chat_participants USING btree (conversation_id)",
              "name": "idx_chat_participants_conversation_id"
            },
            {
              "def": "CREATE INDEX idx_chat_parts_user ON public.chat_participants USING btree (user_uid)",
              "name": "idx_chat_parts_user"
            },
            {
              "def": "CREATE INDEX idx_cp_conv ON public.chat_participants USING btree (conversation_id)",
              "name": "idx_cp_conv"
            },
            {
              "def": "CREATE INDEX idx_cp_user ON public.chat_participants USING btree (user_uid)",
              "name": "idx_cp_user"
            },
            {
              "def": "CREATE INDEX ix_chat_participants_account_conv ON public.chat_participants USING btree (account_id, conversation_id)",
              "name": "ix_chat_participants_account_conv"
            },
            {
              "def": "CREATE INDEX ix_chat_participants_email_lower ON public.chat_participants USING btree (lower(email))",
              "name": "ix_chat_participants_email_lower"
            },
            {
              "def": "CREATE UNIQUE INDEX uq_chat_participants_conv_user ON public.chat_participants USING btree (conversation_id, user_uid)",
              "name": "uq_chat_participants_conv_user"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER trg_after_participant_delete_cleanup_unread AFTER DELETE ON chat_participants FOR EACH ROW EXECUTE FUNCTION fn_after_participant_delete_cleanup_unread()",
              "name": "trg_after_participant_delete_cleanup_unread",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_after_participant_insert_init_unread AFTER INSERT ON chat_participants FOR EACH ROW EXECUTE FUNCTION fn_after_participant_insert_init_unread()",
              "name": "trg_after_participant_insert_init_unread",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_participants_normalize_email_ins BEFORE INSERT ON chat_participants FOR EACH ROW EXECUTE FUNCTION trg_participants_normalize_email()",
              "name": "trg_participants_normalize_email_ins",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_participants_normalize_email_upd BEFORE UPDATE OF email ON chat_participants FOR EACH ROW EXECUTE FUNCTION trg_participants_normalize_email()",
              "name": "trg_participants_normalize_email_upd",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_set_acc_on_participants BEFORE INSERT OR UPDATE ON chat_participants FOR EACH ROW EXECUTE FUNCTION fn_set_account_from_conversation_on_participants()",
              "name": "trg_set_acc_on_participants",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_participants_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (conversation_id, user_uid)"
            },
            {
              "name": "chat_participants_user_uid_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_uid) REFERENCES auth.users(id) ON DELETE CASCADE"
            },
            {
              "name": "fk_chat_participants_conversation",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "chat_reactions",
          "schema": "public",
          "columns": [
            {
              "name": "message_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "emoji",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_deleted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "deleted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX chat_reactions_pkey ON public.chat_reactions USING btree (message_id, user_uid, emoji)",
              "name": "chat_reactions_pkey"
            },
            {
              "def": "CREATE INDEX chat_reactions_user_created_idx ON public.chat_reactions USING btree (user_uid, created_at DESC)",
              "name": "chat_reactions_user_created_idx"
            },
            {
              "def": "CREATE INDEX idx_chat_reactions_msg_emoji ON public.chat_reactions USING btree (message_id, emoji)",
              "name": "idx_chat_reactions_msg_emoji"
            },
            {
              "def": "CREATE INDEX idx_chat_reactions_user ON public.chat_reactions USING btree (user_uid)",
              "name": "idx_chat_reactions_user"
            },
            {
              "def": "CREATE INDEX idx_chat_reacts_message ON public.chat_reactions USING btree (message_id)",
              "name": "idx_chat_reacts_message"
            },
            {
              "def": "CREATE INDEX ix_chat_reactions_account_msg ON public.chat_reactions USING btree (account_id, message_id)",
              "name": "ix_chat_reactions_account_msg"
            },
            {
              "def": "CREATE INDEX ix_chat_reactions_active ON public.chat_reactions USING btree (message_id) WHERE (is_deleted = false)",
              "name": "ix_chat_reactions_active"
            },
            {
              "def": "CREATE INDEX ix_chat_reactions_message_emoji ON public.chat_reactions USING btree (message_id, emoji)",
              "name": "ix_chat_reactions_message_emoji"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_chat_reactions_acc_dev_local ON public.chat_reactions USING btree (account_id, device_id, local_id) WHERE ((account_id IS NOT NULL) AND (device_id IS NOT NULL) AND (local_id IS NOT NULL))",
              "name": "uix_chat_reactions_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_chat_reacts_acc_dev_local ON public.chat_reactions USING btree (account_id, device_id, local_id)",
              "name": "uix_chat_reacts_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER soft_delete_chat_reactions BEFORE DELETE ON chat_reactions FOR EACH ROW EXECUTE FUNCTION fn_soft_delete_by_id()",
              "name": "soft_delete_chat_reactions",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_set_acc_on_reactions BEFORE INSERT OR UPDATE ON chat_reactions FOR EACH ROW EXECUTE FUNCTION fn_set_account_from_message_on_reactions()",
              "name": "trg_set_acc_on_reactions",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_reactions_message_fk",
              "type": "f",
              "definition": "FOREIGN KEY (message_id) REFERENCES chat_messages(id) ON DELETE CASCADE"
            },
            {
              "name": "chat_reactions_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (message_id, user_uid, emoji)"
            },
            {
              "name": "ck_chat_reactions_local_id_positive",
              "type": "c",
              "definition": "CHECK (local_id IS NULL OR local_id > 0)"
            },
            {
              "name": "fk_chat_reactions_message",
              "type": "f",
              "definition": "FOREIGN KEY (message_id) REFERENCES chat_messages(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "chat_reads",
          "schema": "public",
          "columns": [
            {
              "name": "conversation_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "last_read_message_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "last_read_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX chat_reads_conv_user_idx ON public.chat_reads USING btree (conversation_id, user_uid)",
              "name": "chat_reads_conv_user_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX chat_reads_pkey ON public.chat_reads USING btree (conversation_id, user_uid)",
              "name": "chat_reads_pkey"
            },
            {
              "def": "CREATE INDEX chat_reads_user_idx ON public.chat_reads USING btree (user_uid)",
              "name": "chat_reads_user_idx"
            },
            {
              "def": "CREATE INDEX idx_chat_reads_conv ON public.chat_reads USING btree (conversation_id)",
              "name": "idx_chat_reads_conv"
            },
            {
              "def": "CREATE INDEX idx_chat_reads_conv_user ON public.chat_reads USING btree (conversation_id, user_uid)",
              "name": "idx_chat_reads_conv_user"
            },
            {
              "def": "CREATE INDEX idx_chat_reads_last ON public.chat_reads USING btree (last_read_at DESC)",
              "name": "idx_chat_reads_last"
            },
            {
              "def": "CREATE INDEX idx_chat_reads_last_read_msg ON public.chat_reads USING btree (last_read_message_id)",
              "name": "idx_chat_reads_last_read_msg"
            },
            {
              "def": "CREATE INDEX idx_reads_user_conv ON public.chat_reads USING btree (user_uid, conversation_id)",
              "name": "idx_reads_user_conv"
            },
            {
              "def": "CREATE INDEX ix_chat_reads_account_conv ON public.chat_reads USING btree (account_id, conversation_id)",
              "name": "ix_chat_reads_account_conv"
            },
            {
              "def": "CREATE INDEX ix_chat_reads_uid_conv ON public.chat_reads USING btree (user_uid, conversation_id)",
              "name": "ix_chat_reads_uid_conv"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER trg_after_chat_reads_upsert_recalc AFTER INSERT OR UPDATE ON chat_reads FOR EACH ROW EXECUTE FUNCTION fn_after_chat_reads_upsert_recalc()",
              "name": "trg_after_chat_reads_upsert_recalc",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_set_acc_on_reads BEFORE INSERT OR UPDATE ON chat_reads FOR EACH ROW EXECUTE FUNCTION fn_set_account_from_conversation_on_reads()",
              "name": "trg_set_acc_on_reads",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_reads_conversation_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            },
            {
              "name": "chat_reads_last_read_message_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (last_read_message_id) REFERENCES chat_messages(id) ON DELETE SET NULL"
            },
            {
              "name": "chat_reads_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (conversation_id, user_uid)"
            },
            {
              "name": "chat_reads_user_uid_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_uid) REFERENCES auth.users(id) ON DELETE CASCADE"
            },
            {
              "name": "fk_chat_reads_conversation",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "chat_unreads",
          "schema": "public",
          "columns": [
            {
              "name": "conversation_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "unread_count",
              "default": "0",
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX chat_unreads_pkey ON public.chat_unreads USING btree (conversation_id, user_uid)",
              "name": "chat_unreads_pkey"
            },
            {
              "def": "CREATE INDEX idx_chat_unreads_user ON public.chat_unreads USING btree (user_uid)",
              "name": "idx_chat_unreads_user"
            },
            {
              "def": "CREATE INDEX ix_chat_unreads_account_conv ON public.chat_unreads USING btree (account_id, conversation_id)",
              "name": "ix_chat_unreads_account_conv"
            },
            {
              "def": "CREATE INDEX ix_chat_unreads_uid_conv ON public.chat_unreads USING btree (user_uid, conversation_id)",
              "name": "ix_chat_unreads_uid_conv"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER trg_set_acc_on_unreads BEFORE INSERT OR UPDATE ON chat_unreads FOR EACH ROW EXECUTE FUNCTION fn_set_account_from_conversation_on_reads()",
              "name": "trg_set_acc_on_unreads",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "chat_unreads_conversation_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            },
            {
              "name": "chat_unreads_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (conversation_id, user_uid)"
            },
            {
              "name": "fk_chat_unreads_conversation",
              "type": "f",
              "definition": "FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "clinics",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "is_frozen",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX clinics_pkey ON public.clinics USING btree (id)",
              "name": "clinics_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX clinics_uix_account_device_local ON public.clinics USING btree (account_id, device_id, local_id)",
              "name": "clinics_uix_account_device_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER tg_audit_clinics AFTER INSERT OR DELETE OR UPDATE ON clinics FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_clinics",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "clinics_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "complaints",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "title",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "description",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "status",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX complaints_acc_upd_idx ON public.complaints USING btree (account_id, updated_at DESC)",
              "name": "complaints_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX complaints_account_device_local_idx ON public.complaints USING btree (account_id, device_id, local_id)",
              "name": "complaints_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX complaints_pkey ON public.complaints USING btree (id)",
              "name": "complaints_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX complaints_uix_acc_dev_local ON public.complaints USING btree (account_id, device_id, local_id)",
              "name": "complaints_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX complaints_uix_account_device_local ON public.complaints USING btree (account_id, device_id, local_id)",
              "name": "complaints_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_complaints_account ON public.complaints USING btree (account_id)",
              "name": "idx_complaints_account"
            },
            {
              "def": "CREATE INDEX idx_complaints_account_created_at ON public.complaints USING btree (account_id, created_at)",
              "name": "idx_complaints_account_created_at"
            },
            {
              "def": "CREATE INDEX idx_complaints_account_local ON public.complaints USING btree (account_id, local_id)",
              "name": "idx_complaints_account_local"
            },
            {
              "def": "CREATE INDEX ix_complaints_acc_updated_at ON public.complaints USING btree (account_id, updated_at DESC)",
              "name": "ix_complaints_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_complaints_acc_dev_local ON public.complaints USING btree (account_id, device_id, local_id)",
              "name": "uix_complaints_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_complaints BEFORE INSERT OR UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_complaints",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_complaints AFTER INSERT OR DELETE OR UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_complaints",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_complaints_fill_account_id BEFORE INSERT ON complaints FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_complaints_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_complaints_fill_account_id BEFORE INSERT ON complaints FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_complaints_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_complaints_set_updated_at BEFORE INSERT OR UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_complaints_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_complaints_touch_updated_at BEFORE INSERT OR UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_complaints_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_complaints_updated_at BEFORE UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_complaints_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON complaints FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON complaints FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "complaints_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "complaints_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "consumption_types",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX consumption_types_account_device_local_idx ON public.consumption_types USING btree (account_id, device_id, local_id)",
              "name": "consumption_types_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX consumption_types_pkey ON public.consumption_types USING btree (id)",
              "name": "consumption_types_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX consumption_types_uix_acc_dev_local ON public.consumption_types USING btree (account_id, device_id, local_id)",
              "name": "consumption_types_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX consumption_types_uix_account_device_local ON public.consumption_types USING btree (account_id, device_id, local_id)",
              "name": "consumption_types_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_consumption_types_account ON public.consumption_types USING btree (account_id)",
              "name": "idx_consumption_types_account"
            },
            {
              "def": "CREATE INDEX idx_consumption_types_account_local ON public.consumption_types USING btree (account_id, local_id)",
              "name": "idx_consumption_types_account_local"
            },
            {
              "def": "CREATE INDEX ix_consumption_types_acc_updated_at ON public.consumption_types USING btree (account_id, updated_at DESC)",
              "name": "ix_consumption_types_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uidx_consumption_types_type_per_account ON public.consumption_types USING btree (account_id, lower(btrim(type)))",
              "name": "uidx_consumption_types_type_per_account"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_consumption_types_acc_dev_local ON public.consumption_types USING btree (account_id, device_id, local_id) WHERE ((account_id IS NOT NULL) AND (local_id IS NOT NULL) AND (device_id <> ''::text))",
              "name": "uix_consumption_types_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_consumption_types BEFORE INSERT OR UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_consumption_types",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_consumption_types AFTER INSERT OR DELETE OR UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_consumption_types",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_consumption_types_fill_account_id BEFORE INSERT ON consumption_types FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_consumption_types_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumption_types_fill_account_id BEFORE INSERT ON consumption_types FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_consumption_types_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumption_types_set_updated_at BEFORE INSERT OR UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_consumption_types_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumption_types_touch_updated_at BEFORE INSERT OR UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_consumption_types_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumption_types_updated_at BEFORE UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_consumption_types_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON consumption_types FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON consumption_types FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "consumption_types_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "consumption_types_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "consumptions",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "patient_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "item_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "quantity",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "date",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "amount",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "note",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX consumptions_acc_upd_idx ON public.consumptions USING btree (account_id, updated_at DESC)",
              "name": "consumptions_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX consumptions_account_device_local_idx ON public.consumptions USING btree (account_id, device_id, local_id)",
              "name": "consumptions_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX consumptions_pkey ON public.consumptions USING btree (id)",
              "name": "consumptions_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX consumptions_uix_acc_dev_local ON public.consumptions USING btree (account_id, device_id, local_id)",
              "name": "consumptions_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX consumptions_uix_account_device_local ON public.consumptions USING btree (account_id, device_id, local_id)",
              "name": "consumptions_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_consumptions_account ON public.consumptions USING btree (account_id)",
              "name": "idx_consumptions_account"
            },
            {
              "def": "CREATE INDEX idx_consumptions_account_date ON public.consumptions USING btree (account_id, date)",
              "name": "idx_consumptions_account_date"
            },
            {
              "def": "CREATE INDEX idx_consumptions_account_item_id ON public.consumptions USING btree (account_id, item_id)",
              "name": "idx_consumptions_account_item_id"
            },
            {
              "def": "CREATE INDEX idx_consumptions_account_local ON public.consumptions USING btree (account_id, local_id)",
              "name": "idx_consumptions_account_local"
            },
            {
              "def": "CREATE INDEX idx_consumptions_account_patient_id ON public.consumptions USING btree (account_id, patient_id)",
              "name": "idx_consumptions_account_patient_id"
            },
            {
              "def": "CREATE INDEX idx_consumptions_date ON public.consumptions USING btree (date)",
              "name": "idx_consumptions_date"
            },
            {
              "def": "CREATE INDEX idx_consumptions_item_id ON public.consumptions USING btree (item_id)",
              "name": "idx_consumptions_item_id"
            },
            {
              "def": "CREATE INDEX idx_consumptions_patient_id ON public.consumptions USING btree (patient_id)",
              "name": "idx_consumptions_patient_id"
            },
            {
              "def": "CREATE INDEX ix_consumptions_acc_updated_at ON public.consumptions USING btree (account_id, updated_at DESC)",
              "name": "ix_consumptions_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_consumptions_acc_dev_local ON public.consumptions USING btree (account_id, device_id, local_id)",
              "name": "uix_consumptions_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_consumptions BEFORE INSERT OR UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_consumptions",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_consumptions AFTER INSERT OR DELETE OR UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_consumptions",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_consumptions_fill_account_id BEFORE INSERT ON consumptions FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_consumptions_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumptions_fill_account_id BEFORE INSERT ON consumptions FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_consumptions_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumptions_set_updated_at BEFORE INSERT OR UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_consumptions_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumptions_touch_updated_at BEFORE INSERT OR UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_consumptions_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_consumptions_updated_at BEFORE UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_consumptions_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON consumptions FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON consumptions FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "consumptions_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "consumptions_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "doctors",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "employee_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "specialization",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_number",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "start_time",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "end_time",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "print_counter",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX doctors_acc_upd_idx ON public.doctors USING btree (account_id, updated_at DESC)",
              "name": "doctors_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX doctors_account_device_local_idx ON public.doctors USING btree (account_id, device_id, local_id)",
              "name": "doctors_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX doctors_pkey ON public.doctors USING btree (id)",
              "name": "doctors_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX doctors_uix_acc_dev_local ON public.doctors USING btree (account_id, device_id, local_id)",
              "name": "doctors_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX doctors_uix_account_device_local ON public.doctors USING btree (account_id, device_id, local_id)",
              "name": "doctors_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_doctors_account ON public.doctors USING btree (account_id)",
              "name": "idx_doctors_account"
            },
            {
              "def": "CREATE INDEX idx_doctors_account_employee_id ON public.doctors USING btree (account_id, employee_id)",
              "name": "idx_doctors_account_employee_id"
            },
            {
              "def": "CREATE INDEX idx_doctors_account_local ON public.doctors USING btree (account_id, local_id)",
              "name": "idx_doctors_account_local"
            },
            {
              "def": "CREATE INDEX ix_doctors_acc_updated_at ON public.doctors USING btree (account_id, updated_at DESC)",
              "name": "ix_doctors_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_doctors_acc_dev_local ON public.doctors USING btree (account_id, device_id, local_id)",
              "name": "uix_doctors_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_doctors BEFORE INSERT OR UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_doctors",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_doctors AFTER INSERT OR DELETE OR UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_doctors",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_doctors_fill_account_id BEFORE INSERT ON doctors FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_doctors_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_doctors_fill_account_id BEFORE INSERT ON doctors FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_doctors_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_doctors_set_updated_at BEFORE INSERT OR UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_doctors_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_doctors_touch_updated_at BEFORE INSERT OR UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_doctors_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_doctors_updated_at BEFORE UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_doctors_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON doctors FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON doctors FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "doctors_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "doctors_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "drugs",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "notes",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX drugs_acc_upd_idx ON public.drugs USING btree (account_id, updated_at DESC)",
              "name": "drugs_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX drugs_account_device_local_idx ON public.drugs USING btree (account_id, device_id, local_id)",
              "name": "drugs_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX drugs_pkey ON public.drugs USING btree (id)",
              "name": "drugs_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX drugs_uix_acc_dev_local ON public.drugs USING btree (account_id, device_id, local_id)",
              "name": "drugs_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX drugs_uix_account_device_local ON public.drugs USING btree (account_id, device_id, local_id)",
              "name": "drugs_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX drugs_unique_name_per_account ON public.drugs USING btree (account_id, lower(name))",
              "name": "drugs_unique_name_per_account"
            },
            {
              "def": "CREATE INDEX idx_drugs_account ON public.drugs USING btree (account_id)",
              "name": "idx_drugs_account"
            },
            {
              "def": "CREATE INDEX idx_drugs_account_created_at ON public.drugs USING btree (account_id, created_at)",
              "name": "idx_drugs_account_created_at"
            },
            {
              "def": "CREATE INDEX idx_drugs_account_local ON public.drugs USING btree (account_id, local_id)",
              "name": "idx_drugs_account_local"
            },
            {
              "def": "CREATE INDEX ix_drugs_acc_updated_at ON public.drugs USING btree (account_id, updated_at DESC)",
              "name": "ix_drugs_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uidx_drugs_name_per_account ON public.drugs USING btree (account_id, lower(name))",
              "name": "uidx_drugs_name_per_account"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_drugs_acc_dev_local ON public.drugs USING btree (account_id, device_id, local_id)",
              "name": "uix_drugs_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_drugs BEFORE INSERT OR UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_drugs",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_drugs AFTER INSERT OR DELETE OR UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_drugs",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_drugs_fill_account_id BEFORE INSERT ON drugs FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_drugs_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_drugs_fill_account_id BEFORE INSERT ON drugs FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_drugs_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_drugs_set_updated_at BEFORE INSERT OR UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_drugs_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_drugs_touch_updated_at BEFORE INSERT OR UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_drugs_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_drugs_updated_at BEFORE UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_drugs_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON drugs FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON drugs FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "drugs_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "drugs_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "employees",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "identity_number",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_number",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "job_title",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "address",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "marital_status",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "basic_salary",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "final_salary",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_doctor",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX employees_acc_upd_idx ON public.employees USING btree (account_id, updated_at DESC)",
              "name": "employees_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_account_device_local_idx ON public.employees USING btree (account_id, device_id, local_id)",
              "name": "employees_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_pkey ON public.employees USING btree (id)",
              "name": "employees_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_uix_acc_dev_local ON public.employees USING btree (account_id, device_id, local_id)",
              "name": "employees_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_uix_account_device_local ON public.employees USING btree (account_id, device_id, local_id)",
              "name": "employees_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_employees_account ON public.employees USING btree (account_id)",
              "name": "idx_employees_account"
            },
            {
              "def": "CREATE INDEX idx_employees_account_local ON public.employees USING btree (account_id, local_id)",
              "name": "idx_employees_account_local"
            },
            {
              "def": "CREATE INDEX ix_employees_acc_updated_at ON public.employees USING btree (account_id, updated_at DESC)",
              "name": "ix_employees_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_employees_acc_dev_local ON public.employees USING btree (account_id, device_id, local_id)",
              "name": "uix_employees_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_employees BEFORE INSERT OR UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_employees",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_employees AFTER INSERT OR DELETE OR UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_employees",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_employees_fill_account_id BEFORE INSERT ON employees FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_employees_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_fill_account_id BEFORE INSERT ON employees FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_employees_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_set_updated_at BEFORE INSERT OR UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_employees_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_touch_updated_at BEFORE INSERT OR UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_employees_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_updated_at BEFORE UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_employees_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON employees FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "employees_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "employees_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "employees_discounts",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "employee_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "discount_date_time",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "amount",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "notes",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX employees_discounts_acc_upd_idx ON public.employees_discounts USING btree (account_id, updated_at DESC)",
              "name": "employees_discounts_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_discounts_account_device_local_idx ON public.employees_discounts USING btree (account_id, device_id, local_id)",
              "name": "employees_discounts_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_discounts_pkey ON public.employees_discounts USING btree (id)",
              "name": "employees_discounts_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_discounts_uix_acc_dev_local ON public.employees_discounts USING btree (account_id, device_id, local_id)",
              "name": "employees_discounts_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_discounts_uix_account_device_local ON public.employees_discounts USING btree (account_id, device_id, local_id)",
              "name": "employees_discounts_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_employees_discounts_account ON public.employees_discounts USING btree (account_id)",
              "name": "idx_employees_discounts_account"
            },
            {
              "def": "CREATE INDEX idx_employees_discounts_account_employee_id ON public.employees_discounts USING btree (account_id, employee_id)",
              "name": "idx_employees_discounts_account_employee_id"
            },
            {
              "def": "CREATE INDEX idx_employees_discounts_account_local ON public.employees_discounts USING btree (account_id, local_id)",
              "name": "idx_employees_discounts_account_local"
            },
            {
              "def": "CREATE INDEX ix_employees_discounts_acc_updated_at ON public.employees_discounts USING btree (account_id, updated_at DESC)",
              "name": "ix_employees_discounts_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_employees_discounts_acc_dev_local ON public.employees_discounts USING btree (account_id, device_id, local_id)",
              "name": "uix_employees_discounts_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_employees_discounts BEFORE INSERT OR UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_employees_discounts",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_employees_discounts AFTER INSERT OR DELETE OR UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_employees_discounts",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_employees_discounts_fill_account_id BEFORE INSERT ON employees_discounts FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_employees_discounts_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_discounts_fill_account_id BEFORE INSERT ON employees_discounts FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_employees_discounts_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_discounts_set_updated_at BEFORE INSERT OR UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_employees_discounts_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_discounts_touch_updated_at BEFORE INSERT OR UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_employees_discounts_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_discounts_updated_at BEFORE UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_employees_discounts_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON employees_discounts FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON employees_discounts FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "employees_discounts_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "employees_discounts_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "employees_loans",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "employee_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "loan_date_time",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "final_salary",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "ratio_sum",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "loan_amount",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "leftover",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX employees_loans_acc_upd_idx ON public.employees_loans USING btree (account_id, updated_at DESC)",
              "name": "employees_loans_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_loans_account_device_local_idx ON public.employees_loans USING btree (account_id, device_id, local_id)",
              "name": "employees_loans_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_loans_pkey ON public.employees_loans USING btree (id)",
              "name": "employees_loans_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_loans_uix_acc_dev_local ON public.employees_loans USING btree (account_id, device_id, local_id)",
              "name": "employees_loans_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_loans_uix_account_device_local ON public.employees_loans USING btree (account_id, device_id, local_id)",
              "name": "employees_loans_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_employees_loans_account ON public.employees_loans USING btree (account_id)",
              "name": "idx_employees_loans_account"
            },
            {
              "def": "CREATE INDEX idx_employees_loans_account_employee_id ON public.employees_loans USING btree (account_id, employee_id)",
              "name": "idx_employees_loans_account_employee_id"
            },
            {
              "def": "CREATE INDEX idx_employees_loans_account_local ON public.employees_loans USING btree (account_id, local_id)",
              "name": "idx_employees_loans_account_local"
            },
            {
              "def": "CREATE INDEX ix_employees_loans_acc_updated_at ON public.employees_loans USING btree (account_id, updated_at DESC)",
              "name": "ix_employees_loans_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_employees_loans_acc_dev_local ON public.employees_loans USING btree (account_id, device_id, local_id)",
              "name": "uix_employees_loans_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_employees_loans BEFORE INSERT OR UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_employees_loans",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_employees_loans AFTER INSERT OR DELETE OR UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_employees_loans",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_employees_loans_fill_account_id BEFORE INSERT ON employees_loans FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_employees_loans_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_loans_fill_account_id BEFORE INSERT ON employees_loans FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_employees_loans_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_loans_set_updated_at BEFORE INSERT OR UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_employees_loans_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_loans_touch_updated_at BEFORE INSERT OR UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_employees_loans_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_loans_updated_at BEFORE UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_employees_loans_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON employees_loans FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON employees_loans FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "employees_loans_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "employees_loans_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "employees_salaries",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "employee_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "year",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "month",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "final_salary",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "ratio_sum",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "total_loans",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "net_pay",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_paid",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "payment_date",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX employees_salaries_acc_upd_idx ON public.employees_salaries USING btree (account_id, updated_at DESC)",
              "name": "employees_salaries_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_salaries_account_device_local_idx ON public.employees_salaries USING btree (account_id, device_id, local_id)",
              "name": "employees_salaries_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_salaries_pkey ON public.employees_salaries USING btree (id)",
              "name": "employees_salaries_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_salaries_uix_acc_dev_local ON public.employees_salaries USING btree (account_id, device_id, local_id)",
              "name": "employees_salaries_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX employees_salaries_uix_account_device_local ON public.employees_salaries USING btree (account_id, device_id, local_id)",
              "name": "employees_salaries_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_employees_salaries_account ON public.employees_salaries USING btree (account_id)",
              "name": "idx_employees_salaries_account"
            },
            {
              "def": "CREATE INDEX idx_employees_salaries_account_employee_id ON public.employees_salaries USING btree (account_id, employee_id)",
              "name": "idx_employees_salaries_account_employee_id"
            },
            {
              "def": "CREATE INDEX idx_employees_salaries_account_local ON public.employees_salaries USING btree (account_id, local_id)",
              "name": "idx_employees_salaries_account_local"
            },
            {
              "def": "CREATE INDEX ix_employees_salaries_acc_updated_at ON public.employees_salaries USING btree (account_id, updated_at DESC)",
              "name": "ix_employees_salaries_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_employees_salaries_acc_dev_local ON public.employees_salaries USING btree (account_id, device_id, local_id)",
              "name": "uix_employees_salaries_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_employees_salaries BEFORE INSERT OR UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_employees_salaries",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_employees_salaries AFTER INSERT OR DELETE OR UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_employees_salaries",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_employees_salaries_fill_account_id BEFORE INSERT ON employees_salaries FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_employees_salaries_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_salaries_fill_account_id BEFORE INSERT ON employees_salaries FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_employees_salaries_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_salaries_set_updated_at BEFORE INSERT OR UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_employees_salaries_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_salaries_touch_updated_at BEFORE INSERT OR UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_employees_salaries_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_employees_salaries_updated_at BEFORE UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_employees_salaries_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON employees_salaries FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON employees_salaries FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "employees_salaries_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "employees_salaries_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "financial_logs",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "transaction_type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "operation",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "amount",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "employee_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "description",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "modification_details",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "timestamp",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX financial_logs_acc_upd_idx ON public.financial_logs USING btree (account_id, updated_at DESC)",
              "name": "financial_logs_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX financial_logs_account_device_local_idx ON public.financial_logs USING btree (account_id, device_id, local_id)",
              "name": "financial_logs_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX financial_logs_pkey ON public.financial_logs USING btree (id)",
              "name": "financial_logs_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX financial_logs_uix_acc_dev_local ON public.financial_logs USING btree (account_id, device_id, local_id)",
              "name": "financial_logs_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX financial_logs_uix_account_device_local ON public.financial_logs USING btree (account_id, device_id, local_id)",
              "name": "financial_logs_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX idx_financial_logs_account ON public.financial_logs USING btree (account_id)",
              "name": "idx_financial_logs_account"
            },
            {
              "def": "CREATE INDEX idx_financial_logs_account_local ON public.financial_logs USING btree (account_id, local_id)",
              "name": "idx_financial_logs_account_local"
            },
            {
              "def": "CREATE INDEX idx_financial_logs_account_timestamp ON public.financial_logs USING btree (account_id, \"timestamp\")",
              "name": "idx_financial_logs_account_timestamp"
            },
            {
              "def": "CREATE INDEX ix_financial_logs_acc_updated_at ON public.financial_logs USING btree (account_id, updated_at DESC)",
              "name": "ix_financial_logs_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_financial_logs_acc_dev_local ON public.financial_logs USING btree (account_id, device_id, local_id)",
              "name": "uix_financial_logs_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_financial_logs BEFORE INSERT OR UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_financial_logs",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_financial_logs AFTER INSERT OR DELETE OR UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_financial_logs",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_financial_logs_fill_account_id BEFORE INSERT ON financial_logs FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_financial_logs_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON financial_logs FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_financial_logs_fill_account_id BEFORE INSERT ON financial_logs FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_financial_logs_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_financial_logs_set_updated_at BEFORE INSERT OR UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_financial_logs_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_financial_logs_touch_updated_at BEFORE INSERT OR UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_financial_logs_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_financial_logs_updated_at BEFORE UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_financial_logs_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON financial_logs FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "financial_logs_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "financial_logs_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "item_types",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_item_types_account ON public.item_types USING btree (account_id)",
              "name": "idx_item_types_account"
            },
            {
              "def": "CREATE INDEX idx_item_types_account_local ON public.item_types USING btree (account_id, local_id)",
              "name": "idx_item_types_account_local"
            },
            {
              "def": "CREATE INDEX item_types_acc_upd_idx ON public.item_types USING btree (account_id, updated_at DESC)",
              "name": "item_types_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX item_types_account_device_local_idx ON public.item_types USING btree (account_id, device_id, local_id)",
              "name": "item_types_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX item_types_pkey ON public.item_types USING btree (id)",
              "name": "item_types_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX item_types_uix_acc_dev_local ON public.item_types USING btree (account_id, device_id, local_id)",
              "name": "item_types_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX item_types_uix_account_device_local ON public.item_types USING btree (account_id, device_id, local_id)",
              "name": "item_types_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX ix_item_types_acc_updated_at ON public.item_types USING btree (account_id, updated_at DESC)",
              "name": "ix_item_types_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uidx_item_types_name_per_account ON public.item_types USING btree (account_id, lower(btrim(name)))",
              "name": "uidx_item_types_name_per_account"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_item_types_acc_dev_local ON public.item_types USING btree (account_id, device_id, local_id)",
              "name": "uix_item_types_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_item_types BEFORE INSERT OR UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_item_types",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_item_types AFTER INSERT OR DELETE OR UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_item_types",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_item_types_fill_account_id BEFORE INSERT ON item_types FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_item_types_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON item_types FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_item_types_fill_account_id BEFORE INSERT ON item_types FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_item_types_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_item_types_set_updated_at BEFORE INSERT OR UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_item_types_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_item_types_touch_updated_at BEFORE INSERT OR UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_item_types_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_item_types_updated_at BEFORE UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_item_types_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON item_types FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "item_types_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "item_types_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "items",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "type_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "stock",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "price",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_items_account ON public.items USING btree (account_id)",
              "name": "idx_items_account"
            },
            {
              "def": "CREATE INDEX idx_items_account_created_at ON public.items USING btree (account_id, created_at)",
              "name": "idx_items_account_created_at"
            },
            {
              "def": "CREATE INDEX idx_items_account_local ON public.items USING btree (account_id, local_id)",
              "name": "idx_items_account_local"
            },
            {
              "def": "CREATE INDEX idx_items_account_type_id ON public.items USING btree (account_id, type_id)",
              "name": "idx_items_account_type_id"
            },
            {
              "def": "CREATE INDEX idx_items_name ON public.items USING btree (lower(name))",
              "name": "idx_items_name"
            },
            {
              "def": "CREATE INDEX items_acc_upd_idx ON public.items USING btree (account_id, updated_at DESC)",
              "name": "items_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX items_account_device_local_idx ON public.items USING btree (account_id, device_id, local_id)",
              "name": "items_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX items_pkey ON public.items USING btree (id)",
              "name": "items_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX items_type_name ON public.items USING btree (account_id, type_id, name)",
              "name": "items_type_name"
            },
            {
              "def": "CREATE UNIQUE INDEX items_uix_acc_dev_local ON public.items USING btree (account_id, device_id, local_id)",
              "name": "items_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX items_uix_account_device_local ON public.items USING btree (account_id, device_id, local_id)",
              "name": "items_uix_account_device_local"
            },
            {
              "def": "CREATE INDEX ix_items_acc_updated_at ON public.items USING btree (account_id, updated_at DESC)",
              "name": "ix_items_acc_updated_at"
            },
            {
              "def": "CREATE UNIQUE INDEX uidx_items_type_name_per_account ON public.items USING btree (account_id, type_id, lower(name))",
              "name": "uidx_items_type_name_per_account"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_items_acc_dev_local ON public.items USING btree (account_id, device_id, local_id)",
              "name": "uix_items_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_items BEFORE INSERT OR UPDATE ON items FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_items",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON items FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_items",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_items_fill_account_id BEFORE INSERT ON items FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_items_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON items FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_items_fill_account_id BEFORE INSERT ON items FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_items_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_items_set_updated_at BEFORE INSERT OR UPDATE ON items FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_items_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_items_touch_updated_at BEFORE INSERT OR UPDATE ON items FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_items_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_items_updated_at BEFORE UPDATE ON items FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_items_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON items FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "items_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "items_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "medical_services",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "cost",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "service_type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_medical_services_account ON public.medical_services USING btree (account_id)",
              "name": "idx_medical_services_account"
            },
            {
              "def": "CREATE INDEX idx_medical_services_account_local ON public.medical_services USING btree (account_id, local_id)",
              "name": "idx_medical_services_account_local"
            },
            {
              "def": "CREATE INDEX ix_medical_services_acc_updated_at ON public.medical_services USING btree (account_id, updated_at DESC)",
              "name": "ix_medical_services_acc_updated_at"
            },
            {
              "def": "CREATE INDEX medical_services_acc_upd_idx ON public.medical_services USING btree (account_id, updated_at DESC)",
              "name": "medical_services_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX medical_services_account_device_local_idx ON public.medical_services USING btree (account_id, device_id, local_id)",
              "name": "medical_services_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX medical_services_pkey ON public.medical_services USING btree (id)",
              "name": "medical_services_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX medical_services_uix_acc_dev_local ON public.medical_services USING btree (account_id, device_id, local_id)",
              "name": "medical_services_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX medical_services_uix_account_device_local ON public.medical_services USING btree (account_id, device_id, local_id)",
              "name": "medical_services_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_medical_services_acc_dev_local ON public.medical_services USING btree (account_id, device_id, local_id)",
              "name": "uix_medical_services_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_medical_services BEFORE INSERT OR UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_medical_services",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_medical_services AFTER INSERT OR DELETE OR UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_medical_services",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_medical_services_fill_account_id BEFORE INSERT ON medical_services FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_medical_services_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON medical_services FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_medical_services_fill_account_id BEFORE INSERT ON medical_services FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_medical_services_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_medical_services_set_updated_at BEFORE INSERT OR UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_medical_services_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_medical_services_touch_updated_at BEFORE INSERT OR UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_medical_services_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_medical_services_updated_at BEFORE UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_medical_services_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON medical_services FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "medical_services_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "medical_services_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "memberships",
          "schema": "public",
          "columns": [
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "role",
              "default": "'member'::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_memberships_user ON public.memberships USING btree (user_id)",
              "name": "idx_memberships_user"
            },
            {
              "def": "CREATE UNIQUE INDEX memberships_pkey ON public.memberships USING btree (account_id, user_id)",
              "name": "memberships_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "memberships_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (account_id, user_id)"
            },
            {
              "name": "memberships_user_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "patient_services",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "patient_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "service_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "service_name",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "service_cost",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_patient_services_account ON public.patient_services USING btree (account_id)",
              "name": "idx_patient_services_account"
            },
            {
              "def": "CREATE INDEX idx_patient_services_account_local ON public.patient_services USING btree (account_id, local_id)",
              "name": "idx_patient_services_account_local"
            },
            {
              "def": "CREATE INDEX idx_patient_services_account_service_id ON public.patient_services USING btree (account_id, service_id)",
              "name": "idx_patient_services_account_service_id"
            },
            {
              "def": "CREATE INDEX idx_patient_services_patient ON public.patient_services USING btree (patient_id)",
              "name": "idx_patient_services_patient"
            },
            {
              "def": "CREATE INDEX idx_patient_services_service ON public.patient_services USING btree (service_id)",
              "name": "idx_patient_services_service"
            },
            {
              "def": "CREATE INDEX ix_patient_services_acc_updated_at ON public.patient_services USING btree (account_id, updated_at DESC)",
              "name": "ix_patient_services_acc_updated_at"
            },
            {
              "def": "CREATE INDEX patient_services_acc_upd_idx ON public.patient_services USING btree (account_id, updated_at DESC)",
              "name": "patient_services_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX patient_services_account_device_local_idx ON public.patient_services USING btree (account_id, device_id, local_id)",
              "name": "patient_services_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX patient_services_acct_dev_local_uniq ON public.patient_services USING btree (account_id, device_id, local_id)",
              "name": "patient_services_acct_dev_local_uniq"
            },
            {
              "def": "CREATE INDEX patient_services_patient_idx ON public.patient_services USING btree (account_id, patient_id)",
              "name": "patient_services_patient_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX patient_services_pkey ON public.patient_services USING btree (id)",
              "name": "patient_services_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX patient_services_uix_acc_dev_local ON public.patient_services USING btree (account_id, device_id, local_id)",
              "name": "patient_services_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX patient_services_uix_account_device_local ON public.patient_services USING btree (account_id, device_id, local_id)",
              "name": "patient_services_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX patient_services_uniq_acc_local ON public.patient_services USING btree (account_id, local_id)",
              "name": "patient_services_uniq_acc_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_patient_services_acc_dev_local ON public.patient_services USING btree (account_id, device_id, local_id)",
              "name": "uix_patient_services_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_patient_services BEFORE INSERT OR UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_patient_services",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_patient_services AFTER INSERT OR DELETE OR UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_patient_services",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_patient_services_fill_account_id BEFORE INSERT ON patient_services FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_patient_services_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON patient_services FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patient_services_fill_account_id BEFORE INSERT ON patient_services FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_patient_services_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patient_services_set_updated_at BEFORE INSERT OR UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_patient_services_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patient_services_touch_updated_at BEFORE INSERT OR UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_patient_services_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patient_services_updated_at BEFORE UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_patient_services_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON patient_services FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "patient_services_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "patient_services_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "patients",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "age",
              "default": null,
              "identity": "NO",
              "udt_name": "int2",
              "collation": null,
              "data_type": "smallint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "diagnosis",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_number",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "register_date",
              "default": null,
              "identity": "NO",
              "udt_name": "date",
              "collation": null,
              "data_type": "date",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "paid_amount",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "remaining",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "health_status",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "notes",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "preferences",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor_specialization",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "service_type",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "service_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "service_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "service_cost",
              "default": null,
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor_share",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "doctor_input",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "tower_share",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "department_share",
              "default": "0",
              "identity": "NO",
              "udt_name": "numeric",
              "collation": null,
              "data_type": "numeric",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "is_deleted",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_patients_account ON public.patients USING btree (account_id)",
              "name": "idx_patients_account"
            },
            {
              "def": "CREATE INDEX idx_patients_account_doctor_id ON public.patients USING btree (account_id, doctor_id)",
              "name": "idx_patients_account_doctor_id"
            },
            {
              "def": "CREATE INDEX idx_patients_account_local ON public.patients USING btree (account_id, local_id)",
              "name": "idx_patients_account_local"
            },
            {
              "def": "CREATE INDEX idx_patients_account_service_id ON public.patients USING btree (account_id, service_id)",
              "name": "idx_patients_account_service_id"
            },
            {
              "def": "CREATE INDEX idx_patients_doctor_id ON public.patients USING btree (doctor_id)",
              "name": "idx_patients_doctor_id"
            },
            {
              "def": "CREATE INDEX idx_patients_register_date ON public.patients USING btree (register_date)",
              "name": "idx_patients_register_date"
            },
            {
              "def": "CREATE INDEX ix_patients_acc_updated_at ON public.patients USING btree (account_id, updated_at DESC)",
              "name": "ix_patients_acc_updated_at"
            },
            {
              "def": "CREATE INDEX patients_acc_upd_idx ON public.patients USING btree (account_id, updated_at DESC)",
              "name": "patients_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX patients_account_device_local_idx ON public.patients USING btree (account_id, device_id, local_id)",
              "name": "patients_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX patients_pkey ON public.patients USING btree (id)",
              "name": "patients_pkey"
            },
            {
              "def": "CREATE INDEX patients_regdate_idx ON public.patients USING btree (register_date)",
              "name": "patients_regdate_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX patients_sync_unique ON public.patients USING btree (account_id, device_id, local_id)",
              "name": "patients_sync_unique"
            },
            {
              "def": "CREATE UNIQUE INDEX patients_uix_acc_dev_local ON public.patients USING btree (account_id, device_id, local_id)",
              "name": "patients_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX patients_uix_account_device_local ON public.patients USING btree (account_id, device_id, local_id)",
              "name": "patients_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_patients_acc_dev_local ON public.patients USING btree (account_id, device_id, local_id)",
              "name": "uix_patients_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX ux_patients_account_local ON public.patients USING btree (account_id, local_id)",
              "name": "ux_patients_account_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_patients BEFORE INSERT OR UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_patients",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_patients AFTER INSERT OR DELETE OR UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_patients",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_patients_fill_account_id BEFORE INSERT ON patients FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_patients_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON patients FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patients_fill_account_id BEFORE INSERT ON patients FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_patients_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patients_set_updated_at BEFORE INSERT OR UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_patients_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patients_touch_updated_at BEFORE INSERT OR UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_patients_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_patients_updated_at BEFORE UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_patients_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON patients FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "patients_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "patients_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "patients_sync_unique",
              "type": "u",
              "definition": "UNIQUE (account_id, device_id, local_id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "prescription_items",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "prescription_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "drug_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "days",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "times_per_day",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_prescription_items_account ON public.prescription_items USING btree (account_id)",
              "name": "idx_prescription_items_account"
            },
            {
              "def": "CREATE INDEX idx_prescription_items_account_drug_id ON public.prescription_items USING btree (account_id, drug_id)",
              "name": "idx_prescription_items_account_drug_id"
            },
            {
              "def": "CREATE INDEX idx_prescription_items_account_local ON public.prescription_items USING btree (account_id, local_id)",
              "name": "idx_prescription_items_account_local"
            },
            {
              "def": "CREATE INDEX idx_prescription_items_account_prescription_id ON public.prescription_items USING btree (account_id, prescription_id)",
              "name": "idx_prescription_items_account_prescription_id"
            },
            {
              "def": "CREATE INDEX ix_prescription_items_acc_updated_at ON public.prescription_items USING btree (account_id, updated_at DESC)",
              "name": "ix_prescription_items_acc_updated_at"
            },
            {
              "def": "CREATE INDEX prescription_items_acc_upd_idx ON public.prescription_items USING btree (account_id, updated_at DESC)",
              "name": "prescription_items_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX prescription_items_account_device_local_idx ON public.prescription_items USING btree (account_id, device_id, local_id)",
              "name": "prescription_items_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX prescription_items_pkey ON public.prescription_items USING btree (id)",
              "name": "prescription_items_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX prescription_items_uix_acc_dev_local ON public.prescription_items USING btree (account_id, device_id, local_id)",
              "name": "prescription_items_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX prescription_items_uix_account_device_local ON public.prescription_items USING btree (account_id, device_id, local_id)",
              "name": "prescription_items_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_prescription_items_acc_dev_local ON public.prescription_items USING btree (account_id, device_id, local_id)",
              "name": "uix_prescription_items_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_prescription_items BEFORE INSERT OR UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_prescription_items",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_prescription_items AFTER INSERT OR DELETE OR UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_prescription_items",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_prescription_items_fill_account_id BEFORE INSERT ON prescription_items FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_prescription_items_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON prescription_items FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescription_items_fill_account_id BEFORE INSERT ON prescription_items FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_prescription_items_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescription_items_set_updated_at BEFORE INSERT OR UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_prescription_items_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescription_items_touch_updated_at BEFORE INSERT OR UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_prescription_items_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescription_items_updated_at BEFORE UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_prescription_items_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON prescription_items FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "prescription_items_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "prescription_items_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "prescriptions",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "patient_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "record_date",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_prescriptions_account ON public.prescriptions USING btree (account_id)",
              "name": "idx_prescriptions_account"
            },
            {
              "def": "CREATE INDEX idx_prescriptions_account_created_at ON public.prescriptions USING btree (account_id, created_at)",
              "name": "idx_prescriptions_account_created_at"
            },
            {
              "def": "CREATE INDEX idx_prescriptions_account_doctor_id ON public.prescriptions USING btree (account_id, doctor_id)",
              "name": "idx_prescriptions_account_doctor_id"
            },
            {
              "def": "CREATE INDEX idx_prescriptions_account_local ON public.prescriptions USING btree (account_id, local_id)",
              "name": "idx_prescriptions_account_local"
            },
            {
              "def": "CREATE INDEX idx_prescriptions_account_patient_id ON public.prescriptions USING btree (account_id, patient_id)",
              "name": "idx_prescriptions_account_patient_id"
            },
            {
              "def": "CREATE INDEX ix_prescriptions_acc_updated_at ON public.prescriptions USING btree (account_id, updated_at DESC)",
              "name": "ix_prescriptions_acc_updated_at"
            },
            {
              "def": "CREATE INDEX prescriptions_acc_upd_idx ON public.prescriptions USING btree (account_id, updated_at DESC)",
              "name": "prescriptions_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX prescriptions_account_device_local_idx ON public.prescriptions USING btree (account_id, device_id, local_id)",
              "name": "prescriptions_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX prescriptions_pkey ON public.prescriptions USING btree (id)",
              "name": "prescriptions_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX prescriptions_uix_acc_dev_local ON public.prescriptions USING btree (account_id, device_id, local_id)",
              "name": "prescriptions_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX prescriptions_uix_account_device_local ON public.prescriptions USING btree (account_id, device_id, local_id)",
              "name": "prescriptions_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_prescriptions_acc_dev_local ON public.prescriptions USING btree (account_id, device_id, local_id)",
              "name": "uix_prescriptions_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_prescriptions BEFORE INSERT OR UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_prescriptions",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_prescriptions AFTER INSERT OR DELETE OR UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_prescriptions",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_prescriptions_fill_account_id BEFORE INSERT ON prescriptions FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_prescriptions_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON prescriptions FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescriptions_fill_account_id BEFORE INSERT ON prescriptions FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_prescriptions_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescriptions_set_updated_at BEFORE INSERT OR UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_prescriptions_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescriptions_touch_updated_at BEFORE INSERT OR UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_prescriptions_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_prescriptions_updated_at BEFORE UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_prescriptions_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON prescriptions FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "prescriptions_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "prescriptions_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "profiles",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "role",
              "default": "'employee'::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "disabled",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_profiles_account_id ON public.profiles USING btree (account_id)",
              "name": "idx_profiles_account_id"
            },
            {
              "def": "CREATE UNIQUE INDEX idx_profiles_one_owner_per_account ON public.profiles USING btree (account_id) WHERE (role = 'owner'::text)",
              "name": "idx_profiles_one_owner_per_account"
            },
            {
              "def": "CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id)",
              "name": "profiles_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX profiles_uix_account_device_local ON public.profiles USING btree (account_id, device_id, local_id)",
              "name": "profiles_uix_account_device_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER tg_audit_profiles AFTER INSERT OR DELETE OR UPDATE ON profiles FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_profiles",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_profiles_fill_account_id BEFORE INSERT ON profiles FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_profiles_fill_account_id",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "profiles_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "profiles_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "profiles_role_chk",
              "type": "c",
              "definition": "CHECK (role = ANY (ARRAY['owner'::text, 'employee'::text, 'superadmin'::text]))"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "purchases",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "date",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "item_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "quantity",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "total",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_purchases_account ON public.purchases USING btree (account_id)",
              "name": "idx_purchases_account"
            },
            {
              "def": "CREATE INDEX idx_purchases_account_created_at ON public.purchases USING btree (account_id, created_at)",
              "name": "idx_purchases_account_created_at"
            },
            {
              "def": "CREATE INDEX idx_purchases_account_item_id ON public.purchases USING btree (account_id, item_id)",
              "name": "idx_purchases_account_item_id"
            },
            {
              "def": "CREATE INDEX idx_purchases_account_local ON public.purchases USING btree (account_id, local_id)",
              "name": "idx_purchases_account_local"
            },
            {
              "def": "CREATE INDEX ix_purchases_acc_updated_at ON public.purchases USING btree (account_id, updated_at DESC)",
              "name": "ix_purchases_acc_updated_at"
            },
            {
              "def": "CREATE INDEX purchases_acc_upd_idx ON public.purchases USING btree (account_id, updated_at DESC)",
              "name": "purchases_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX purchases_account_device_local_idx ON public.purchases USING btree (account_id, device_id, local_id)",
              "name": "purchases_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX purchases_pkey ON public.purchases USING btree (id)",
              "name": "purchases_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX purchases_uix_acc_dev_local ON public.purchases USING btree (account_id, device_id, local_id)",
              "name": "purchases_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX purchases_uix_account_device_local ON public.purchases USING btree (account_id, device_id, local_id)",
              "name": "purchases_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_purchases_acc_dev_local ON public.purchases USING btree (account_id, device_id, local_id)",
              "name": "uix_purchases_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_purchases BEFORE INSERT OR UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_purchases",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_purchases AFTER INSERT OR DELETE OR UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_purchases",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_purchases_fill_account_id BEFORE INSERT ON purchases FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_purchases_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON purchases FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_purchases_fill_account_id BEFORE INSERT ON purchases FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_purchases_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_purchases_fill_total BEFORE INSERT OR UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION _purchases_fill_total()",
              "name": "trg_purchases_fill_total",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_purchases_set_updated_at BEFORE INSERT OR UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_purchases_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_purchases_touch_updated_at BEFORE INSERT OR UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_purchases_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_purchases_updated_at BEFORE UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_purchases_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "purchases_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "purchases_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "returns",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "date",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "patient_name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "phone_number",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "diagnosis",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "remaining",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "age",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "notes",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_returns_account ON public.returns USING btree (account_id)",
              "name": "idx_returns_account"
            },
            {
              "def": "CREATE INDEX idx_returns_account_date ON public.returns USING btree (account_id, date)",
              "name": "idx_returns_account_date"
            },
            {
              "def": "CREATE INDEX idx_returns_account_local ON public.returns USING btree (account_id, local_id)",
              "name": "idx_returns_account_local"
            },
            {
              "def": "CREATE INDEX idx_returns_date ON public.returns USING btree (date)",
              "name": "idx_returns_date"
            },
            {
              "def": "CREATE INDEX ix_returns_acc_updated_at ON public.returns USING btree (account_id, updated_at DESC)",
              "name": "ix_returns_acc_updated_at"
            },
            {
              "def": "CREATE INDEX returns_acc_upd_idx ON public.returns USING btree (account_id, updated_at DESC)",
              "name": "returns_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX returns_account_device_local_idx ON public.returns USING btree (account_id, device_id, local_id)",
              "name": "returns_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX returns_pkey ON public.returns USING btree (id)",
              "name": "returns_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX returns_uix_acc_dev_local ON public.returns USING btree (account_id, device_id, local_id)",
              "name": "returns_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX returns_uix_account_device_local ON public.returns USING btree (account_id, device_id, local_id)",
              "name": "returns_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_returns_acc_dev_local ON public.returns USING btree (account_id, device_id, local_id)",
              "name": "uix_returns_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_returns BEFORE INSERT OR UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_returns",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_returns AFTER INSERT OR DELETE OR UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_returns",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_returns_fill_account_id BEFORE INSERT ON returns FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_returns_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON returns FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_returns_fill_account_id BEFORE INSERT ON returns FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_returns_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_returns_set_updated_at BEFORE INSERT OR UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_returns_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_returns_touch_updated_at BEFORE INSERT OR UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_returns_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_returns_updated_at BEFORE UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_returns_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON returns FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "returns_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "returns_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "service_doctor_share",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "service_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "doctor_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "share_percentage",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "tower_share_percentage",
              "default": null,
              "identity": "NO",
              "udt_name": "float8",
              "collation": null,
              "data_type": "double precision",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "is_hidden",
              "default": null,
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_service_doctor_share_account ON public.service_doctor_share USING btree (account_id)",
              "name": "idx_service_doctor_share_account"
            },
            {
              "def": "CREATE INDEX idx_service_doctor_share_account_doctor_id ON public.service_doctor_share USING btree (account_id, doctor_id)",
              "name": "idx_service_doctor_share_account_doctor_id"
            },
            {
              "def": "CREATE INDEX idx_service_doctor_share_account_local ON public.service_doctor_share USING btree (account_id, local_id)",
              "name": "idx_service_doctor_share_account_local"
            },
            {
              "def": "CREATE INDEX idx_service_doctor_share_account_service_id ON public.service_doctor_share USING btree (account_id, service_id)",
              "name": "idx_service_doctor_share_account_service_id"
            },
            {
              "def": "CREATE INDEX ix_service_doctor_share_acc_updated_at ON public.service_doctor_share USING btree (account_id, updated_at DESC)",
              "name": "ix_service_doctor_share_acc_updated_at"
            },
            {
              "def": "CREATE INDEX service_doctor_share_acc_upd_idx ON public.service_doctor_share USING btree (account_id, updated_at DESC)",
              "name": "service_doctor_share_acc_upd_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX service_doctor_share_account_device_local_idx ON public.service_doctor_share USING btree (account_id, device_id, local_id)",
              "name": "service_doctor_share_account_device_local_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX service_doctor_share_pkey ON public.service_doctor_share USING btree (id)",
              "name": "service_doctor_share_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX service_doctor_share_uix ON public.service_doctor_share USING btree (account_id, service_id, doctor_id)",
              "name": "service_doctor_share_uix"
            },
            {
              "def": "CREATE UNIQUE INDEX service_doctor_share_uix_acc_dev_local ON public.service_doctor_share USING btree (account_id, device_id, local_id)",
              "name": "service_doctor_share_uix_acc_dev_local"
            },
            {
              "def": "CREATE UNIQUE INDEX service_doctor_share_uix_account_device_local ON public.service_doctor_share USING btree (account_id, device_id, local_id)",
              "name": "service_doctor_share_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX uix_service_doctor_share_acc_dev_local ON public.service_doctor_share USING btree (account_id, device_id, local_id)",
              "name": "uix_service_doctor_share_acc_dev_local"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER _ts_service_doctor_share BEFORE INSERT OR UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION _ts_set()",
              "name": "_ts_service_doctor_share",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER set_updated_at BEFORE UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at')",
              "name": "set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_audit_service_doctor_share AFTER INSERT OR DELETE OR UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION tg__audit_log()",
              "name": "tg_audit_service_doctor_share",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER tg_service_doctor_share_fill_account_id BEFORE INSERT ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "tg_service_doctor_share_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_fill_sync_defaults BEFORE INSERT ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION fill_sync_defaults()",
              "name": "trg_fill_sync_defaults",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_service_doctor_share_fill_account_id BEFORE INSERT ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION tg_fill_account_id()",
              "name": "trg_service_doctor_share_fill_account_id",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_service_doctor_share_set_updated_at BEFORE INSERT OR UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION app.set_updated_at()",
              "name": "trg_service_doctor_share_set_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_service_doctor_share_touch_updated_at BEFORE INSERT OR UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION tg_touch_updated_at()",
              "name": "trg_service_doctor_share_touch_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_service_doctor_share_updated_at BEFORE UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION set_updated_at()",
              "name": "trg_service_doctor_share_updated_at",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER trg_touch_updated_at BEFORE UPDATE ON service_doctor_share FOR EACH ROW EXECUTE FUNCTION touch_updated_at()",
              "name": "trg_touch_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "service_doctor_share_account_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE"
            },
            {
              "name": "service_doctor_share_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "super_admins",
          "schema": "public",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "account_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "device_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "local_id",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "email",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX super_admins_email_unique ON public.super_admins USING btree (email)",
              "name": "super_admins_email_unique"
            },
            {
              "def": "CREATE UNIQUE INDEX super_admins_pkey ON public.super_admins USING btree (id)",
              "name": "super_admins_pkey"
            },
            {
              "def": "CREATE UNIQUE INDEX super_admins_uix_account_device_local ON public.super_admins USING btree (account_id, device_id, local_id)",
              "name": "super_admins_uix_account_device_local"
            },
            {
              "def": "CREATE UNIQUE INDEX super_admins_user_uid_unique ON public.super_admins USING btree (user_uid)",
              "name": "super_admins_user_uid_unique"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "super_admins_email_unique",
              "type": "u",
              "definition": "UNIQUE (email)"
            },
            {
              "name": "super_admins_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": true,
          "replica_identity": "full"
        },
        {
          "owner": "postgres",
          "table": "user_push_tokens",
          "schema": "public",
          "columns": [
            {
              "name": "user_uid",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "token",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "platform",
              "default": "'other'::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_user_push_tokens_user ON public.user_push_tokens USING btree (user_uid)",
              "name": "idx_user_push_tokens_user"
            },
            {
              "def": "CREATE UNIQUE INDEX user_push_tokens_pkey ON public.user_push_tokens USING btree (token)",
              "name": "user_push_tokens_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "user_push_tokens_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (token)"
            },
            {
              "name": "user_push_tokens_platform_check",
              "type": "c",
              "definition": "CHECK (platform = ANY (ARRAY['android'::text, 'ios'::text, 'macos'::text, 'other'::text]))"
            },
            {
              "name": "user_push_tokens_user_uid_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (user_uid) REFERENCES auth.users(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_realtime_admin",
          "table": "messages",
          "schema": "realtime",
          "columns": [
            {
              "name": "topic",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "extension",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "event",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "private",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX messages_inserted_at_topic_index ON ONLY realtime.messages USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE))",
              "name": "messages_inserted_at_topic_index"
            },
            {
              "def": "CREATE UNIQUE INDEX messages_pkey ON ONLY realtime.messages USING btree (id, inserted_at)",
              "name": "messages_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "messages_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id, inserted_at)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "messages_2025_10_19",
          "schema": "realtime",
          "columns": [
            {
              "name": "topic",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "extension",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "event",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "private",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX messages_2025_10_19_inserted_at_topic_idx ON realtime.messages_2025_10_19 USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE))",
              "name": "messages_2025_10_19_inserted_at_topic_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX messages_2025_10_19_pkey ON realtime.messages_2025_10_19 USING btree (id, inserted_at)",
              "name": "messages_2025_10_19_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "messages_2025_10_19_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id, inserted_at)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "messages_2025_10_20",
          "schema": "realtime",
          "columns": [
            {
              "name": "topic",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "extension",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "event",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "private",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX messages_2025_10_20_inserted_at_topic_idx ON realtime.messages_2025_10_20 USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE))",
              "name": "messages_2025_10_20_inserted_at_topic_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX messages_2025_10_20_pkey ON realtime.messages_2025_10_20 USING btree (id, inserted_at)",
              "name": "messages_2025_10_20_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "messages_2025_10_20_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id, inserted_at)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "messages_2025_10_21",
          "schema": "realtime",
          "columns": [
            {
              "name": "topic",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "extension",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "event",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "private",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX messages_2025_10_21_inserted_at_topic_idx ON realtime.messages_2025_10_21 USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE))",
              "name": "messages_2025_10_21_inserted_at_topic_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX messages_2025_10_21_pkey ON realtime.messages_2025_10_21 USING btree (id, inserted_at)",
              "name": "messages_2025_10_21_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "messages_2025_10_21_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id, inserted_at)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "messages_2025_10_22",
          "schema": "realtime",
          "columns": [
            {
              "name": "topic",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "extension",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "event",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "private",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX messages_2025_10_22_inserted_at_topic_idx ON realtime.messages_2025_10_22 USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE))",
              "name": "messages_2025_10_22_inserted_at_topic_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX messages_2025_10_22_pkey ON realtime.messages_2025_10_22 USING btree (id, inserted_at)",
              "name": "messages_2025_10_22_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "messages_2025_10_22_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id, inserted_at)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "messages_2025_10_23",
          "schema": "realtime",
          "columns": [
            {
              "name": "topic",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "extension",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "payload",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "event",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "private",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX messages_2025_10_23_inserted_at_topic_idx ON realtime.messages_2025_10_23 USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE))",
              "name": "messages_2025_10_23_inserted_at_topic_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX messages_2025_10_23_pkey ON realtime.messages_2025_10_23 USING btree (id, inserted_at)",
              "name": "messages_2025_10_23_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "messages_2025_10_23_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id, inserted_at)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "schema_migrations",
          "schema": "realtime",
          "columns": [
            {
              "name": "version",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "inserted_at",
              "default": null,
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX schema_migrations_pkey ON realtime.schema_migrations USING btree (version)",
              "name": "schema_migrations_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "schema_migrations_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (version)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "subscription",
          "schema": "realtime",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "YES",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "subscription_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "entity",
              "default": null,
              "identity": "NO",
              "udt_name": "regclass",
              "collation": null,
              "data_type": "regclass",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "filters",
              "default": "'{}'::realtime.user_defined_filter[]",
              "identity": "NO",
              "udt_name": "_user_defined_filter",
              "collation": null,
              "data_type": "ARRAY",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "claims",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "claims_role",
              "default": null,
              "identity": "NO",
              "udt_name": "regrole",
              "collation": null,
              "data_type": "regrole",
              "generated": "ALWAYS",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "timezone('utc'::text, now())",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity)",
              "name": "ix_realtime_subscription_entity"
            },
            {
              "def": "CREATE UNIQUE INDEX pk_subscription ON realtime.subscription USING btree (id)",
              "name": "pk_subscription"
            },
            {
              "def": "CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters)",
              "name": "subscription_subscription_id_entity_filters_key"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters()",
              "name": "tr_check_filters",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "pk_subscription",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "buckets",
          "schema": "storage",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "owner",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "public",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "avif_autodetection",
              "default": "false",
              "identity": "NO",
              "udt_name": "bool",
              "collation": null,
              "data_type": "boolean",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "file_size_limit",
              "default": null,
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "allowed_mime_types",
              "default": null,
              "identity": "NO",
              "udt_name": "_text",
              "collation": null,
              "data_type": "ARRAY",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "owner_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "type",
              "default": "'STANDARD'::storage.buckettype",
              "identity": "NO",
              "udt_name": "buckettype",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name)",
              "name": "bname"
            },
            {
              "def": "CREATE UNIQUE INDEX buckets_pkey ON storage.buckets USING btree (id)",
              "name": "buckets_pkey"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER enforce_bucket_name_length_trigger BEFORE INSERT OR UPDATE OF name ON storage.buckets FOR EACH ROW EXECUTE FUNCTION storage.enforce_bucket_name_length()",
              "name": "enforce_bucket_name_length_trigger",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "buckets_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "buckets_analytics",
          "schema": "storage",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "type",
              "default": "'ANALYTICS'::storage.buckettype",
              "identity": "NO",
              "udt_name": "buckettype",
              "collation": null,
              "data_type": "USER-DEFINED",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "format",
              "default": "'ICEBERG'::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX buckets_analytics_pkey ON storage.buckets_analytics USING btree (id)",
              "name": "buckets_analytics_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "buckets_analytics_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "migrations",
          "schema": "storage",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "hash",
              "default": null,
              "identity": "NO",
              "udt_name": "varchar",
              "collation": null,
              "data_type": "character varying",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "executed_at",
              "default": "CURRENT_TIMESTAMP",
              "identity": "NO",
              "udt_name": "timestamp",
              "collation": null,
              "data_type": "timestamp without time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX migrations_name_key ON storage.migrations USING btree (name)",
              "name": "migrations_name_key"
            },
            {
              "def": "CREATE UNIQUE INDEX migrations_pkey ON storage.migrations USING btree (id)",
              "name": "migrations_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "migrations_name_key",
              "type": "u",
              "definition": "UNIQUE (name)"
            },
            {
              "name": "migrations_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "objects",
          "schema": "storage",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "bucket_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "owner",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "last_accessed_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "metadata",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "path_tokens",
              "default": null,
              "identity": "NO",
              "udt_name": "_text",
              "collation": null,
              "data_type": "ARRAY",
              "generated": "ALWAYS",
              "is_nullable": "YES"
            },
            {
              "name": "version",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "owner_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "user_metadata",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "level",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name)",
              "name": "bucketid_objname"
            },
            {
              "def": "CREATE UNIQUE INDEX idx_name_bucket_level_unique ON storage.objects USING btree (name COLLATE \"C\", bucket_id, level)",
              "name": "idx_name_bucket_level_unique"
            },
            {
              "def": "CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE \"C\")",
              "name": "idx_objects_bucket_id_name"
            },
            {
              "def": "CREATE INDEX idx_objects_lower_name ON storage.objects USING btree ((path_tokens[level]), lower(name) text_pattern_ops, bucket_id, level)",
              "name": "idx_objects_lower_name"
            },
            {
              "def": "CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops)",
              "name": "name_prefix_search"
            },
            {
              "def": "CREATE UNIQUE INDEX objects_bucket_id_level_idx ON storage.objects USING btree (bucket_id, level, name COLLATE \"C\")",
              "name": "objects_bucket_id_level_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX objects_pkey ON storage.objects USING btree (id)",
              "name": "objects_pkey"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER objects_delete_delete_prefix AFTER DELETE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger()",
              "name": "objects_delete_delete_prefix",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER objects_insert_create_prefix BEFORE INSERT ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.objects_insert_prefix_trigger()",
              "name": "objects_insert_create_prefix",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER objects_update_create_prefix BEFORE UPDATE ON storage.objects FOR EACH ROW WHEN (new.name <> old.name OR new.bucket_id <> old.bucket_id) EXECUTE FUNCTION storage.objects_update_prefix_trigger()",
              "name": "objects_update_create_prefix",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column()",
              "name": "update_objects_updated_at",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "objects_bucketId_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id)"
            },
            {
              "name": "objects_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "prefixes",
          "schema": "storage",
          "columns": [
            {
              "name": "bucket_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": "C",
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "level",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "ALWAYS",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "updated_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_prefixes_lower_name ON storage.prefixes USING btree (bucket_id, level, ((string_to_array(name, '/'::text))[level]), lower(name) text_pattern_ops)",
              "name": "idx_prefixes_lower_name"
            },
            {
              "def": "CREATE UNIQUE INDEX prefixes_pkey ON storage.prefixes USING btree (bucket_id, level, name)",
              "name": "prefixes_pkey"
            }
          ],
          "triggers": [
            {
              "def": "CREATE TRIGGER prefixes_create_hierarchy BEFORE INSERT ON storage.prefixes FOR EACH ROW WHEN (pg_trigger_depth() < 1) EXECUTE FUNCTION storage.prefixes_insert_trigger()",
              "name": "prefixes_create_hierarchy",
              "enabled": true
            },
            {
              "def": "CREATE TRIGGER prefixes_delete_hierarchy AFTER DELETE ON storage.prefixes FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger()",
              "name": "prefixes_delete_hierarchy",
              "enabled": true
            }
          ],
          "constraints": [
            {
              "name": "prefixes_bucketId_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id)"
            },
            {
              "name": "prefixes_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (bucket_id, level, name)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "columns": [
            {
              "name": "id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "in_progress_size",
              "default": "0",
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "upload_signature",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "bucket_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "key",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": "C",
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "version",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "owner_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "user_metadata",
              "default": null,
              "identity": "NO",
              "udt_name": "jsonb",
              "collation": null,
              "data_type": "jsonb",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at)",
              "name": "idx_multipart_uploads_list"
            },
            {
              "def": "CREATE UNIQUE INDEX s3_multipart_uploads_pkey ON storage.s3_multipart_uploads USING btree (id)",
              "name": "s3_multipart_uploads_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "s3_multipart_uploads_bucket_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id)"
            },
            {
              "name": "s3_multipart_uploads_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_storage_admin",
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "upload_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "size",
              "default": "0",
              "identity": "NO",
              "udt_name": "int8",
              "collation": null,
              "data_type": "bigint",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "part_number",
              "default": null,
              "identity": "NO",
              "udt_name": "int4",
              "collation": null,
              "data_type": "integer",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "bucket_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "key",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": "C",
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "etag",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "owner_id",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "version",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "created_at",
              "default": "now()",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX s3_multipart_uploads_parts_pkey ON storage.s3_multipart_uploads_parts USING btree (id)",
              "name": "s3_multipart_uploads_parts_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "s3_multipart_uploads_parts_bucket_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id)"
            },
            {
              "name": "s3_multipart_uploads_parts_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            },
            {
              "name": "s3_multipart_uploads_parts_upload_id_fkey",
              "type": "f",
              "definition": "FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE"
            }
          ],
          "rowsecurity": true,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "schema_migrations",
          "schema": "supabase_migrations",
          "columns": [
            {
              "name": "version",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "statements",
              "default": null,
              "identity": "NO",
              "udt_name": "_text",
              "collation": null,
              "data_type": "ARRAY",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX schema_migrations_pkey ON supabase_migrations.schema_migrations USING btree (version)",
              "name": "schema_migrations_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "schema_migrations_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (version)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "postgres",
          "table": "seed_files",
          "schema": "supabase_migrations",
          "columns": [
            {
              "name": "path",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "hash",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX seed_files_pkey ON supabase_migrations.seed_files USING btree (path)",
              "name": "seed_files_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "seed_files_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (path)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        },
        {
          "owner": "supabase_admin",
          "table": "secrets",
          "schema": "vault",
          "columns": [
            {
              "name": "id",
              "default": "gen_random_uuid()",
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "name",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "description",
              "default": "''::text",
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "secret",
              "default": null,
              "identity": "NO",
              "udt_name": "text",
              "collation": null,
              "data_type": "text",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "key_id",
              "default": null,
              "identity": "NO",
              "udt_name": "uuid",
              "collation": null,
              "data_type": "uuid",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "nonce",
              "default": "vault._crypto_aead_det_noncegen()",
              "identity": "NO",
              "udt_name": "bytea",
              "collation": null,
              "data_type": "bytea",
              "generated": "NEVER",
              "is_nullable": "YES"
            },
            {
              "name": "created_at",
              "default": "CURRENT_TIMESTAMP",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            },
            {
              "name": "updated_at",
              "default": "CURRENT_TIMESTAMP",
              "identity": "NO",
              "udt_name": "timestamptz",
              "collation": null,
              "data_type": "timestamp with time zone",
              "generated": "NEVER",
              "is_nullable": "NO"
            }
          ],
          "indexes": [
            {
              "def": "CREATE UNIQUE INDEX secrets_name_idx ON vault.secrets USING btree (name) WHERE (name IS NOT NULL)",
              "name": "secrets_name_idx"
            },
            {
              "def": "CREATE UNIQUE INDEX secrets_pkey ON vault.secrets USING btree (id)",
              "name": "secrets_pkey"
            }
          ],
          "triggers": [],
          "constraints": [
            {
              "name": "secrets_pkey",
              "type": "p",
              "definition": "PRIMARY KEY (id)"
            }
          ],
          "rowsecurity": false,
          "forcerowsecurity": false,
          "replica_identity": "default"
        }
      ],
      "db_user": "postgres",
      "schemas": [
        {
          "owner": "postgres",
          "schema": "admin"
        },
        {
          "owner": "postgres",
          "schema": "app"
        },
        {
          "owner": "supabase_admin",
          "schema": "auth"
        },
        {
          "owner": "postgres",
          "schema": "extensions"
        },
        {
          "owner": "supabase_admin",
          "schema": "graphql"
        },
        {
          "owner": "supabase_admin",
          "schema": "graphql_public"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_0"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_1"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_10"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_11"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_12"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_13"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_14"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_15"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_16"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_17"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_18"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_19"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_2"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_20"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_21"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_22"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_23"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_24"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_25"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_26"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_27"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_28"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_29"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_30"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_31"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_32"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_33"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_34"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_35"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_36"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_37"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_38"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_39"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_4"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_40"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_41"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_42"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_43"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_44"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_45"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_46"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_47"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_48"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_49"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_5"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_50"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_51"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_52"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_53"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_54"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_55"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_56"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_57"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_58"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_59"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_6"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_7"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_8"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_temp_9"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_0"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_1"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_10"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_11"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_12"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_13"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_14"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_15"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_16"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_17"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_18"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_19"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_2"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_20"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_21"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_22"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_23"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_24"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_25"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_26"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_27"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_28"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_29"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_30"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_31"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_32"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_33"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_34"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_35"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_36"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_37"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_38"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_39"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_4"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_40"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_41"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_42"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_43"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_44"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_45"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_46"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_47"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_48"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_49"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_5"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_50"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_51"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_52"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_53"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_54"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_55"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_56"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_57"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_58"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_59"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_6"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_7"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_8"
        },
        {
          "owner": "supabase_admin",
          "schema": "pg_toast_temp_9"
        },
        {
          "owner": "pgbouncer",
          "schema": "pgbouncer"
        },
        {
          "owner": "postgres",
          "schema": "private"
        },
        {
          "owner": "pg_database_owner",
          "schema": "public"
        },
        {
          "owner": "supabase_admin",
          "schema": "realtime"
        },
        {
          "owner": "supabase_admin",
          "schema": "storage"
        },
        {
          "owner": "postgres",
          "schema": "supabase_migrations"
        },
        {
          "owner": "supabase_admin",
          "schema": "vault"
        }
      ],
      "storage": {
        "buckets": [
          {
            "id": "chat-attachments",
            "name": "chat-attachments",
            "type": "STANDARD",
            "owner": null,
            "public": false,
            "owner_id": null,
            "created_at": "2025-09-14T05:17:13.147356+00:00",
            "updated_at": "2025-09-14T05:17:13.147356+00:00",
            "file_size_limit": null,
            "allowed_mime_types": null,
            "avif_autodetection": false
          }
        ],
        "objects_per_bucket": [
          {
            "bucket_id": "chat-attachments",
            "object_count": 12
          }
        ]
      },
      "database": "postgres",
      "policies": [
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "account_feature_permissions",
          "using": "(user_uid = auth.uid())",
          "policy": "employee_can_select_own_afp",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "account_feature_permissions",
          "using": "(EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = account_feature_permissions.account_id) AND (au.user_uid = auth.uid()) AND (au.role = 'owner'::text) AND (COALESCE(au.disabled, false) = false))))",
          "policy": "owner_can_delete_afp",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "account_feature_permissions",
          "using": null,
          "policy": "owner_can_insert_afp",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = account_feature_permissions.account_id) AND (au.user_uid = auth.uid()) AND (au.role = 'owner'::text) AND (COALESCE(au.disabled, false) = false)))) AND (EXISTS ( SELECT 1\n   FROM account_users t\n  WHERE ((t.account_id = account_feature_permissions.account_id) AND (t.user_uid = account_feature_permissions.user_uid)))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "account_feature_permissions",
          "using": "(EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = account_feature_permissions.account_id) AND (au.user_uid = auth.uid()) AND (au.role = 'owner'::text) AND (COALESCE(au.disabled, false) = false))))",
          "policy": "owner_can_select_afp",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "account_feature_permissions",
          "using": "(EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = account_feature_permissions.account_id) AND (au.user_uid = auth.uid()) AND (au.role = 'owner'::text) AND (COALESCE(au.disabled, false) = false))))",
          "policy": "owner_can_update_afp",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = account_feature_permissions.account_id) AND (au.user_uid = auth.uid()) AND (au.role = 'owner'::text) AND (COALESCE(au.disabled, false) = false)))) AND (EXISTS ( SELECT 1\n   FROM account_users t\n  WHERE ((t.account_id = account_feature_permissions.account_id) AND (t.user_uid = account_feature_permissions.user_uid)))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "account_users",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_account_users_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "account_users",
          "using": "(EXISTS ( SELECT 1\n   FROM super_admins sa\n  WHERE (sa.user_uid = auth.uid())))",
          "policy": "rls_account_users_select_super",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "account_users",
          "using": "is_super_admin()",
          "policy": "super admin select account_users",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "accounts",
          "using": "(id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_accounts_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "accounts",
          "using": "(EXISTS ( SELECT 1\n   FROM super_admins sa\n  WHERE (sa.user_uid = auth.uid())))",
          "policy": "rls_accounts_select_super",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "alert_settings",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "alert_settings_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "alert_settings",
          "using": null,
          "policy": "alert_settings_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "alert_settings",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "alert_settings_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "alert_settings",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "alert_settings_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "alert_settings",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_alert_settings_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "alert_settings",
          "using": null,
          "policy": "rls_alert_settings_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "alert_settings",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_alert_settings_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "alert_settings",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_alert_settings_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "appointments",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "appointments_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "appointments",
          "using": null,
          "policy": "appointments_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "appointments",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "appointments_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "appointments",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "appointments_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "appointments",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_appointments_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "appointments",
          "using": null,
          "policy": "rls_appointments_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "appointments",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_appointments_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "appointments",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_appointments_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_attachments",
          "using": "((COALESCE(is_deleted, false) = false) AND ((EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON ((p.conversation_id = m.conversation_id)))\n  WHERE ((m.id = chat_attachments.message_id) AND (p.user_uid = auth.uid()) AND (m.account_id = chat_attachments.account_id)))) OR (EXISTS ( SELECT 1\n   FROM super_admins s\n  WHERE (s.user_uid = auth.uid())))))",
          "policy": "att_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "chat_attachments",
          "using": "((fn_is_super_admin() = true) OR (EXISTS ( SELECT 1\n   FROM chat_messages m\n  WHERE ((m.id = chat_attachments.message_id) AND ((m.sender_uid)::text = (auth.uid())::text)))))",
          "policy": "atts_delete_owner_message_or_super",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_attachments",
          "using": null,
          "policy": "atts_insert_if_participant_or_super",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((fn_is_super_admin() = true) OR (EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON ((p.conversation_id = m.conversation_id)))\n  WHERE ((m.id = chat_attachments.message_id) AND ((p.user_uid)::text = (auth.uid())::text)))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_attachments",
          "using": "((fn_is_super_admin() = true) OR (EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON ((p.conversation_id = m.conversation_id)))\n  WHERE ((m.id = chat_attachments.message_id) AND ((p.user_uid)::text = (auth.uid())::text)))))",
          "policy": "atts_select_if_participant_or_super",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "chat_conversations",
          "using": "(public.conv_has_member(id) AND (created_by = auth.uid()))",
          "policy": "conv_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "chat_conversations",
          "using": null,
          "policy": "conv_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(created_by = auth.uid())"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_conversations",
          "using": "((COALESCE(is_deleted, false) = false) AND (((EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = chat_conversations.account_id) AND (au.user_uid = auth.uid()) AND (COALESCE(au.disabled, false) = false)))) AND (EXISTS ( SELECT 1\n   FROM chat_participants cp\n  WHERE ((cp.conversation_id = chat_conversations.id) AND (cp.user_uid = auth.uid()))))) OR (EXISTS ( SELECT 1\n   FROM super_admins s\n  WHERE (s.user_uid = auth.uid())))))",
          "policy": "conv_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "chat_conversations",
          "using": "(public.conv_has_member(id) AND (created_by = auth.uid()))",
          "policy": "conv_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(public.conv_has_member(id) AND (created_by = auth.uid()))"
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_conversations",
          "using": null,
          "policy": "conversations_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(EXISTS ( SELECT 1\n   FROM account_users au\n  WHERE ((au.account_id = chat_conversations.account_id) AND (au.user_uid = auth.uid()))))"
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_conversations",
          "using": null,
          "policy": "conversations_insert_by_superadmin",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (lower(p.role) = 'superadmin'::text))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_conversations",
          "using": "((EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_conversations.id) AND (p.user_uid = auth.uid())))) OR (created_by = auth.uid()))",
          "policy": "conversations_select_if_participant",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "chat_messages",
          "using": "(sender_uid = auth.uid())",
          "policy": "messages_delete_by_sender",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_messages",
          "using": null,
          "policy": "messages_insert_if_participant",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(((EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_messages.conversation_id) AND (p.user_uid = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM chat_conversations c\n  WHERE ((c.id = chat_messages.conversation_id) AND (c.created_by = auth.uid()))))) AND (sender_uid = auth.uid()))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_messages",
          "using": "((EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_messages.conversation_id) AND (p.user_uid = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM chat_conversations c\n  WHERE ((c.id = chat_messages.conversation_id) AND (c.created_by = auth.uid())))))",
          "policy": "messages_select_if_participant",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "chat_messages",
          "using": "((sender_uid = auth.uid()) AND ((EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_messages.conversation_id) AND (p.user_uid = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM chat_conversations c\n  WHERE ((c.id = chat_messages.conversation_id) AND (c.created_by = auth.uid()))))))",
          "policy": "messages_update_by_sender",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(sender_uid = auth.uid())"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "chat_messages",
          "using": "(public.conv_has_member(conversation_id) AND (sender_uid = auth.uid()))",
          "policy": "msg_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "chat_messages",
          "using": null,
          "policy": "msg_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(public.conv_has_member(conversation_id) AND (sender_uid = auth.uid()))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_messages",
          "using": "((COALESCE(is_deleted, false) = false) AND ((EXISTS ( SELECT 1\n   FROM (chat_conversations c\n     JOIN chat_participants p ON ((p.conversation_id = c.id)))\n  WHERE ((c.id = chat_messages.conversation_id) AND (p.user_uid = auth.uid()) AND (c.account_id = chat_messages.account_id)))) OR (EXISTS ( SELECT 1\n   FROM super_admins s\n  WHERE (s.user_uid = auth.uid())))))",
          "policy": "msg_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "chat_messages",
          "using": "(public.conv_has_member(conversation_id) AND (sender_uid = auth.uid()))",
          "policy": "msg_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(public.conv_has_member(conversation_id) AND (sender_uid = auth.uid()))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "chat_participants",
          "using": "(user_uid = auth.uid())",
          "policy": "cp_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "chat_participants",
          "using": null,
          "policy": "cp_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(user_uid = auth.uid())"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_participants",
          "using": "(user_uid = auth.uid())",
          "policy": "cp_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "chat_participants",
          "using": "(user_uid = auth.uid())",
          "policy": "cp_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(user_uid = auth.uid())"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "chat_participants",
          "using": "(user_uid = auth.uid())",
          "policy": "participants_delete_self",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_participants",
          "using": null,
          "policy": "participants_insert_by_creator",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(EXISTS ( SELECT 1\n   FROM ((chat_conversations c\n     JOIN account_users me ON (((me.account_id = c.account_id) AND (me.user_uid = auth.uid()))))\n     LEFT JOIN account_users target ON ((target.user_uid = chat_participants.user_uid)))\n  WHERE ((c.id = chat_participants.conversation_id) AND (c.created_by = auth.uid()) AND ((target.account_id = c.account_id) OR (target.role = 'superadmin'::text)) AND ((target.role IS DISTINCT FROM 'superadmin'::text) OR (me.role = 'owner'::text)))))"
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_participants",
          "using": null,
          "policy": "participants_insert_by_superadmin",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (lower(p.role) = 'superadmin'::text))))"
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_participants",
          "using": null,
          "policy": "participants_insert_self",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM (chat_conversations c\n     JOIN account_users au ON (((au.account_id = c.account_id) AND (au.user_uid = auth.uid()))))\n  WHERE (c.id = chat_participants.conversation_id))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_participants",
          "using": "is_conv_member(conversation_id, auth.uid())",
          "policy": "participants_select_if_same_conversation",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_reactions",
          "using": "((COALESCE(is_deleted, false) = false) AND ((EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON ((p.conversation_id = m.conversation_id)))\n  WHERE ((m.id = chat_reactions.message_id) AND (p.user_uid = auth.uid()) AND (m.account_id = chat_reactions.account_id)))) OR (EXISTS ( SELECT 1\n   FROM super_admins s\n  WHERE (s.user_uid = auth.uid())))))",
          "policy": "reac_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "chat_reactions",
          "using": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON (((p.conversation_id = m.conversation_id) AND (p.user_uid = auth.uid()))))\n  WHERE (m.id = chat_reactions.message_id))))",
          "policy": "reactions delete by owner participant",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_reactions",
          "using": null,
          "policy": "reactions insert by participant self",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON (((p.conversation_id = m.conversation_id) AND (p.user_uid = auth.uid()))))\n  WHERE (m.id = chat_reactions.message_id))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_reactions",
          "using": "(EXISTS ( SELECT 1\n   FROM (chat_messages m\n     JOIN chat_participants p ON (((p.conversation_id = m.conversation_id) AND (p.user_uid = auth.uid()))))\n  WHERE (m.id = chat_reactions.message_id)))",
          "policy": "reactions select for participants",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "chat_reactions",
          "using": "(user_uid = auth.uid())",
          "policy": "reacts_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "chat_reactions",
          "using": null,
          "policy": "reacts_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((EXISTS ( SELECT 1\n   FROM chat_messages m\n  WHERE ((m.id = chat_reactions.message_id) AND is_participant(m.conversation_id, auth.uid())))) AND (user_uid = auth.uid()))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_reactions",
          "using": "(EXISTS ( SELECT 1\n   FROM chat_messages m\n  WHERE ((m.id = chat_reactions.message_id) AND is_participant(m.conversation_id, auth.uid()))))",
          "policy": "reacts_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "chat_reads",
          "using": "(public.conv_has_member(conversation_id) AND (user_uid = auth.uid()))",
          "policy": "reads_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "chat_reads",
          "using": null,
          "policy": "reads_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_reads.conversation_id) AND (p.user_uid = auth.uid())))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_reads",
          "using": "(((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_reads.conversation_id) AND (p.user_uid = auth.uid()))))) OR (EXISTS ( SELECT 1\n   FROM super_admins s\n  WHERE (s.user_uid = auth.uid()))))",
          "policy": "reads_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_reads",
          "using": "(EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_reads.conversation_id) AND (p.user_uid = auth.uid()))))",
          "policy": "reads_select_if_participant",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "chat_reads",
          "using": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_reads.conversation_id) AND (p.user_uid = auth.uid())))))",
          "policy": "reads_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_reads.conversation_id) AND (p.user_uid = auth.uid())))))"
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "chat_reads",
          "using": "(user_uid = auth.uid())",
          "policy": "reads_update_self",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(user_uid = auth.uid())"
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "chat_reads",
          "using": null,
          "policy": "reads_upsert_self",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_reads.conversation_id) AND (p.user_uid = auth.uid())))))"
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "chat_unreads",
          "using": null,
          "policy": "unreads_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_unreads.conversation_id) AND (p.user_uid = auth.uid())))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "chat_unreads",
          "using": "(((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_unreads.conversation_id) AND (p.user_uid = auth.uid()))))) OR (EXISTS ( SELECT 1\n   FROM super_admins s\n  WHERE (s.user_uid = auth.uid()))))",
          "policy": "unreads_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "chat_unreads",
          "using": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_unreads.conversation_id) AND (p.user_uid = auth.uid())))))",
          "policy": "unreads_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((user_uid = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_unreads.conversation_id) AND (p.user_uid = auth.uid())))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "clinics",
          "using": "is_super_admin()",
          "policy": "super admin select clinics",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "complaints",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "complaints_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "complaints",
          "using": null,
          "policy": "complaints_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "complaints",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "complaints_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "complaints",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "complaints_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "complaints",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_complaints_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "complaints",
          "using": null,
          "policy": "rls_complaints_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "complaints",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_complaints_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "complaints",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_complaints_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "consumption_types",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "consumption_types_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "consumption_types",
          "using": null,
          "policy": "consumption_types_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "consumption_types",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "consumption_types_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "consumption_types",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "consumption_types_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "consumption_types",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_consumption_types_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "consumption_types",
          "using": null,
          "policy": "rls_consumption_types_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "consumption_types",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_consumption_types_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "consumption_types",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_consumption_types_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "consumptions",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "consumptions_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "consumptions",
          "using": null,
          "policy": "consumptions_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "consumptions",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "consumptions_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "consumptions",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "consumptions_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "consumptions",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_consumptions_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "consumptions",
          "using": null,
          "policy": "rls_consumptions_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "consumptions",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_consumptions_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "consumptions",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_consumptions_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "doctors",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "doctors_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "doctors",
          "using": null,
          "policy": "doctors_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "doctors",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "doctors_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "doctors",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "doctors_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "doctors",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_doctors_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "doctors",
          "using": null,
          "policy": "rls_doctors_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "doctors",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_doctors_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "doctors",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_doctors_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "drugs",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "drugs_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "drugs",
          "using": null,
          "policy": "drugs_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "drugs",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "drugs_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "drugs",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "drugs_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "drugs",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_drugs_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "drugs",
          "using": null,
          "policy": "rls_drugs_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "drugs",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_drugs_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "drugs",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_drugs_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "employees",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "employees",
          "using": null,
          "policy": "employees_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "employees",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "employees",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "employees",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "employees",
          "using": null,
          "policy": "rls_employees_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "employees",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_employees_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "employees",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "employees_discounts",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_discounts_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "employees_discounts",
          "using": null,
          "policy": "employees_discounts_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "employees_discounts",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_discounts_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "employees_discounts",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_discounts_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "employees_discounts",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_discounts_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "employees_discounts",
          "using": null,
          "policy": "rls_employees_discounts_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "employees_discounts",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_employees_discounts_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "employees_discounts",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_discounts_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "employees_loans",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_loans_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "employees_loans",
          "using": null,
          "policy": "employees_loans_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "employees_loans",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_loans_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "employees_loans",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_loans_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "employees_loans",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_loans_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "employees_loans",
          "using": null,
          "policy": "rls_employees_loans_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "employees_loans",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_employees_loans_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "employees_loans",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_loans_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "employees_salaries",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_salaries_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "employees_salaries",
          "using": null,
          "policy": "employees_salaries_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "employees_salaries",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_salaries_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "employees_salaries",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "employees_salaries_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "employees_salaries",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_salaries_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "employees_salaries",
          "using": null,
          "policy": "rls_employees_salaries_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "employees_salaries",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_employees_salaries_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "employees_salaries",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_employees_salaries_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "financial_logs",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "financial_logs_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "financial_logs",
          "using": null,
          "policy": "financial_logs_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "financial_logs",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "financial_logs_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "financial_logs",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "financial_logs_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "financial_logs",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_financial_logs_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "financial_logs",
          "using": null,
          "policy": "rls_financial_logs_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "financial_logs",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_financial_logs_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "financial_logs",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_financial_logs_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "item_types",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "item_types_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "item_types",
          "using": null,
          "policy": "item_types_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "item_types",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "item_types_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "item_types",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "item_types_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "item_types",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_item_types_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "item_types",
          "using": null,
          "policy": "rls_item_types_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "item_types",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_item_types_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "item_types",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_item_types_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "items",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "items_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "items",
          "using": null,
          "policy": "items_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "items",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "items_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "items",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "items_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "items",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_items_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "items",
          "using": null,
          "policy": "rls_items_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "items",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_items_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "items",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_items_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "medical_services",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "medical_services_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "medical_services",
          "using": null,
          "policy": "medical_services_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "medical_services",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "medical_services_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "medical_services",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "medical_services_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "medical_services",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_medical_services_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "medical_services",
          "using": null,
          "policy": "rls_medical_services_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "medical_services",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_medical_services_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "medical_services",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_medical_services_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "memberships",
          "using": "(user_id = auth.uid())",
          "policy": "read_own_memberships",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "ALL",
          "roles": [
            "service_role"
          ],
          "table": "memberships",
          "using": "true",
          "policy": "write_memberships_service_role",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "true"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "patient_services",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "patient_services_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "patient_services",
          "using": null,
          "policy": "patient_services_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "patient_services",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "patient_services_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "patient_services",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "patient_services_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "patient_services",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_patient_services_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "patient_services",
          "using": null,
          "policy": "rls_patient_services_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "patient_services",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_patient_services_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "patient_services",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_patient_services_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "patients",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "patients_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "patients",
          "using": null,
          "policy": "patients_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "patients",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "patients_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "patients",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "patients_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "patients",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_patients_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "patients",
          "using": null,
          "policy": "rls_patients_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "patients",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_patients_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "patients",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_patients_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "prescription_items",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "prescription_items_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "prescription_items",
          "using": null,
          "policy": "prescription_items_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "prescription_items",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "prescription_items_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "prescription_items",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "prescription_items_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "prescription_items",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_prescription_items_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "prescription_items",
          "using": null,
          "policy": "rls_prescription_items_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "prescription_items",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_prescription_items_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "prescription_items",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_prescription_items_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "prescriptions",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "prescriptions_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "prescriptions",
          "using": null,
          "policy": "prescriptions_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "prescriptions",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "prescriptions_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "prescriptions",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "prescriptions_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "prescriptions",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_prescriptions_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "prescriptions",
          "using": null,
          "policy": "rls_prescriptions_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "prescriptions",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_prescriptions_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "prescriptions",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_prescriptions_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "profiles",
          "using": "((id = auth.uid()) OR (account_id IN ( SELECT my_accounts() AS my_accounts)))",
          "policy": "rls_profiles_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "profiles",
          "using": "(EXISTS ( SELECT 1\n   FROM super_admins sa\n  WHERE (sa.user_uid = auth.uid())))",
          "policy": "rls_profiles_select_super",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "purchases",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "purchases_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "purchases",
          "using": null,
          "policy": "purchases_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "purchases",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "purchases_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "purchases",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "purchases_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "purchases",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_purchases_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "purchases",
          "using": null,
          "policy": "rls_purchases_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "purchases",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_purchases_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "purchases",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_purchases_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "returns",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "returns_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "returns",
          "using": null,
          "policy": "returns_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "returns",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "returns_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "returns",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "returns_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "returns",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_returns_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "returns",
          "using": null,
          "policy": "rls_returns_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "returns",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_returns_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "returns",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_returns_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "service_doctor_share",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_service_doctor_share_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "service_doctor_share",
          "using": null,
          "policy": "rls_service_doctor_share_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id = my_account_id()) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "service_doctor_share",
          "using": "(account_id IN ( SELECT my_accounts() AS my_accounts))",
          "policy": "rls_service_doctor_share_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "authenticated"
          ],
          "table": "service_doctor_share",
          "using": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))",
          "policy": "rls_service_doctor_share_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "((account_id IN ( SELECT my_accounts() AS my_accounts)) AND (COALESCE(( SELECT a.frozen\n   FROM accounts a\n  WHERE (a.id = a.account_id)), false) = false))"
        },
        {
          "cmd": "DELETE",
          "roles": [
            "public"
          ],
          "table": "service_doctor_share",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "service_doctor_share_delete",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "public"
          ],
          "table": "service_doctor_share",
          "using": null,
          "policy": "service_doctor_share_insert",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "service_doctor_share",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "service_doctor_share_select",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "UPDATE",
          "roles": [
            "public"
          ],
          "table": "service_doctor_share",
          "using": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))",
          "policy": "service_doctor_share_update",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(account_id IN ( SELECT app.current_account_ids() AS current_account_ids))"
        },
        {
          "cmd": "ALL",
          "roles": [
            "authenticated"
          ],
          "table": "super_admins",
          "using": "true",
          "policy": "super_admins_rw_auth",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "true"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "public"
          ],
          "table": "super_admins",
          "using": "(auth.uid() = user_uid)",
          "policy": "super_admins_self",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "ALL",
          "roles": [
            "public"
          ],
          "table": "user_push_tokens",
          "using": "(auth.uid() = user_uid)",
          "policy": "own tokens",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(auth.uid() = user_uid)"
        },
        {
          "cmd": "ALL",
          "roles": [
            "authenticated"
          ],
          "table": "user_push_tokens",
          "using": "(user_uid = auth.uid())",
          "policy": "upt_iud_own",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": "(user_uid = auth.uid())"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "user_push_tokens",
          "using": "(user_uid = auth.uid())",
          "policy": "upt_select_own",
          "schema": "public",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "objects",
          "using": "((bucket_id = 'chat-attachments'::text) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_conversation_id_from_path(objects.name)) AND (p.user_uid = auth.uid())))))",
          "policy": "chat-attachments delete for participants",
          "schema": "storage",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "objects",
          "using": null,
          "policy": "chat-attachments insert for participants",
          "schema": "storage",
          "permissive": "PERMISSIVE",
          "with_check": "((bucket_id = 'chat-attachments'::text) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_conversation_id_from_path(objects.name)) AND (p.user_uid = auth.uid())))))"
        },
        {
          "cmd": "SELECT",
          "roles": [
            "authenticated"
          ],
          "table": "objects",
          "using": "((bucket_id = 'chat-attachments'::text) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = chat_conversation_id_from_path(objects.name)) AND (p.user_uid = auth.uid())))))",
          "policy": "chat-attachments read for participants",
          "schema": "storage",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "DELETE",
          "roles": [
            "authenticated"
          ],
          "table": "objects",
          "using": "((bucket_id = 'chat-attachments'::text) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = (split_part(objects.name, '/'::text, 2))::uuid) AND (p.user_uid = auth.uid())))))",
          "policy": "chat_delete_if_participant",
          "schema": "storage",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "cmd": "INSERT",
          "roles": [
            "authenticated"
          ],
          "table": "objects",
          "using": null,
          "policy": "chat_insert_if_participant",
          "schema": "storage",
          "permissive": "PERMISSIVE",
          "with_check": "((bucket_id = 'chat-attachments'::text) AND (EXISTS ( SELECT 1\n   FROM chat_participants p\n  WHERE ((p.conversation_id = (split_part(objects.name, '/'::text, 2))::uuid) AND (p.user_uid = auth.uid())))))"
        }
      ],
      "timezone": "UTC",
      "functions": [
        {
          "def": "CREATE OR REPLACE FUNCTION app.current_account_ids()\n RETURNS SETOF uuid\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select m.account_id\r\n  from memberships m\r\n  where m.user_id = auth.uid()\r\n$function$\n",
          "name": "current_account_ids",
          "schema": "app",
          "returns": "SETOF uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION app.has_account_access(p_account_id uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public', 'app'\nAS $function$\r\n  select\r\n    -- مالك الحساب\r\n    exists (\r\n      select 1\r\n      from public.accounts a\r\n      where a.id = p_account_id\r\n        and a.owner_uid = auth.uid()\r\n    )\r\n    or\r\n    -- موظّف ضمن هذا الحساب وغير معطّل\r\n    exists (\r\n      select 1\r\n      from public.account_users au\r\n      where au.account_id = p_account_id\r\n        and au.user_uid   = auth.uid()\r\n        and coalesce(au.disabled, false) = false\r\n    );\r\n$function$\n",
          "name": "has_account_access",
          "schema": "app",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION app.is_super_admin()\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select exists (\r\n    select 1\r\n    from public.super_admins s\r\n    where s.user_uid = auth.uid()\r\n  );\r\n$function$\n",
          "name": "is_super_admin",
          "schema": "app",
          "returns": "boolean",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION app.is_super_admin(p_uid uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$ select false; $function$\n",
          "name": "is_super_admin",
          "schema": "app",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION app.jwt_email()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select coalesce(\r\n    (auth.jwt() ->> 'email'),\r\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')\r\n  );\r\n$function$\n",
          "name": "jwt_email",
          "schema": "app",
          "returns": "text",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION app.jwt_uid()\n RETURNS uuid\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select coalesce(\r\n    (auth.uid()),\r\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')::uuid\r\n  );\r\n$function$\n",
          "name": "jwt_uid",
          "schema": "app",
          "returns": "uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION app.set_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  new.updated_at := now();\r\n  return new;\r\nend\r\n$function$\n",
          "name": "set_updated_at",
          "schema": "app",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION auth.email()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.email', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')\n  )::text\n$function$\n",
          "name": "email",
          "schema": "auth",
          "returns": "text",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION auth.jwt()\n RETURNS jsonb\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n    coalesce(\n        nullif(current_setting('request.jwt.claim', true), ''),\n        nullif(current_setting('request.jwt.claims', true), '')\n    )::jsonb\n$function$\n",
          "name": "jwt",
          "schema": "auth",
          "returns": "jsonb",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION auth.role()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.role', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')\n  )::text\n$function$\n",
          "name": "role",
          "schema": "auth",
          "returns": "text",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION auth.uid()\n RETURNS uuid\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.sub', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')\n  )::uuid\n$function$\n",
          "name": "uid",
          "schema": "auth",
          "returns": "uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.armor(bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_armor$function$\n",
          "name": "armor",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.armor(bytea, text[], text[])\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_armor$function$\n",
          "name": "armor",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea, text[], text[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.crypt(text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_crypt$function$\n",
          "name": "crypt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.dearmor(text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_dearmor$function$\n",
          "name": "dearmor",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.decrypt(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_decrypt$function$\n",
          "name": "decrypt",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_decrypt_iv$function$\n",
          "name": "decrypt_iv",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.digest(bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_digest$function$\n",
          "name": "digest",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.digest(text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_digest$function$\n",
          "name": "digest",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.encrypt(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_encrypt$function$\n",
          "name": "encrypt",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_encrypt_iv$function$\n",
          "name": "encrypt_iv",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.gen_random_bytes(integer)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_random_bytes$function$\n",
          "name": "gen_random_bytes",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.gen_random_uuid()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE\nAS '$libdir/pgcrypto', $function$pg_random_uuid$function$\n",
          "name": "gen_random_uuid",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.gen_salt(text)\n RETURNS text\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_gen_salt$function$\n",
          "name": "gen_salt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.gen_salt(text, integer)\n RETURNS text\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_gen_salt_rounds$function$\n",
          "name": "gen_salt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "text, integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.grant_pg_cron_access()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  IF EXISTS (\n    SELECT\n    FROM pg_event_trigger_ddl_commands() AS ev\n    JOIN pg_extension AS ext\n    ON ev.objid = ext.oid\n    WHERE ext.extname = 'pg_cron'\n  )\n  THEN\n    grant usage on schema cron to postgres with grant option;\n\n    alter default privileges in schema cron grant all on tables to postgres with grant option;\n    alter default privileges in schema cron grant all on functions to postgres with grant option;\n    alter default privileges in schema cron grant all on sequences to postgres with grant option;\n\n    alter default privileges for user supabase_admin in schema cron grant all\n        on sequences to postgres with grant option;\n    alter default privileges for user supabase_admin in schema cron grant all\n        on tables to postgres with grant option;\n    alter default privileges for user supabase_admin in schema cron grant all\n        on functions to postgres with grant option;\n\n    grant all privileges on all tables in schema cron to postgres with grant option;\n    revoke all on table cron.job from postgres;\n    grant select on table cron.job to postgres with grant option;\n  END IF;\nEND;\n$function$\n",
          "name": "grant_pg_cron_access",
          "schema": "extensions",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.grant_pg_graphql_access()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    func_is_graphql_resolve bool;\nBEGIN\n    func_is_graphql_resolve = (\n        SELECT n.proname = 'resolve'\n        FROM pg_event_trigger_ddl_commands() AS ev\n        LEFT JOIN pg_catalog.pg_proc AS n\n        ON ev.objid = n.oid\n    );\n\n    IF func_is_graphql_resolve\n    THEN\n        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func\n        DROP FUNCTION IF EXISTS graphql_public.graphql;\n        create or replace function graphql_public.graphql(\n            \"operationName\" text default null,\n            query text default null,\n            variables jsonb default null,\n            extensions jsonb default null\n        )\n            returns jsonb\n            language sql\n        as $$\n            select graphql.resolve(\n                query := query,\n                variables := coalesce(variables, '{}'),\n                \"operationName\" := \"operationName\",\n                extensions := extensions\n            );\n        $$;\n\n        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last\n        -- function in the extension so we need to grant permissions on existing entities AND\n        -- update default permissions to any others that are created after `graphql.resolve`\n        grant usage on schema graphql to postgres, anon, authenticated, service_role;\n        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;\n        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;\n        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;\n        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;\n        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;\n        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;\n\n        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles\n        grant usage on schema graphql_public to postgres with grant option;\n        grant usage on schema graphql to postgres with grant option;\n    END IF;\n\nEND;\n$function$\n",
          "name": "grant_pg_graphql_access",
          "schema": "extensions",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.grant_pg_net_access()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  IF EXISTS (\n    SELECT 1\n    FROM pg_event_trigger_ddl_commands() AS ev\n    JOIN pg_extension AS ext\n    ON ev.objid = ext.oid\n    WHERE ext.extname = 'pg_net'\n  )\n  THEN\n    IF NOT EXISTS (\n      SELECT 1\n      FROM pg_roles\n      WHERE rolname = 'supabase_functions_admin'\n    )\n    THEN\n      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;\n    END IF;\n\n    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;\n\n    IF EXISTS (\n      SELECT FROM pg_extension\n      WHERE extname = 'pg_net'\n      -- all versions in use on existing projects as of 2025-02-20\n      -- version 0.12.0 onwards don't need these applied\n      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')\n    ) THEN\n      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;\n      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;\n\n      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;\n      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;\n\n      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;\n      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;\n\n      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;\n      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;\n    END IF;\n  END IF;\nEND;\n$function$\n",
          "name": "grant_pg_net_access",
          "schema": "extensions",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.hmac(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_hmac$function$\n",
          "name": "hmac",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.hmac(text, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_hmac$function$\n",
          "name": "hmac",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone)\n RETURNS SETOF record\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pg_stat_statements', $function$pg_stat_statements_1_11$function$\n",
          "name": "pg_stat_statements",
          "schema": "extensions",
          "returns": "SETOF record",
          "language": "c",
          "signature": "showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone)\n RETURNS record\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pg_stat_statements', $function$pg_stat_statements_info$function$\n",
          "name": "pg_stat_statements_info",
          "schema": "extensions",
          "returns": "record",
          "language": "c",
          "signature": "OUT dealloc bigint, OUT stats_reset timestamp with time zone"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pg_stat_statements_reset(userid oid DEFAULT 0, dbid oid DEFAULT 0, queryid bigint DEFAULT 0, minmax_only boolean DEFAULT false)\n RETURNS timestamp with time zone\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pg_stat_statements', $function$pg_stat_statements_reset_1_11$function$\n",
          "name": "pg_stat_statements_reset",
          "schema": "extensions",
          "returns": "timestamp with time zone",
          "language": "c",
          "signature": "userid oid, dbid oid, queryid bigint, minmax_only boolean"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text)\n RETURNS SETOF record\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_armor_headers$function$\n",
          "name": "pgp_armor_headers",
          "schema": "extensions",
          "returns": "SETOF record",
          "language": "c",
          "signature": "text, OUT key text, OUT value text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_key_id(bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_key_id_w$function$\n",
          "name": "pgp_key_id",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt(bytea, bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n",
          "name": "pgp_pub_decrypt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea, bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n",
          "name": "pgp_pub_decrypt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n",
          "name": "pgp_pub_decrypt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea, bytea, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n",
          "name": "pgp_pub_decrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n",
          "name": "pgp_pub_decrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n",
          "name": "pgp_pub_decrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt(text, bytea)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$\n",
          "name": "pgp_pub_encrypt",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text, bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt(text, bytea, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$\n",
          "name": "pgp_pub_encrypt",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$\n",
          "name": "pgp_pub_encrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$\n",
          "name": "pgp_pub_encrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt(bytea, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$\n",
          "name": "pgp_sym_decrypt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt(bytea, text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$\n",
          "name": "pgp_sym_decrypt",
          "schema": "extensions",
          "returns": "text",
          "language": "c",
          "signature": "bytea, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$\n",
          "name": "pgp_sym_decrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$\n",
          "name": "pgp_sym_decrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt(text, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$\n",
          "name": "pgp_sym_encrypt",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt(text, text, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$\n",
          "name": "pgp_sym_encrypt",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "text, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$\n",
          "name": "pgp_sym_encrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$\n",
          "name": "pgp_sym_encrypt_bytea",
          "schema": "extensions",
          "returns": "bytea",
          "language": "c",
          "signature": "bytea, text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgrst_ddl_watch()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  cmd record;\nBEGIN\n  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()\n  LOOP\n    IF cmd.command_tag IN (\n      'CREATE SCHEMA', 'ALTER SCHEMA'\n    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'\n    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'\n    , 'CREATE VIEW', 'ALTER VIEW'\n    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'\n    , 'CREATE FUNCTION', 'ALTER FUNCTION'\n    , 'CREATE TRIGGER'\n    , 'CREATE TYPE', 'ALTER TYPE'\n    , 'CREATE RULE'\n    , 'COMMENT'\n    )\n    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp\n    AND cmd.schema_name is distinct from 'pg_temp'\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $function$\n",
          "name": "pgrst_ddl_watch",
          "schema": "extensions",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.pgrst_drop_watch()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  obj record;\nBEGIN\n  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n  LOOP\n    IF obj.object_type IN (\n      'schema'\n    , 'table'\n    , 'foreign table'\n    , 'view'\n    , 'materialized view'\n    , 'function'\n    , 'trigger'\n    , 'type'\n    , 'rule'\n    )\n    AND obj.is_temporary IS false -- no pg_temp objects\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $function$\n",
          "name": "pgrst_drop_watch",
          "schema": "extensions",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.set_graphql_placeholder()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\n    DECLARE\n    graphql_is_dropped bool;\n    BEGIN\n    graphql_is_dropped = (\n        SELECT ev.schema_name = 'graphql_public'\n        FROM pg_event_trigger_dropped_objects() AS ev\n        WHERE ev.schema_name = 'graphql_public'\n    );\n\n    IF graphql_is_dropped\n    THEN\n        create or replace function graphql_public.graphql(\n            \"operationName\" text default null,\n            query text default null,\n            variables jsonb default null,\n            extensions jsonb default null\n        )\n            returns jsonb\n            language plpgsql\n        as $$\n            DECLARE\n                server_version float;\n            BEGIN\n                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);\n\n                IF server_version >= 14 THEN\n                    RETURN jsonb_build_object(\n                        'errors', jsonb_build_array(\n                            jsonb_build_object(\n                                'message', 'pg_graphql extension is not enabled.'\n                            )\n                        )\n                    );\n                ELSE\n                    RETURN jsonb_build_object(\n                        'errors', jsonb_build_array(\n                            jsonb_build_object(\n                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'\n                            )\n                        )\n                    );\n                END IF;\n            END;\n        $$;\n    END IF;\n\n    END;\n$function$\n",
          "name": "set_graphql_placeholder",
          "schema": "extensions",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v1()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v1$function$\n",
          "name": "uuid_generate_v1",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v1mc()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v1mc$function$\n",
          "name": "uuid_generate_v1mc",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v3(namespace uuid, name text)\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v3$function$\n",
          "name": "uuid_generate_v3",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": "namespace uuid, name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v4()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v4$function$\n",
          "name": "uuid_generate_v4",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v5(namespace uuid, name text)\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v5$function$\n",
          "name": "uuid_generate_v5",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": "namespace uuid, name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_nil()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_nil$function$\n",
          "name": "uuid_nil",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_dns()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_dns$function$\n",
          "name": "uuid_ns_dns",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_oid()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_oid$function$\n",
          "name": "uuid_ns_oid",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_url()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_url$function$\n",
          "name": "uuid_ns_url",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_x500()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_x500$function$\n",
          "name": "uuid_ns_x500",
          "schema": "extensions",
          "returns": "uuid",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql._internal_resolve(query text, variables jsonb DEFAULT '{}'::jsonb, \"operationName\" text DEFAULT NULL::text, extensions jsonb DEFAULT NULL::jsonb)\n RETURNS jsonb\n LANGUAGE c\nAS '$libdir/pg_graphql', $function$resolve_wrapper$function$\n",
          "name": "_internal_resolve",
          "schema": "graphql",
          "returns": "jsonb",
          "language": "c",
          "signature": "query text, variables jsonb, \"operationName\" text, extensions jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql.comment_directive(comment_ text)\n RETURNS jsonb\n LANGUAGE sql\n IMMUTABLE\nAS $function$\n    /*\n    comment on column public.account.name is '@graphql.name: myField'\n    */\n    select\n        coalesce(\n            (\n                regexp_match(\n                    comment_,\n                    '@graphql\\((.+)\\)'\n                )\n            )[1]::jsonb,\n            jsonb_build_object()\n        )\n$function$\n",
          "name": "comment_directive",
          "schema": "graphql",
          "returns": "jsonb",
          "language": "sql",
          "signature": "comment_ text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql.exception(message text)\n RETURNS text\n LANGUAGE plpgsql\nAS $function$\nbegin\n    raise exception using errcode='22000', message=message;\nend;\n$function$\n",
          "name": "exception",
          "schema": "graphql",
          "returns": "text",
          "language": "plpgsql",
          "signature": "message text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql.get_schema_version()\n RETURNS integer\n LANGUAGE sql\n SECURITY DEFINER\nAS $function$\n    select last_value from graphql.seq_schema_version;\n$function$\n",
          "name": "get_schema_version",
          "schema": "graphql",
          "returns": "integer",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql.increment_schema_version()\n RETURNS event_trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n    perform pg_catalog.nextval('graphql.seq_schema_version');\nend;\n$function$\n",
          "name": "increment_schema_version",
          "schema": "graphql",
          "returns": "event_trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql.resolve(query text, variables jsonb DEFAULT '{}'::jsonb, \"operationName\" text DEFAULT NULL::text, extensions jsonb DEFAULT NULL::jsonb)\n RETURNS jsonb\n LANGUAGE plpgsql\nAS $function$\ndeclare\n    res jsonb;\n    message_text text;\nbegin\n  begin\n    select graphql._internal_resolve(\"query\" := \"query\",\n                                     \"variables\" := \"variables\",\n                                     \"operationName\" := \"operationName\",\n                                     \"extensions\" := \"extensions\") into res;\n    return res;\n  exception\n    when others then\n    get stacked diagnostics message_text = message_text;\n    return\n    jsonb_build_object('data', null,\n                       'errors', jsonb_build_array(jsonb_build_object('message', message_text)));\n  end;\nend;\n$function$\n",
          "name": "resolve",
          "schema": "graphql",
          "returns": "jsonb",
          "language": "plpgsql",
          "signature": "query text, variables jsonb, \"operationName\" text, extensions jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION graphql_public.graphql(\"operationName\" text DEFAULT NULL::text, query text DEFAULT NULL::text, variables jsonb DEFAULT NULL::jsonb, extensions jsonb DEFAULT NULL::jsonb)\n RETURNS jsonb\n LANGUAGE sql\nAS $function$\n            select graphql.resolve(\n                query := query,\n                variables := coalesce(variables, '{}'),\n                \"operationName\" := \"operationName\",\n                extensions := extensions\n            );\n        $function$\n",
          "name": "graphql",
          "schema": "graphql_public",
          "returns": "jsonb",
          "language": "sql",
          "signature": "\"operationName\" text, query text, variables jsonb, extensions jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION pgbouncer.get_auth(p_usename text)\n RETURNS TABLE(username text, password text)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n    raise debug 'PgBouncer auth request: %', p_usename;\n\n    return query\n    select \n        rolname::text, \n        case when rolvaliduntil < now() \n            then null \n            else rolpassword::text \n        end \n    from pg_authid \n    where rolname=$1 and rolcanlogin;\nend;\n$function$\n",
          "name": "get_auth",
          "schema": "pgbouncer",
          "returns": "TABLE(username text, password text)",
          "language": "plpgsql",
          "signature": "p_usename text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION private.get_secret(p_key text)\n RETURNS text\n LANGUAGE sql\n STABLE SECURITY DEFINER\nAS $function$ select v from private.kv_secrets where k = p_key; $function$\n",
          "name": "get_secret",
          "schema": "private",
          "returns": "text",
          "language": "sql",
          "signature": "p_key text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION private.is_sql_console()\n RETURNS boolean\n LANGUAGE plpgsql\n STABLE\nAS $function$\r\nbegin\r\n  return current_setting('request.jwt.claims', true) is null;\r\nend;\r\n$function$\n",
          "name": "is_sql_console",
          "schema": "private",
          "returns": "boolean",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._add_col_if_missing(p_table regclass, p_col text, p_type text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  if not exists (\r\n    select 1\r\n    from pg_attribute\r\n    where attrelid = p_table\r\n      and attname  = p_col\r\n      and not attisdropped\r\n  ) then\r\n    execute format('alter table %s add column %I %s', p_table, p_col, p_type);\r\n  end if;\r\nend\r\n$function$\n",
          "name": "_add_col_if_missing",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_table regclass, p_col text, p_type text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._add_idx_if_missing(p_name text, p_table regclass, p_cols text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\ndeclare\r\n  v_schema text;\r\nbegin\r\n  -- استخرج الـ schema الحقيقي للجدول من الـ OID\r\n  select n.nspname\r\n    into v_schema\r\n  from pg_class c\r\n  join pg_namespace n on n.oid = c.relnamespace\r\n  where c.oid = p_table;\r\n\r\n  -- لا تُنشئ الفهرس إن كان موجودًا بنفس الاسم داخل نفس الـ schema\r\n  if not exists (\r\n    select 1\r\n    from pg_indexes\r\n    where schemaname = v_schema\r\n      and indexname  = p_name\r\n  ) then\r\n    execute format('create index %I on %s (%s)', p_name, p_table, p_cols);\r\n  end if;\r\nend\r\n$function$\n",
          "name": "_add_idx_if_missing",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_name text, p_table regclass, p_cols text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._apply_default_rls(table_name text)\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  execute format('alter table public.%I enable row level security', table_name);\r\n\r\n  if not exists (\r\n    select 1 from pg_policies where schemaname='public' and tablename=table_name and policyname='acct_sel_'||table_name\r\n  ) then\r\n    execute format($q$\r\n      create policy %I on public.%I\r\n      for select using (account_id = public.get_my_account_id())\r\n    $q$, 'acct_sel_'||table_name, table_name);\r\n  end if;\r\n\r\n  if not exists (\r\n    select 1 from pg_policies where schemaname='public' and tablename=table_name and policyname='acct_ins_'||table_name\r\n  ) then\r\n    execute format($q$\r\n      create policy %I on public.%I\r\n      for insert with check (account_id = public.get_my_account_id())\r\n    $q$, 'acct_ins_'||table_name, table_name);\r\n  end if;\r\n\r\n  if not exists (\r\n    select 1 from pg_policies where schemaname='public' and tablename=table_name and policyname='acct_upd_'||table_name\r\n  ) then\r\n    execute format($q$\r\n      create policy %I on public.%I\r\n      for update using (account_id = public.get_my_account_id())\r\n      with check (account_id = public.get_my_account_id())\r\n    $q$, 'acct_upd_'||table_name, table_name);\r\n  end if;\r\n\r\n  if not exists (\r\n    select 1 from pg_policies where schemaname='public' and tablename=table_name and policyname='acct_del_'||table_name\r\n  ) then\r\n    execute format($q$\r\n      create policy %I on public.%I\r\n      for delete using (account_id = public.get_my_account_id())\r\n    $q$, 'acct_del_'||table_name, table_name);\r\n  end if;\r\n\r\n  execute format(\r\n    'create unique index if not exists %I on public.%I (account_id, device_id, local_id)',\r\n    'uidx_'||table_name||'_sync_key', table_name\r\n  );\r\nend $function$\n",
          "name": "_apply_default_rls",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "table_name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._count_exact(p_schema text, p_table text)\n RETURNS bigint\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nDECLARE cnt bigint;\r\nBEGIN\r\n  EXECUTE format('SELECT COUNT(*) FROM %I.%I', p_schema, p_table) INTO cnt;\r\n  RETURN cnt;\r\nEND$function$\n",
          "name": "_count_exact",
          "schema": "public",
          "returns": "bigint",
          "language": "plpgsql",
          "signature": "p_schema text, p_table text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._policy_exists(_tbl text, _name text)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  SELECT EXISTS (\r\n    SELECT 1 FROM pg_policies\r\n    WHERE schemaname = 'public'\r\n      AND tablename = _tbl\r\n      AND policyname = _name\r\n  );\r\n$function$\n",
          "name": "_policy_exists",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "_tbl text, _name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._purchases_fill_total()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  v_unit_price numeric;\r\n  v_quantity   numeric;\r\nBEGIN\r\n  IF NEW.total IS NULL THEN\r\n    BEGIN\r\n      v_unit_price := NULLIF( (to_jsonb(NEW)->>'unit_price'), '' )::numeric;\r\n    EXCEPTION WHEN invalid_text_representation THEN\r\n      v_unit_price := NULL;\r\n    END;\r\n\r\n    BEGIN\r\n      v_quantity := NULLIF( (to_jsonb(NEW)->>'quantity'), '' )::numeric;\r\n    EXCEPTION WHEN invalid_text_representation THEN\r\n      v_quantity := NULL;\r\n    END;\r\n\r\n    IF v_unit_price IS NOT NULL AND v_quantity IS NOT NULL THEN\r\n      NEW.total := v_quantity * v_unit_price;\r\n    END IF;\r\n  END IF;\r\n\r\n  RETURN NEW;\r\nEND\r\n$function$\n",
          "name": "_purchases_fill_total",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._resolve_conversation_and_account(p_any_id text)\n RETURNS TABLE(conv_id_text text, account_id uuid)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- Try as conversation id\r\n  RETURN QUERY\r\n  SELECT c.id::text, c.account_id\r\n  FROM public.chat_conversations c\r\n  WHERE c.id::text = p_any_id\r\n  LIMIT 1;\r\n  IF FOUND THEN RETURN; END IF;\r\n\r\n  -- Try as message id\r\n  RETURN QUERY\r\n  SELECT m.conversation_id::text, c.account_id\r\n  FROM public.chat_messages m\r\n  JOIN public.chat_conversations c ON c.id = m.conversation_id\r\n  WHERE m.id::text = p_any_id\r\n  LIMIT 1;\r\nEND\r\n$function$\n",
          "name": "_resolve_conversation_and_account",
          "schema": "public",
          "returns": "TABLE(conv_id_text text, account_id uuid)",
          "language": "plpgsql",
          "signature": "p_any_id text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public._ts_set()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF TG_OP = 'INSERT' THEN\r\n    IF NEW.created_at IS NULL THEN NEW.created_at := now(); END IF;\r\n    IF NEW.updated_at IS NULL THEN NEW.updated_at := now(); END IF;\r\n  ELSE\r\n    NEW.updated_at := now();\r\n  END IF;\r\n  RETURN NEW;\r\nEND $function$\n",
          "name": "_ts_set",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.account_id_of()\n RETURNS uuid\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select au.account_id\r\n  from public.account_users au\r\n  where au.user_uid = auth.uid()\r\n  limit 1\r\n$function$\n",
          "name": "account_id_of",
          "schema": "public",
          "returns": "uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.account_id_of(p_user uuid)\n RETURNS uuid\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select au.account_id\r\n  from public.account_users au\r\n  where au.user_uid = p_user\r\n    and coalesce(au.disabled,false) = false\r\n  limit 1\r\n$function$\n",
          "name": "account_id_of",
          "schema": "public",
          "returns": "uuid",
          "language": "sql",
          "signature": "p_user uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.account_is_owner(p_account uuid, p_uid uuid DEFAULT auth.uid())\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select exists (\r\n    select 1 from public.accounts a\r\n    where a.id = p_account and a.owner_uid = coalesce(p_uid, auth.uid())\r\n  );\r\n$function$\n",
          "name": "account_is_owner",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account uuid, p_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.account_not_frozen(p_account uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select coalesce( (select not a.frozen from public.accounts a where a.id = p_account), false );\r\n$function$\n",
          "name": "account_not_frozen",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_attach_employee(p_account uuid, p_user_uid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\nbegin\r\n  -- اسمح من SQL Editor (claims غير موجودة) أو من السوبر أدمن،\r\n  -- أو من مالك الحساب نفسه. غير ذلك -> forbidden.\r\n  if not private.is_sql_console() and not public.is_super_admin() then\r\n    if not exists (\r\n      select 1\r\n      from public.accounts a\r\n      where a.id = p_account\r\n        and a.owner_uid = auth.uid()\r\n    ) then\r\n      raise exception 'forbidden';\r\n    end if;\r\n  end if;\r\n\r\n  -- اربط/حدّث الموظف على الحساب\r\n  insert into public.account_users(account_id, user_uid, role, disabled)\r\n  values (p_account, p_user_uid, 'employee', false)\r\n  on conflict (account_id, user_uid)\r\n  do update set role = excluded.role, disabled = false;\r\nend;\r\n$function$\n",
          "name": "admin_attach_employee",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account uuid, p_user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_bootstrap_clinic_for_email(p_email text, p_name text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  v_uid     uuid;\r\n  v_account uuid;\r\nbegin\r\n  -- اسمح من SQL Editor (claims غير موجودة) أو من السوبر أدمن في التطبيق\r\n  if not private.is_sql_console() and not public.is_super_admin() then\r\n    raise exception 'not allowed';\r\n  end if;\r\n\r\n  -- تأكيد وجود المستخدم في auth.users\r\n  select u.id into v_uid\r\n  from auth.users u\r\n  where lower(u.email) = lower(p_email)\r\n  limit 1;\r\n\r\n  if v_uid is null then\r\n    raise exception 'owner email does not exist in auth.users';\r\n  end if;\r\n\r\n  -- ✅ أنشئ حساب العيادة مع owner_uid\r\n  insert into public.accounts (name, owner_uid)\r\n  values (p_name, v_uid)\r\n  returning id into v_account;\r\n\r\n  -- اربط المالك كـ owner\r\n  insert into public.account_users(account_id, user_uid, role, disabled)\r\n  values (v_account, v_uid, 'owner', false)\r\n  on conflict do nothing;\r\n\r\n  -- ثبّت/حدّث الـ profile\r\n  insert into public.profiles(id, role, account_id)\r\n  values (v_uid, 'owner', v_account)\r\n  on conflict (id) do update\r\n    set role = excluded.role,\r\n        account_id = excluded.account_id;\r\n\r\n  return v_account;\r\nend;\r\n$function$\n",
          "name": "admin_bootstrap_clinic_for_email",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "p_email text, p_name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_bootstrap_clinic_for_me(p_name text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  v_acc uuid;\r\n  v_uid uuid := (select app.jwt_uid());\r\nbegin\r\n  if not app.is_super_admin() then\r\n    raise exception 'not allowed';\r\n  end if;\r\n\r\n  -- أنشئ حساب (عيادة) إن لم يوجد بنفس الاسم\r\n  insert into public.accounts(name) values (p_name)\r\n  returning id into v_acc;\r\n\r\n  -- اربط المستخدم الحالي كـ owner\r\n  insert into public.account_users(account_id, user_uid, role)\r\n  values (v_acc, v_uid, 'owner')\r\n  on conflict do nothing;\r\n\r\n  -- عيّنه كحساب افتراضي بالبروفايل\r\n  insert into public.profiles(id, account_id, role)\r\n  values (v_uid, v_acc, 'owner')\r\n  on conflict (id) do update\r\n     set account_id = excluded.account_id,\r\n         role       = excluded.role;\r\n\r\n  return v_acc;\r\nend;\r\n$function$\n",
          "name": "admin_bootstrap_clinic_for_me",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "p_name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_create_employee_full(p_account uuid, p_email text, p_password text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  v_uid     uuid;\r\n  v_service text := private.get_secret('SERVICE_ROLE_KEY');\r\n  v_url     text := private.get_secret('SUPABASE_URL');\r\n  v_resp    http_response;\r\nbegin\r\n  if not private.is_sql_console() and not public.is_super_admin() then\r\n    raise exception 'forbidden';\r\n  end if;\r\n\r\n  if coalesce(v_service,'') = '' or coalesce(v_url,'') = '' then\r\n    raise exception 'Missing SERVICE_ROLE_KEY or SUPABASE_URL secret';\r\n  end if;\r\n\r\n  -- 1) هل يوجد المستخدم؟\r\n  select u.id into v_uid\r\n  from auth.users u\r\n  where lower(u.email) = lower(p_email)\r\n  limit 1;\r\n\r\n  -- 1-b) إن لم يوجد: أنشئه عبر REST Admin\r\n  if v_uid is null then\r\n    select r.* into v_resp\r\n    from public.http(\r\n      ROW(\r\n        'POST'::text,\r\n        v_url || '/auth/v1/admin/users',\r\n        ARRAY[\r\n          ('apikey',        v_service)::public.http_header,\r\n          ('authorization', 'Bearer '||v_service)::public.http_header\r\n        ]::public.http_header[],\r\n        'application/json'::text,                              -- ④ content_type\r\n        json_build_object(                                     -- ⑤ content كنص\r\n          'email',         p_email,\r\n          'password',      p_password,\r\n          'email_confirm', true\r\n        )::text\r\n      )::public.http_request\r\n    ) as r;\r\n\r\n    if v_resp.status < 200 or v_resp.status >= 300 then\r\n      raise exception 'Auth Admin create user failed: % %', v_resp.status, v_resp.content;\r\n    end if;\r\n\r\n    select u.id into v_uid\r\n    from auth.users u\r\n    where lower(u.email) = lower(p_email)\r\n    limit 1;\r\n\r\n    if v_uid is null then\r\n      raise exception 'Unable to create/find employee in auth.users';\r\n    end if;\r\n  end if;\r\n\r\n  -- 2) ربطه بالحساب\r\n  perform public.admin_attach_employee(p_account, v_uid);\r\n\r\n  -- 3) profile\r\n  insert into public.profiles(id, role, account_id)\r\n  values (v_uid, 'employee', p_account)\r\n  on conflict (id) do update\r\n    set role = excluded.role, account_id = excluded.account_id;\r\n\r\n  return jsonb_build_object('ok', true, 'user_uid', v_uid);\r\nend;\r\n$function$\n",
          "name": "admin_create_employee_full",
          "schema": "public",
          "returns": "jsonb",
          "language": "plpgsql",
          "signature": "p_account uuid, p_email text, p_password text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_create_owner_full(p_clinic_name text, p_owner_email text, p_owner_password text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  v_uid     uuid;\r\n  v_account uuid;\r\n  v_service text := private.get_secret('SERVICE_ROLE_KEY');\r\n  v_url     text := private.get_secret('SUPABASE_URL');\r\n  v_resp    http_response;\r\nbegin\r\n  -- سماح من SQL Editor أو من التطبيق إذا كان سوبر أدمن\r\n  if not private.is_sql_console() and not public.is_super_admin() then\r\n    raise exception 'forbidden';\r\n  end if;\r\n\r\n  if coalesce(v_service,'') = '' or coalesce(v_url,'') = '' then\r\n    raise exception 'Missing SERVICE_ROLE_KEY or SUPABASE_URL secret';\r\n  end if;\r\n\r\n  -- 1) هل يوجد المستخدم؟\r\n  select u.id into v_uid\r\n  from auth.users u\r\n  where lower(u.email) = lower(p_owner_email)\r\n  limit 1;\r\n\r\n  -- 1-b) إن لم يوجد: أنشئه عبر REST Admin\r\n  if v_uid is null then\r\n    select r.* into v_resp\r\n    from public.http(\r\n      ROW(\r\n        'POST'::text,\r\n        v_url || '/auth/v1/admin/users',\r\n        ARRAY[\r\n          ('apikey',        v_service)::public.http_header,\r\n          ('authorization', 'Bearer '||v_service)::public.http_header\r\n        ]::public.http_header[],\r\n        'application/json'::text,                              -- ④ content_type\r\n        json_build_object(                                     -- ⑤ content كنص عادي\r\n          'email',         p_owner_email,\r\n          'password',      p_owner_password,\r\n          'email_confirm', true\r\n        )::text\r\n      )::public.http_request\r\n    ) as r;\r\n\r\n    if v_resp.status < 200 or v_resp.status >= 300 then\r\n      raise exception 'Auth Admin create user failed: % %', v_resp.status, v_resp.content;\r\n    end if;\r\n\r\n    select u.id into v_uid\r\n    from auth.users u\r\n    where lower(u.email) = lower(p_owner_email)\r\n    limit 1;\r\n\r\n    if v_uid is null then\r\n      raise exception 'Unable to create/find owner in auth.users';\r\n    end if;\r\n  end if;\r\n\r\n  -- 2) بناء حساب العيادة (دالتك القائمة)\r\n  v_account := public.admin_bootstrap_clinic_for_email(p_owner_email, p_clinic_name);\r\n\r\n  -- 3) تحديث/إنشاء profile\r\n  insert into public.profiles(id, role, account_id)\r\n  values (v_uid, 'owner', v_account)\r\n  on conflict (id) do update\r\n    set role = excluded.role, account_id = excluded.account_id;\r\n\r\n  return jsonb_build_object('ok', true, 'account_id', v_account, 'owner_uid', v_uid);\r\nend;\r\n$function$\n",
          "name": "admin_create_owner_full",
          "schema": "public",
          "returns": "jsonb",
          "language": "plpgsql",
          "signature": "p_clinic_name text, p_owner_email text, p_owner_password text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_delete_clinic(p_account_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- المالك فقط\r\n  if not exists (\r\n    select 1 from accounts a where a.id = p_account_id and a.owner_uid = auth.uid()\r\n  ) then\r\n    raise exception 'forbidden';\r\n  end if;\r\n\r\n  -- نظّف العضويات أولاً، ثم احذف الحساب\r\n  delete from account_users where account_id = p_account_id;\r\n  delete from accounts      where id = p_account_id;\r\nend;\r\n$function$\n",
          "name": "admin_delete_clinic",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_link_member(p_account uuid, p_user_uid uuid, p_role text DEFAULT 'employee'::text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\nbegin\r\n  -- لابد يكون المنفّذ سوبر أدمن أو Owner/Admin في نفس الحساب\r\n  if not (\r\n    app.is_super_admin()\r\n    or exists (\r\n      select 1 from public.account_users\r\n      where account_id = p_account\r\n        and user_uid   = app.jwt_uid()\r\n        and disabled   = false\r\n        and role in ('owner','admin')\r\n    )\r\n  ) then\r\n    raise exception 'not allowed';\r\n  end if;\r\n\r\n  if p_role not in ('owner','admin','employee') then\r\n    raise exception 'invalid role %', p_role;\r\n  end if;\r\n\r\n  if exists (select 1 from public.accounts where id = p_account and frozen) then\r\n    raise exception 'account is frozen';\r\n  end if;\r\n\r\n  -- تأكد من وجود بروفايل\r\n  insert into public.profiles(id) values (p_user_uid)\r\n  on conflict (id) do nothing;\r\n\r\n  -- Upsert للعضوية\r\n  insert into public.account_users(account_id, user_uid, role, disabled)\r\n  values (p_account, p_user_uid, p_role, false)\r\n  on conflict (account_id, user_uid) do update\r\n    set role = excluded.role,\r\n        disabled = false;\r\n\r\n  -- حدّث الحساب الافتراضي والدور في profiles\r\n  update public.profiles\r\n     set account_id = p_account,\r\n         role = p_role\r\n   where id = p_user_uid;\r\nend;\r\n$function$\n",
          "name": "admin_link_member",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account uuid, p_user_uid uuid, p_role text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_link_member_by_email(p_account uuid, p_email text, p_role text DEFAULT 'employee'::text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  v_uid uuid;\r\nbegin\r\n  select id into v_uid from auth.users where lower(email) = lower(p_email);\r\n  if v_uid is null then\r\n    raise exception 'user with email % not found', p_email;\r\n  end if;\r\n  perform public.admin_link_member(p_account := p_account, p_user_uid := v_uid, p_role := p_role);\r\nend;\r\n$function$\n",
          "name": "admin_link_member_by_email",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account uuid, p_email text, p_role text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_list_clinics()\n RETURNS TABLE(id uuid, name text, frozen boolean, created_at timestamp with time zone)\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- اسمّح فقط لبريد السوبر أدمن أو role=superadmin\r\n  if lower(coalesce(auth.jwt()->>'email','')) <> 'aelmam.app@gmail.com'\r\n     and lower(coalesce(auth.jwt()->>'role','')) <> 'superadmin' then\r\n    raise exception 'forbidden' using errcode='42501';\r\n  end if;\r\n\r\n  return query\r\n  select a.id,\r\n         a.name,\r\n         coalesce(a.frozen, false) as frozen,\r\n         a.created_at::timestamptz\r\n  from public.accounts a;  -- ✅ بدون شرط a.deleted\r\nend;\r\n$function$\n",
          "name": "admin_list_clinics",
          "schema": "public",
          "returns": "TABLE(id uuid, name text, frozen boolean, created_at timestamp with time zone)",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_register_owner(p_clinic_name text, p_owner_uid uuid)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  v_account_id uuid := gen_random_uuid();\r\nbegin\r\n  if not public.is_super_admin() then\r\n    raise exception 'forbidden' using errcode='P0001';\r\n  end if;\r\n\r\n  insert into public.accounts (id, name, owner_uid)\r\n  values (v_account_id, p_clinic_name, p_owner_uid);\r\n\r\n  insert into public.account_users (account_id, user_uid, role, disabled)\r\n  values (v_account_id, p_owner_uid, 'owner', false)\r\n  on conflict (account_id, user_uid)\r\n  do update set role = excluded.role, disabled = false;\r\n\r\n  return v_account_id;\r\nend;\r\n$function$\n",
          "name": "admin_register_owner",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "p_clinic_name text, p_owner_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.admin_set_clinic_frozen(p_account_id uuid, p_frozen boolean)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- المالك فقط (السوبر أدمن يُفترض عبر الـ Functions)\r\n  if not exists (\r\n    select 1 from accounts a where a.id = p_account_id and a.owner_uid = auth.uid()\r\n  ) then\r\n    raise exception 'forbidden';\r\n  end if;\r\n\r\n  update accounts set frozen = coalesce(p_frozen,false) where id = p_account_id;\r\nend;\r\n$function$\n",
          "name": "admin_set_clinic_frozen",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account_id uuid, p_frozen boolean"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.aelmam_cloud_diagnostics(super_email text DEFAULT 'aelmam.app@gmail.com'::text, owner_email text DEFAULT NULL::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\ndeclare\r\n  -- أقسام التقرير كـ JSONB\r\n  who               jsonb := '{}'::jsonb;\r\n  exts              jsonb := '[]'::jsonb;\r\n  sa_exists         boolean;\r\n  sa_col            text;\r\n  suid              uuid;\r\n  sa_in             boolean;\r\n  sa_suggestion     text;\r\n  super_admins_json jsonb := '{}'::jsonb;\r\n\r\n  tables_json       jsonb := '[]'::jsonb;\r\n  columns_json      jsonb := '[]'::jsonb;\r\n  policies_json     jsonb := '[]'::jsonb;\r\n  grants_json       jsonb := '[]'::jsonb;\r\n  funcs_json        jsonb := '[]'::jsonb;\r\n  super_profile     jsonb := '{}'::jsonb;\r\n  owner_check       jsonb := null;\r\n  constraints_json  jsonb := '[]'::jsonb;\r\n  rowcounts_json    jsonb := '[]'::jsonb;\r\n  schema_usage      jsonb := '[]'::jsonb;\r\n\r\n  _rows             bigint;\r\n  _t                text;\r\nbegin\r\n  -- 0) من أنا؟\r\n  who := jsonb_build_object(\r\n    'current_user', current_user,\r\n    'session_user', session_user,\r\n    'jwt_uid', auth.uid(),\r\n    'server_time', now(),\r\n    'jwt_sub_claim', current_setting('request.jwt.claim.sub', true)\r\n  );\r\n\r\n  -- 1) الامتدادات\r\n  select coalesce(\r\n           jsonb_agg(jsonb_build_object('extname', extname, 'extversion', extversion)),\r\n           '[]'::jsonb\r\n         )\r\n    into exts\r\n  from pg_extension\r\n  where extname in ('pgcrypto');\r\n\r\n  -- 2) super_admins (يتعامل مع user_id/user_uid ديناميكيًا)\r\n  sa_exists := to_regclass('public.super_admins') is not null;\r\n  if sa_exists then\r\n    select column_name into sa_col\r\n    from information_schema.columns\r\n    where table_schema='public' and table_name='super_admins'\r\n      and column_name in ('user_id','user_uid')\r\n    limit 1;\r\n  end if;\r\n\r\n  select u.id into suid\r\n  from auth.users u\r\n  where lower(u.email)=lower(coalesce(super_email,'')) limit 1;\r\n\r\n  if sa_exists and sa_col is not null and suid is not null then\r\n    execute format('select exists (select 1 from public.super_admins where %I = $1)', sa_col)\r\n      into sa_in\r\n      using suid;\r\n  else\r\n    sa_in := null;\r\n  end if;\r\n\r\n  if not sa_exists then\r\n    sa_suggestion := '/* super_admins table missing */ create table public.super_admins (user_id uuid primary key references auth.users(id) on delete cascade);';\r\n  elsif suid is null then\r\n    sa_suggestion := '/* super admin email not found in auth.users */';\r\n  elsif sa_col is null then\r\n    sa_suggestion := '/* Unknown column in super_admins (expected user_id or user_uid) */';\r\n  elsif not coalesce(sa_in,false) then\r\n    sa_suggestion := '/* Run if needed: */ insert into public.super_admins('||sa_col||') values ('''||suid::text||''');';\r\n  else\r\n    sa_suggestion := 'Super admin already present.';\r\n  end if;\r\n\r\n  super_admins_json := jsonb_build_object(\r\n    'table_exists', sa_exists,\r\n    'column', sa_col,\r\n    'super_uid', suid,\r\n    'in_super_admins', sa_in,\r\n    'suggested_fix', sa_suggestion\r\n  );\r\n\r\n  -- 3) الجداول الأساسية + RLS + عدد السياسات\r\n  with t(tname) as (\r\n    values ('accounts'), ('account_users'), ('profiles'), ('audit_logs'), ('account_feature_permissions')\r\n  )\r\n  select coalesce(jsonb_agg(jsonb_build_object(\r\n           'table', tname,\r\n           'exists', to_regclass('public.'||tname) is not null,\r\n           'rls_enabled', (select relrowsecurity from pg_class where oid = to_regclass('public.'||tname)),\r\n           'rls_forced',  (select relforcerowsecurity from pg_class where oid = to_regclass('public.'||tname)),\r\n           'policy_count', coalesce((select count(*) from pg_policies p where p.schemaname='public' and p.tablename=tname),0)\r\n         ) order by tname), '[]'::jsonb)\r\n    into tables_json\r\n  from t;\r\n\r\n  -- 4) أعمدة الجداول\r\n  select coalesce(jsonb_agg(jsonb_build_object(\r\n           'table', table_name,\r\n           'column', column_name,\r\n           'type', data_type,\r\n           'nullable', (is_nullable='YES'),\r\n           'default', column_default\r\n         ) order by table_name, ordinal_position), '[]'::jsonb)\r\n    into columns_json\r\n  from information_schema.columns\r\n  where table_schema='public'\r\n    and table_name in ('accounts','account_users','profiles','audit_logs','account_feature_permissions','super_admins');\r\n\r\n  -- 5) السياسات\r\n  select coalesce(jsonb_agg(jsonb_build_object(\r\n           'table', tablename,\r\n           'policy', policyname,\r\n           'permissive', permissive,\r\n           'roles', roles,\r\n           'cmd', cmd,\r\n           'qual', qual,\r\n           'with_check', with_check\r\n         ) order by tablename, policyname), '[]'::jsonb)\r\n    into policies_json\r\n  from pg_policies\r\n  where schemaname='public'\r\n    and tablename in ('accounts','account_users','profiles','audit_logs','account_feature_permissions');\r\n\r\n  -- 6) GRANTS\r\n  select coalesce(jsonb_agg(x) ,'[]'::jsonb) into grants_json\r\n  from (\r\n    select jsonb_build_object(\r\n             'table', table_name,\r\n             'grantee', grantee,\r\n             'privileges', string_agg(privilege_type, ',' order by privilege_type)\r\n           ) as x\r\n    from information_schema.table_privileges\r\n    where table_schema='public'\r\n      and table_name in ('accounts','account_users','profiles','audit_logs','account_feature_permissions')\r\n      and grantee in ('anon','authenticated')\r\n    group by table_name, grantee\r\n    order by table_name, grantee\r\n  ) s;\r\n\r\n  -- 7) الدوال المطلوبة\r\n  with wanted(proname) as (\r\n    values\r\n      ('my_account_id'),\r\n      ('my_accounts'),\r\n      ('my_profile'),\r\n      ('my_feature_permissions'),\r\n      ('admin_bootstrap_clinic_for_email'),\r\n      ('admin_set_clinic_frozen'),\r\n      ('admin_delete_clinic'),\r\n      ('set_employee_disabled'),\r\n      ('delete_employee'),\r\n      ('admin__create_clinic_owner'),\r\n      ('admin_create_clinic_owner'),\r\n      ('create_clinic_owner'),\r\n      ('create_owner'),\r\n      ('admin__create_employee'),\r\n      ('admin_create_employee'),\r\n      ('create_employee'),\r\n      ('admin_register_owner'),\r\n      ('admin_attach_employee'),\r\n      ('admin__ensure_user')\r\n  )\r\n  select coalesce(jsonb_agg(jsonb_build_object(\r\n           'name', w.proname,\r\n           'exists', (p.oid is not null),\r\n           'signature', case when p.oid is not null then p.oid::regprocedure::text end,\r\n           'schema', n.nspname,\r\n           'security_definer', p.prosecdef,\r\n           'owner_role', r.rolname,\r\n           'lang', l.lanname,\r\n           'exec_for_authenticated', case when p.oid is not null then has_function_privilege('authenticated', p.oid, 'EXECUTE') end,\r\n           'exec_for_anon',          case when p.oid is not null then has_function_privilege('anon',          p.oid, 'EXECUTE') end\r\n         ) order by w.proname), '[]'::jsonb)\r\n    into funcs_json\r\n  from wanted w\r\n  left join pg_proc p on p.proname = w.proname\r\n  left join pg_namespace n on n.oid = p.pronamespace\r\n  left join pg_roles r on r.oid = p.proowner\r\n  left join pg_language l on l.oid = p.prolang\r\n  where (n.nspname is null or n.nspname='public');\r\n\r\n  -- 9) بروفايل السوبر أدمن\r\n  select to_jsonb(x) into super_profile\r\n  from (\r\n    select u.id as uid, u.email, p.account_id, p.role\r\n    from auth.users u\r\n    left join public.profiles p on p.id = u.id\r\n    where lower(u.email) = lower(coalesce(super_email,''))\r\n    limit 1\r\n  ) x;\r\n\r\n  -- 10) فحص بريد مالك (اختياري)\r\n  if owner_email is not null and length(owner_email) > 0 then\r\n    select to_jsonb(y) into owner_check\r\n    from (\r\n      select u.id as owner_uid, u.email, p.account_id as profile_account_id\r\n      from auth.users u\r\n      left join public.profiles p on p.id = u.id\r\n      where lower(u.email)=lower(owner_email)\r\n      limit 1\r\n    ) y;\r\n  end if;\r\n\r\n  -- 11) قيود وفهارس\r\n  select coalesce(jsonb_agg(jsonb_build_object(\r\n           'table', table_name,\r\n           'type', constraint_type,\r\n           'name', constraint_name\r\n         ) order by table_name, constraint_type), '[]'::jsonb)\r\n    into constraints_json\r\n  from information_schema.table_constraints\r\n  where table_schema='public'\r\n    and table_name in ('accounts','account_users','profiles','audit_logs','account_feature_permissions');\r\n\r\n  -- 12) عدد الصفوف (يتخطّى الجداول الغير موجودة بأمان)\r\n  rowcounts_json := '[]'::jsonb;\r\n  for _t in select unnest(array['accounts','account_users','profiles','audit_logs','account_feature_permissions']) loop\r\n    if to_regclass('public.'||_t) is not null then\r\n      execute format('select count(*)::bigint from public.%I', _t) into _rows;\r\n    else\r\n      _rows := null;\r\n    end if;\r\n    rowcounts_json := rowcounts_json || jsonb_build_array(jsonb_build_object('table', _t, 'rows', _rows));\r\n  end loop;\r\n\r\n  -- 13) صلاحية USAGE على السكيما\r\n  select coalesce(\r\n           jsonb_agg(jsonb_build_object(\r\n             'schema', n.nspname,\r\n             'authenticated_has_usage', has_schema_privilege('authenticated', n.oid, 'USAGE'),\r\n             'anon_has_usage',          has_schema_privilege('anon',          n.oid, 'USAGE')\r\n           )),\r\n           '[]'::jsonb\r\n         )\r\n    into schema_usage\r\n  from pg_namespace n\r\n  where n.nspname in ('public');\r\n\r\n  -- تجميع التقرير الكامل\r\n  return jsonb_build_object(\r\n    'whoami', who,\r\n    'extensions', exts,\r\n    'super_admins', super_admins_json,\r\n    'tables', tables_json,\r\n    'columns', columns_json,\r\n    'policies', policies_json,\r\n    'grants', grants_json,\r\n    'functions', funcs_json,\r\n    'super_profile', super_profile,\r\n    'owner_check', owner_check,\r\n    'constraints', constraints_json,\r\n    'row_counts', rowcounts_json,\r\n    'schema_usage', schema_usage\r\n  );\r\nend\r\n$function$\n",
          "name": "aelmam_cloud_diagnostics",
          "schema": "public",
          "returns": "jsonb",
          "language": "plpgsql",
          "signature": "super_email text, owner_email text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.app_is_super_admin()\n RETURNS boolean\n LANGUAGE plpgsql\n STABLE\nAS $function$\r\nDECLARE\r\n  cur_email text := lower(coalesce(auth.email(), ''));\r\n  cur_uid   uuid := auth.uid();\r\n  v boolean := false;\r\nBEGIN\r\n  -- بريد سوبر افتراضي\r\n  IF cur_email = 'aelmam.app@gmail.com' THEN\r\n    RETURN true;\r\n  END IF;\r\n\r\n  -- جدول super_admins (اختياري/متعدد الحقول)\r\n  IF EXISTS (SELECT 1 FROM information_schema.tables\r\n             WHERE table_schema='public' AND table_name='super_admins') THEN\r\n    -- بالـ email\r\n    IF EXISTS (SELECT 1 FROM information_schema.columns\r\n               WHERE table_schema='public' AND table_name='super_admins' AND column_name='email') THEN\r\n      SELECT true INTO v\r\n      FROM public.super_admins s\r\n      WHERE lower(coalesce(s.email,'')) = cur_email\r\n      LIMIT 1;\r\n      IF v THEN RETURN true; END IF;\r\n    END IF;\r\n\r\n    -- بالـ user_id\r\n    IF EXISTS (SELECT 1 FROM information_schema.columns\r\n               WHERE table_schema='public' AND table_name='super_admins' AND column_name='user_id') THEN\r\n      SELECT true INTO v\r\n      FROM public.super_admins s\r\n      WHERE s.user_id = cur_uid\r\n      LIMIT 1;\r\n      IF v THEN RETURN true; END IF;\r\n    END IF;\r\n\r\n    -- بالـ id (uuid)\r\n    IF EXISTS (SELECT 1 FROM information_schema.columns\r\n               WHERE table_schema='public' AND table_name='super_admins' AND column_name='id') THEN\r\n      SELECT true INTO v\r\n      FROM public.super_admins s\r\n      WHERE s.id = cur_uid\r\n      LIMIT 1;\r\n      IF v THEN RETURN true; END IF;\r\n    END IF;\r\n  END IF;\r\n\r\n  RETURN false;\r\nEND\r\n$function$\n",
          "name": "app_is_super_admin",
          "schema": "public",
          "returns": "boolean",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.apply_rls_policy()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE table_name text;\r\nBEGIN\r\n  FOR table_name IN\r\n    SELECT tablename\r\n    FROM pg_tables\r\n    WHERE schemaname = 'public'\r\n      AND tablename NOT IN ('accounts','profiles','schema_migrations')\r\n  LOOP\r\n    EXECUTE format('DROP POLICY IF EXISTS rls_%1$s ON %1$I;', table_name);\r\n    EXECUTE format($SQL$\r\n      CREATE POLICY rls_%1$s ON %1$I\r\n      FOR ALL TO authenticated\r\n      USING ( account_id IN (SELECT account_id FROM profiles WHERE id = auth.uid()) )\r\n      WITH CHECK ( account_id IN (SELECT account_id FROM profiles WHERE id = auth.uid()) );\r\n    $SQL$, table_name);\r\n    EXECUTE format('ALTER TABLE %I FORCE ROW LEVEL SECURITY;', table_name);\r\n  END LOOP;\r\nEND; $function$\n",
          "name": "apply_rls_policy",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.assert_super_admin()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  if not public.is_super_admin() then\r\n    raise exception 'forbidden';\r\n  end if;\r\nend;\r\n$function$\n",
          "name": "assert_super_admin",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.assign_employee_to_account(employee_email text, account uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  v_emp uuid;\r\nbegin\r\n  select id into v_emp from auth.users where email = employee_email;\r\n  if v_emp is null then\r\n    raise exception 'Employee email % not found in auth.users', employee_email;\r\n  end if;\r\n\r\n  insert into public.profiles(id, role, account_id)\r\n    values (v_emp, 'employee', account)\r\n  on conflict (id) do update\r\n    set role='employee', account_id=excluded.account_id;\r\nend\r\n$function$\n",
          "name": "assign_employee_to_account",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "employee_email text, account uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.assign_employee_to_owner(employee_email text, owner_email text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare v_emp uuid; v_owner uuid; v_account uuid;\r\nbegin\r\n  select id into v_emp from auth.users where email = employee_email;\r\n  if v_emp is null then raise exception 'Employee email % not found in auth.users', employee_email; end if;\r\n\r\n  select id into v_owner from auth.users where email = owner_email;\r\n  if v_owner is null then raise exception 'Owner email % not found in auth.users', owner_email; end if;\r\n\r\n  select account_id into v_account from public.profiles where id = v_owner;\r\n  if v_account is null then raise exception 'Owner % has no profile/account yet. Call setup_owner first.', owner_email; end if;\r\n\r\n  insert into public.profiles(id, role, account_id)\r\n    values (v_emp, 'employee', v_account)\r\n  on conflict (id) do update set role='employee', account_id=excluded.account_id;\r\nend$function$\n",
          "name": "assign_employee_to_owner",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "employee_email text, owner_email text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.audit_cloud_schema()\n RETURNS TABLE(table_name text, missing_cols text[], extra_cols text[])\n LANGUAGE plpgsql\nAS $function$\r\ndeclare\r\n  rec record;\r\n  actual text[];\r\n  expected text[];\r\n  t regclass;\r\nbegin\r\n  for rec in\r\n    select * from (values\r\n      ('public.patients',           ARRAY['id','account_id','device_id','local_id','name','age','diagnosis','paid_amount','remaining','register_date','phone_number','health_status','preferences','doctor_id','doctor_name','doctor_specialization','notes','service_type','service_id','service_name','service_cost','doctor_share','doctor_input','tower_share','department_share']::text[]),\r\n      ('public.returns',            ARRAY['id','account_id','device_id','local_id','date','patient_name','phone_number','diagnosis','remaining','age','doctor','notes']),\r\n      ('public.consumptions',       ARRAY['id','account_id','device_id','local_id','patient_id','item_id','quantity','date','amount','note']),\r\n      ('public.drugs',              ARRAY['id','account_id','device_id','local_id','name','notes','created_at']),\r\n      ('public.prescriptions',      ARRAY['id','account_id','device_id','local_id','patient_id','doctor_id','record_date','created_at']),\r\n      ('public.prescription_items', ARRAY['id','account_id','device_id','local_id','prescription_id','drug_id','days','times_per_day']),\r\n      ('public.complaints',         ARRAY['id','account_id','device_id','local_id','title','description','status','created_at']),\r\n      ('public.appointments',       ARRAY['id','account_id','device_id','local_id','patient_id','appointment_time','status','notes']),\r\n      ('public.doctors',            ARRAY['id','account_id','device_id','local_id','employee_id','name','specialization','phone_number','start_time','end_time','print_counter']),\r\n      ('public.consumption_types',  ARRAY['id','account_id','device_id','local_id','type']),\r\n      ('public.medical_services',   ARRAY['id','account_id','device_id','local_id','name','cost','service_type']),\r\n      ('public.service_doctor_share', ARRAY['id','account_id','device_id','local_id','service_id','doctor_id','share_percentage','tower_share_percentage','is_hidden']),\r\n      ('public.employees',          ARRAY['id','account_id','device_id','local_id','name','identity_number','phone_number','job_title','address','marital_status','basic_salary','final_salary','is_doctor']),\r\n      ('public.employees_loans',    ARRAY['id','account_id','device_id','local_id','employee_id','loan_date_time','final_salary','ratio_sum','loan_amount','leftover']),\r\n      ('public.employees_salaries', ARRAY['id','account_id','device_id','local_id','employee_id','year','month','final_salary','ratio_sum','total_loans','net_pay','is_paid','payment_date']),\r\n      ('public.employees_discounts',ARRAY['id','account_id','device_id','local_id','employee_id','discount_date_time','amount','notes']),\r\n      ('public.item_types',         ARRAY['id','account_id','device_id','local_id','name']),\r\n      ('public.items',              ARRAY['id','account_id','device_id','local_id','type_id','name','price','stock','created_at']),\r\n      ('public.purchases',          ARRAY['id','account_id','device_id','local_id','item_id','quantity','total','created_at','date']),\r\n      ('public.alert_settings',     ARRAY['id','account_id','device_id','local_id','item_id','threshold','is_enabled','last_triggered','created_at','notify_time']),\r\n      ('public.financial_logs',     ARRAY['id','account_id','device_id','local_id','transaction_type','operation','amount','employee_id','description','modification_details','timestamp']),\r\n      ('public.patient_services',   ARRAY['id','account_id','device_id','local_id','patient_id','service_id','service_name','service_cost'])\r\n    ) as def(tbl, cols)\r\n  loop\r\n    -- لو الجدول غير موجود: أعِد صفًا بكل الأعمدة كـ \"ناقصة\"\r\n    if to_regclass(rec.tbl) is null then\r\n      table_name  := rec.tbl;\r\n      missing_cols := rec.cols;\r\n      extra_cols  := null;\r\n      return next;\r\n      continue;\r\n    end if;\r\n\r\n    t := to_regclass(rec.tbl);\r\n\r\n    select array_agg(a.attname order by a.attname)\r\n      into actual\r\n    from pg_attribute a\r\n    where a.attrelid = t\r\n      and a.attnum > 0\r\n      and not a.attisdropped;\r\n\r\n    expected := rec.cols;\r\n\r\n    select coalesce(array_agg(e), '{}')\r\n      into missing_cols\r\n    from unnest(expected) e\r\n    where not (e = any(actual));\r\n\r\n    select coalesce(array_agg(a), '{}')\r\n      into extra_cols\r\n    from unnest(actual) a\r\n    where not (a = any(expected));\r\n\r\n    if (missing_cols is not null and array_length(missing_cols,1) > 0)\r\n       or (extra_cols is not null and array_length(extra_cols,1) > 0)\r\n    then\r\n      table_name := rec.tbl;\r\n      return next;\r\n    end if;\r\n  end loop;\r\nend\r\n$function$\n",
          "name": "audit_cloud_schema",
          "schema": "public",
          "returns": "TABLE(table_name text, missing_cols text[], extra_cols text[])",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.build_msg_snippet(_kind text, _body text)\n RETURNS text\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\r\nBEGIN\r\n  IF coalesce(_kind,'text') = 'image' THEN\r\n    RETURN '📷 صورة';\r\n  END IF;\r\n  IF _body IS NULL OR length(btrim(_body)) = 0 THEN\r\n    RETURN 'رسالة';\r\n  END IF;\r\n  RETURN CASE WHEN length(_body) <= 64 THEN _body ELSE substr(_body, 1, 64) || '…' END;\r\nEND;\r\n$function$\n",
          "name": "build_msg_snippet",
          "schema": "public",
          "returns": "text",
          "language": "plpgsql",
          "signature": "_kind text, _body text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.bytea_to_text(data bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/http', $function$bytea_to_text$function$\n",
          "name": "bytea_to_text",
          "schema": "public",
          "returns": "text",
          "language": "c",
          "signature": "data bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.can_access_account(acc uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select public.can_access_account_roles(acc, array['owner','employee']::text[]);\r\n$function$\n",
          "name": "can_access_account",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "acc uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.can_access_account_roles(acc uuid, roles text[])\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select acc is not null and (\r\n    public.is_owner_of_account(acc)\r\n    or exists (\r\n      select 1\r\n      from public.account_users au\r\n      where au.account_id = acc\r\n        and au.user_uid   = auth.uid()\r\n        and coalesce(au.disabled,false) = false\r\n        and (roles is null or au.role = any(roles))\r\n    )\r\n  );\r\n$function$\n",
          "name": "can_access_account_roles",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "acc uuid, roles text[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.can_employee_create(p_account uuid, p_user uuid DEFAULT auth.uid())\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$ select coalesce((select can_create from public.account_feature_permissions\r\n                       where account_id = p_account and user_uid = p_user), true); $function$\n",
          "name": "can_employee_create",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account uuid, p_user uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.can_employee_delete(p_account uuid, p_user uuid DEFAULT auth.uid())\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$ select coalesce((select can_delete from public.account_feature_permissions\r\n                       where account_id = p_account and user_uid = p_user), true); $function$\n",
          "name": "can_employee_delete",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account uuid, p_user uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.can_employee_update(p_account uuid, p_user uuid DEFAULT auth.uid())\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$ select coalesce((select can_update from public.account_feature_permissions\r\n                       where account_id = p_account and user_uid = p_user), true); $function$\n",
          "name": "can_employee_update",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account uuid, p_user uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_admin_start_dm(target_email text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  v_me uuid := auth.uid();\r\n  v_now timestamptz := now();\r\n  v_other_uid uuid;\r\n  v_other_email text;\r\n  v_other_account uuid;\r\n  v_conv_id uuid;\r\n  v_my_nick text := 'Elmam Clinic Team'; -- الاسم الظاهر للسوبر أدمن\r\nbegin\r\n  -- يسمح فقط للسوبر أدمن (اعتمد على الدالة التي أنشأناها سابقًا)\r\n  perform public.assert_super_admin();\r\n\r\n  if v_me is null then\r\n    raise exception 'not authenticated';\r\n  end if;\r\n\r\n  -- جلب المالك/الأدمن بالبريد\r\n  select user_uid, lower(email), account_id\r\n    into v_other_uid, v_other_email, v_other_account\r\n  from public.account_users\r\n  where lower(email)=lower(target_email)\r\n    and role in ('owner','admin','owner_admin')\r\n  order by created_at desc\r\n  limit 1;\r\n\r\n  if v_other_uid is null then\r\n    raise exception 'owner/admin not found';\r\n  end if;\r\n  if v_other_uid = v_me then\r\n    raise exception 'cannot dm self';\r\n  end if;\r\n\r\n  -- DM موجودة؟\r\n  select c.id\r\n    into v_conv_id\r\n  from public.chat_conversations c\r\n  where c.is_group=false\r\n    and exists (select 1 from public.chat_participants p where p.conversation_id=c.id and p.user_uid=v_me)\r\n    and exists (select 1 from public.chat_participants p where p.conversation_id=c.id and p.user_uid=v_other_uid)\r\n  limit 1;\r\n\r\n  if v_conv_id is null then\r\n    v_conv_id := gen_random_uuid();\r\n\r\n    insert into public.chat_conversations(id, account_id, is_group, title, created_by, created_at, updated_at)\r\n    values (v_conv_id, v_other_account, false, null, v_me, v_now, v_now)\r\n    on conflict do nothing;\r\n\r\n    -- صف السوبر أدمن: email=NULL و nickname=Elmam Clinic Team\r\n    insert into public.chat_participants(conversation_id, user_uid, email, nickname, joined_at)\r\n    values (v_conv_id, v_me, null, v_my_nick, v_now)\r\n    on conflict (conversation_id, user_uid) do update\r\n      set nickname = excluded.nickname,\r\n          email    = null;\r\n\r\n    -- صف الطرف الآخر ببريده الحقيقي\r\n    insert into public.chat_participants(conversation_id, user_uid, email, nickname, joined_at)\r\n    values (v_conv_id, v_other_uid, v_other_email, null, v_now)\r\n    on conflict (conversation_id, user_uid) do nothing;\r\n\r\n  else\r\n    -- DM قديمة: طبّق سياسة الإخفاء\r\n    update public.chat_participants\r\n       set email = null, nickname = v_my_nick\r\n     where conversation_id = v_conv_id and user_uid = v_me;\r\n  end if;\r\n\r\n  return v_conv_id;\r\nend;\r\n$function$\n",
          "name": "chat_admin_start_dm",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "target_email text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_build_snippet(p_kind text, p_body text)\n RETURNS text\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\r\nbegin\r\n  if lower(coalesce(p_kind,'')) = 'image' then\r\n    return '📷 صورة';\r\n  end if;\r\n  if p_body is null or btrim(p_body) = '' then\r\n    return 'رسالة';\r\n  end if;\r\n  if length(p_body) > 64 then\r\n    return substring(p_body from 1 for 64) || '…';\r\n  end if;\r\n  return p_body;\r\nend$function$\n",
          "name": "chat_build_snippet",
          "schema": "public",
          "returns": "text",
          "language": "plpgsql",
          "signature": "p_kind text, p_body text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_conversation_id_from_path(_name text)\n RETURNS uuid\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\r\n  SELECT CASE\r\n    WHEN _name IS NULL THEN NULL\r\n    WHEN regexp_match(_name, '^[^/]+/([0-9a-fA-F-]{36})/') IS NULL THEN NULL\r\n    ELSE (regexp_match(_name, '^[^/]+/([0-9a-fA-F-]{36})/'))[1]::uuid\r\n  END;\r\n$function$\n",
          "name": "chat_conversation_id_from_path",
          "schema": "public",
          "returns": "uuid",
          "language": "sql",
          "signature": "_name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_conversations_update_summary(p_conv uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\ndeclare\r\n  r record;\r\n  v_snippet text;\r\nbegin\r\n  select id, kind, coalesce(body, \"text\") as body, created_at\r\n    into r\r\n    from public.chat_messages\r\n   where conversation_id = p_conv and coalesce(deleted,false) = false\r\n   order by created_at desc\r\n   limit 1;\r\n\r\n  if r.id is null then\r\n    update public.chat_conversations\r\n       set last_msg_at = null,\r\n           last_msg_snippet = null\r\n     where id = p_conv;\r\n    return;\r\n  end if;\r\n\r\n  v_snippet := case when r.kind = 'image'\r\n                    then '📷 صورة'\r\n                    else left(coalesce(r.body,''), 140)\r\n               end;\r\n\r\n  update public.chat_conversations\r\n     set last_msg_at = r.created_at,\r\n         last_msg_snippet = v_snippet\r\n   where id = p_conv;\r\nend $function$\n",
          "name": "chat_conversations_update_summary",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_conv uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_mark_read(p_conversation_id uuid, p_user_uid uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\ndeclare r_last record;\r\nbegin\r\n  select id, created_at into r_last\r\n  from public.chat_messages\r\n  where conversation_id = p_conversation_id\r\n  order by created_at desc limit 1;\r\n\r\n  insert into public.chat_reads (conversation_id, user_uid, last_read_message_id, last_read_at)\r\n  values (p_conversation_id, p_user_uid, coalesce(r_last.id, null), now())\r\n  on conflict (conversation_id, user_uid) do update\r\n    set last_read_message_id = excluded.last_read_message_id,\r\n        last_read_at         = excluded.last_read_at;\r\nend$function$\n",
          "name": "chat_mark_read",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_conversation_id uuid, p_user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_messages_after_change()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  perform public.chat_conversations_update_summary(new.conversation_id);\r\n  return null;\r\nend $function$\n",
          "name": "chat_messages_after_change",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_messages_fill_text()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  if new.\"text\" is null then\r\n    new.\"text\" := new.body;\r\n  end if;\r\n  return new;\r\nend $function$\n",
          "name": "chat_messages_fill_text",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_messages_sync_text_on_update()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  -- عند تعديل body، اجعل text يساويه إذا لم يُمرَّر نص مختلف.\r\n  if TG_OP = 'UPDATE' and new.body is distinct from old.body then\r\n    if new.\"text\" is null or new.\"text\" = old.\"text\" then\r\n      new.\"text\" := new.body;\r\n    end if;\r\n  end if;\r\n  return new;\r\nend $function$\n",
          "name": "chat_messages_sync_text_on_update",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_on_message_change()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  perform public.chat_refresh_last_summary(new.conversation_id);\r\n  return new;\r\nend$function$\n",
          "name": "chat_on_message_change",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_on_message_insert()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  update public.chat_conversations\r\n     set last_msg_at = new.created_at,\r\n         last_msg_snippet = public.chat_build_snippet(new.kind, new.body)\r\n   where id = new.conversation_id;\r\n  return new;\r\nend$function$\n",
          "name": "chat_on_message_insert",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_refresh_last_summary(p_conversation_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\ndeclare r record;\r\nbegin\r\n  select kind, body, created_at into r\r\n  from public.chat_messages\r\n  where conversation_id = p_conversation_id and deleted = false\r\n  order by created_at desc limit 1;\r\n\r\n  if not found then\r\n    update public.chat_conversations\r\n       set last_msg_at = null,\r\n           last_msg_snippet = null\r\n     where id = p_conversation_id;\r\n  else\r\n    update public.chat_conversations\r\n       set last_msg_at = r.created_at,\r\n           last_msg_snippet = public.chat_build_snippet(r.kind, r.body)\r\n     where id = p_conversation_id;\r\n  end if;\r\nend$function$\n",
          "name": "chat_refresh_last_summary",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_conversation_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_unreads_by_account(_user_uid uuid)\n RETURNS TABLE(account_id uuid, unread_count integer)\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select account_id, unread_count\r\n    from public.v_chat_unreads_by_account\r\n   where user_uid = _user_uid\r\n$function$\n",
          "name": "chat_unreads_by_account",
          "schema": "public",
          "returns": "TABLE(account_id uuid, unread_count integer)",
          "language": "sql",
          "signature": "_user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.chat_unreads_for_user(_user_uid uuid, _conv_ids uuid[] DEFAULT NULL::uuid[])\n RETURNS TABLE(conversation_id uuid, unread_count integer)\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select cu.conversation_id, cu.unread_count\r\n    from public.chat_unreads cu\r\n   where cu.user_uid = _user_uid\r\n     and ( _conv_ids is null or cu.conversation_id = any(_conv_ids) )\r\n$function$\n",
          "name": "chat_unreads_for_user",
          "schema": "public",
          "returns": "TABLE(conversation_id uuid, unread_count integer)",
          "language": "sql",
          "signature": "_user_uid uuid, _conv_ids uuid[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.conv_from_object_name(name text)\n RETURNS uuid\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\r\ndeclare v text;\r\nbegin\r\n  v := split_part(name, '/', 2);  -- attachments/<conv>/<file>\r\n  begin return v::uuid;\r\n  exception when others then return null;\r\n  end;\r\nend $function$\n",
          "name": "conv_from_object_name",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.conv_has_member(p_conversation_id uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  SELECT\r\n    EXISTS (\r\n      SELECT 1\r\n      FROM public.chat_participants p\r\n      WHERE p.conversation_id = p_conversation_id\r\n        AND p.user_uid = auth.uid()\r\n    )\r\n    OR EXISTS (\r\n      SELECT 1\r\n      FROM public.chat_conversations c\r\n      WHERE c.id = p_conversation_id\r\n        AND c.created_by = auth.uid()\r\n    );\r\n$function$\n",
          "name": "conv_has_member",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_conversation_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.conv_has_member(p_conversation_id uuid, p_user_uid uuid DEFAULT auth.uid())\n RETURNS boolean\n LANGUAGE plpgsql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare ok boolean;\r\nbegin\r\n  select exists (\r\n    select 1\r\n    from public.chat_participants\r\n    where conversation_id = p_conversation_id\r\n      and user_uid        = coalesce(p_user_uid, auth.uid())\r\n  ) into ok;\r\n\r\n  return coalesce(ok,false);\r\nend $function$\n",
          "name": "conv_has_member",
          "schema": "public",
          "returns": "boolean",
          "language": "plpgsql",
          "signature": "p_conversation_id uuid, p_user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.current_account_id()\n RETURNS uuid\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select p.account_id\r\n  from public.profiles p\r\n  where p.id = auth.uid()\r\n  limit 1\r\n$function$\n",
          "name": "current_account_id",
          "schema": "public",
          "returns": "uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.current_account_ids()\n RETURNS uuid[]\n LANGUAGE sql\n STABLE\n SET search_path TO 'public'\nAS $function$\r\n  select coalesce(\r\n    string_to_array(nullif(auth.jwt()->>'account_ids',''),',')::uuid[],\r\n    array(select au.account_id\r\n            from public.account_users au\r\n           where au.user_uid = auth.uid() and coalesce(au.disabled,false) = false)\r\n  );\r\n$function$\n",
          "name": "current_account_ids",
          "schema": "public",
          "returns": "uuid[]",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.\"current_role\"()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$ select public.get_my_role() $function$\n",
          "name": "current_role",
          "schema": "public",
          "returns": "text",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.delete_employee(p_account uuid, p_user_uid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- فقط السوبر أدمن أو مالك/أدمن الحساب\r\n  if lower(coalesce(auth.jwt()->>'email','')) <> 'aelmam.app@gmail.com'\r\n     and not exists (\r\n       select 1\r\n       from public.account_users au\r\n       where au.account_id = p_account\r\n         and au.user_uid   = auth.uid()\r\n         and au.role in ('owner','admin')\r\n         and coalesce(au.disabled,false) = false\r\n     )\r\n  then\r\n    raise exception 'forbidden' using errcode='42501';\r\n  end if;\r\n\r\n  delete from public.account_users\r\n   where account_id = p_account\r\n     and user_uid   = p_user_uid\r\n     and role       = 'employee';\r\nend;\r\n$function$\n",
          "name": "delete_employee",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account uuid, p_user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.ensure_clinic_exists(acc_id uuid)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  has_name boolean;\r\nbegin\r\n  if acc_id is null then\r\n    return null;\r\n  end if;\r\n\r\n  -- موجودة مسبقاً؟ خروج سريع\r\n  if exists (select 1 from clinics where id = acc_id) then\r\n    return acc_id;\r\n  end if;\r\n\r\n  -- هل جدول clinics يحتوي عمود name؟\r\n  select exists (\r\n    select 1\r\n    from information_schema.columns\r\n    where table_schema = 'public'\r\n      and table_name  = 'clinics'\r\n      and column_name = 'name'\r\n  ) into has_name;\r\n\r\n  if has_name then\r\n    insert into clinics (id, name)\r\n    values (acc_id, 'Clinic ' || left(acc_id::text, 8))\r\n    on conflict (id) do nothing;\r\n  else\r\n    insert into clinics (id)\r\n    values (acc_id)\r\n    on conflict (id) do nothing;\r\n  end if;\r\n\r\n  return acc_id;\r\nend;\r\n$function$\n",
          "name": "ensure_clinic_exists",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "acc_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fill_account_id()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  if new.account_id is null then\r\n    new.account_id := public.current_account_id();\r\n    if new.account_id is null then\r\n      raise exception\r\n        'account_id is required: no auth context (auth.uid() is null) and current_account_id() returned null';\r\n    end if;\r\n  end if;\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fill_account_id",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fill_sync_defaults()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- account_id: لو ناقص خذه من my_account_id() (سيُفشل RLS لاحقًا لو ما عنده وصول)\r\n  if new.account_id is null then\r\n    new.account_id := public.my_account_id();\r\n  end if;\r\n\r\n  -- device_id: قيمة افتراضية آمنة للفحوصات اليدوية (لن تُستخدم في المزامنة الفعلية)\r\n  if new.device_id is null then\r\n    new.device_id := 'srv';\r\n  end if;\r\n\r\n  -- local_id: رقم عشوائي ضمن int32 لتفادي تعارض (acc,device,local) الفريد\r\n  if new.local_id is null then\r\n    new.local_id := (extract(epoch from clock_timestamp())*1000)::bigint % 2147483647;\r\n  end if;\r\n\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fill_sync_defaults",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_chat_reads_upsert_recalc()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  perform public.fn_recalc_unread_for_user(new.conversation_id, new.user_uid);\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fn_after_chat_reads_upsert_recalc",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_msg_delete_recalc_unreads()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  if (tg_op = 'UPDATE' and new.deleted is distinct from old.deleted and new.deleted = true)\r\n     or (tg_op = 'DELETE') then\r\n    perform public.fn_recalc_unread_for_conversation(coalesce(new.conversation_id, old.conversation_id));\r\n  end if;\r\n  return coalesce(new, old);\r\nend;\r\n$function$\n",
          "name": "fn_after_msg_delete_recalc_unreads",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_msg_insert_unreads()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- زيّد عدّ غير المقروء لكل مشارك باستثناء المُرسل، بشرط: غير محذوفة، بعد joined_at و > last_read_at إن وجد\r\n  update public.chat_unreads cu\r\n     set unread_count = cu.unread_count + 1,\r\n         updated_at   = now()\r\n    from public.chat_participants p\r\n    left join public.chat_reads r\r\n      on r.conversation_id = p.conversation_id and r.user_uid = p.user_uid\r\n   where p.conversation_id = new.conversation_id\r\n     and p.user_uid <> new.sender_uid\r\n     and (p.joined_at is null or new.created_at >= p.joined_at)\r\n     and (r.last_read_at is null or new.created_at > r.last_read_at)\r\n     and cu.conversation_id = p.conversation_id\r\n     and cu.user_uid = p.user_uid;\r\n\r\n  -- أنشئ صفاً ناقصاً إن لم يوجد (0 أو 1 حسب الشروط)\r\n  insert into public.chat_unreads (conversation_id, user_uid, unread_count, updated_at)\r\n  select p.conversation_id, p.user_uid,\r\n         case\r\n           when p.user_uid <> new.sender_uid\r\n            and (p.joined_at is null or new.created_at >= p.joined_at)\r\n            and not coalesce(new.deleted, false)\r\n            and (coalesce((select last_read_at from public.chat_reads where conversation_id = p.conversation_id and user_uid = p.user_uid limit 1), '-infinity'::timestamptz) < new.created_at)\r\n           then 1 else 0\r\n         end,\r\n         now()\r\n    from public.chat_participants p\r\n   where p.conversation_id = new.conversation_id\r\n     and not exists (\r\n       select 1 from public.chat_unreads cu\r\n        where cu.conversation_id = p.conversation_id and cu.user_uid = p.user_uid\r\n     );\r\n\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fn_after_msg_insert_unreads",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_msg_insert_update_conv()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  -- حدّث آخر وقت وآخر مقتطف\r\n  update public.chat_conversations c\r\n     set last_msg_at       = new.created_at,\r\n         last_msg_snippet  = public.fn_msg_snippet(new.body, new.text)\r\n   where c.id = new.conversation_id;\r\n\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fn_after_msg_insert_update_conv",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_msg_update_deleted()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\ndeclare\r\n  _latest record;\r\nbegin\r\n  if (tg_op = 'UPDATE') and (new.deleted is distinct from old.deleted) then\r\n    -- إن كانت هذه الرسالة أحدث ملخّص، أعد الحساب\r\n    select id, body, text, created_at\r\n      into _latest\r\n      from public.chat_messages\r\n     where conversation_id = new.conversation_id\r\n       and coalesce(deleted, false) = false\r\n     order by created_at desc\r\n     limit 1;\r\n\r\n    update public.chat_conversations c\r\n       set last_msg_at      = coalesce(_latest.created_at, c.created_at),\r\n           last_msg_snippet = case when _latest.id is null\r\n                                   then coalesce(c.last_msg_snippet, '')\r\n                                   else public.fn_msg_snippet(_latest.body, _latest.text)\r\n                              end\r\n     where c.id = new.conversation_id;\r\n  end if;\r\n\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fn_after_msg_update_deleted",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_participant_delete_cleanup_unread()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  delete from public.chat_unreads\r\n   where conversation_id = old.conversation_id\r\n     and user_uid       = old.user_uid;\r\n  return old;\r\nend;\r\n$function$\n",
          "name": "fn_after_participant_delete_cleanup_unread",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_after_participant_insert_init_unread()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  perform public.fn_recalc_unread_for_user(new.conversation_id, new.user_uid);\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fn_after_participant_insert_init_unread",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_can_write_account(aid uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select public.is_member_of_account(aid)\r\n$function$\n",
          "name": "fn_can_write_account",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "aid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_chat_messages_touch_last_msg()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  v_cid uuid;\r\nBEGIN\r\n  v_cid := COALESCE(NEW.conversation_id, OLD.conversation_id);\r\n  PERFORM public.fn_chat_refresh_last_msg(v_cid);\r\n  RETURN COALESCE(NEW, OLD);\r\nEND;\r\n$function$\n",
          "name": "fn_chat_messages_touch_last_msg",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_chat_on_message_insert()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  update public.chat_conversations c\r\n     set last_msg_at = new.created_at,\r\n         last_msg_snippet =\r\n           case\r\n             when new.kind = 'image' then '📷 صورة'\r\n             else left(coalesce(new.body, ''), 140)\r\n           end\r\n   where c.id = new.conversation_id;\r\n\r\n  -- تحديث \"مقروء\" للمرسل مباشرة\r\n  insert into public.chat_reads (conversation_id, user_uid, last_read_message_id, last_read_at)\r\n  values (new.conversation_id, new.sender_uid, new.id, new.created_at)\r\n  on conflict (conversation_id, user_uid) do update\r\n    set last_read_message_id = excluded.last_read_message_id,\r\n        last_read_at         = excluded.last_read_at;\r\n\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "fn_chat_on_message_insert",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_chat_refresh_last_msg(p_conversation_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  v_last_at    timestamptz;\r\n  v_last_kind  text;\r\n  v_last_body  text;\r\n  v_snippet    text;\r\nBEGIN\r\n  -- اجلب أحدث رسالة غير محذوفة\r\n  SELECT m.created_at, m.kind::text, m.body\r\n    INTO v_last_at, v_last_kind, v_last_body\r\n  FROM public.chat_messages m\r\n  WHERE m.conversation_id = p_conversation_id\r\n    AND COALESCE(m.deleted, false) = false\r\n  ORDER BY m.created_at DESC\r\n  LIMIT 1;\r\n\r\n  IF v_last_at IS NULL THEN\r\n    -- لا رسائل (أو كلها محذوفة)\r\n    UPDATE public.chat_conversations\r\n       SET last_msg_at = NULL,\r\n           last_msg_snippet = NULL\r\n     WHERE id = p_conversation_id;\r\n    RETURN;\r\n  END IF;\r\n\r\n  -- ابنِ الـ snippet\r\n  IF lower(coalesce(v_last_kind,'')) LIKE '%image%' OR lower(coalesce(v_last_kind,'')) = 'image' THEN\r\n    v_snippet := '📷 صورة';\r\n  ELSE\r\n    -- نص: تقليم للمسافات والأسطر ثم قص إلى 64 وإضافة \"…\"\r\n    v_last_body := btrim(coalesce(v_last_body, ''));\r\n    IF v_last_body = '' THEN\r\n      v_snippet := 'رسالة';\r\n    ELSE\r\n      IF length(v_last_body) > 64 THEN\r\n        v_snippet := substring(v_last_body from 1 for 64) || '…';\r\n      ELSE\r\n        v_snippet := v_last_body;\r\n      END IF;\r\n    END IF;\r\n  END IF;\r\n\r\n  -- حدّث المحادثة\r\n  UPDATE public.chat_conversations\r\n     SET last_msg_at      = v_last_at,\r\n         last_msg_snippet = v_snippet\r\n   WHERE id = p_conversation_id;\r\nEND;\r\n$function$\n",
          "name": "fn_chat_refresh_last_msg",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_conversation_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_hard_purge_soft_deleted(older_than_days integer DEFAULT 30)\n RETURNS TABLE(messages_deleted integer, conversations_deleted integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nDECLARE\r\n  v_msg int;\r\n  v_conv int;\r\nBEGIN\r\n  DELETE FROM public.chat_messages\r\n  WHERE is_deleted = TRUE\r\n    AND deleted_at IS NOT NULL\r\n    AND deleted_at < now() - make_interval(days => older_than_days);\r\n  GET DIAGNOSTICS v_msg = ROW_COUNT;\r\n\r\n  -- سيؤدي حذف المحادثة إلى حذف المشاركين/القراءات/غير المقروء بفعل ON DELETE CASCADE\r\n  DELETE FROM public.chat_conversations c\r\n  WHERE c.is_deleted = TRUE\r\n    AND c.deleted_at IS NOT NULL\r\n    AND c.deleted_at < now() - make_interval(days => older_than_days);\r\n  GET DIAGNOSTICS v_conv = ROW_COUNT;\r\n\r\n  RETURN QUERY SELECT COALESCE(v_msg,0), COALESCE(v_conv,0);\r\nEND\r\n$function$\n",
          "name": "fn_hard_purge_soft_deleted",
          "schema": "public",
          "returns": "TABLE(messages_deleted integer, conversations_deleted integer)",
          "language": "plpgsql",
          "signature": "older_than_days integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_is_account_member(aid uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select public.is_member_of_account(aid)\r\n$function$\n",
          "name": "fn_is_account_member",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "aid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_is_super_admin()\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  SELECT EXISTS (\r\n           SELECT 1\r\n           FROM public.super_admins s\r\n           WHERE s.user_uid::text = auth.uid()::text\r\n         )\r\n      OR EXISTS (\r\n           SELECT 1\r\n           FROM public.account_users au\r\n           WHERE au.user_uid::text = auth.uid()::text\r\n             AND lower(au.role) = 'superadmin'\r\n         );\r\n$function$\n",
          "name": "fn_is_super_admin",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_msg_snippet(_body text, _text text)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE\nAS $function$\r\n  select\r\n    case\r\n      when coalesce(nullif(trim(_body), ''), nullif(trim(_text), '')) is null\r\n        then 'مرفق'\r\n      else left(coalesce(nullif(trim(_body), ''), nullif(trim(_text), '')), 120)\r\n    end\r\n$function$\n",
          "name": "fn_msg_snippet",
          "schema": "public",
          "returns": "text",
          "language": "sql",
          "signature": "_body text, _text text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_my_latest_account_id()\n RETURNS text\n LANGUAGE plpgsql\n STABLE\nAS $function$\r\nDECLARE\r\n  acc text;\r\nBEGIN\r\n  SELECT au.account_id::text\r\n    INTO acc\r\n  FROM public.account_users au\r\n  WHERE au.user_uid::text = auth.uid()::text\r\n  ORDER BY au.created_at DESC NULLS LAST\r\n  LIMIT 1;\r\n\r\n  RETURN acc;\r\nEND;\r\n$function$\n",
          "name": "fn_my_latest_account_id",
          "schema": "public",
          "returns": "text",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_recalc_unread_for_conversation(_conversation_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  r record;\r\nbegin\r\n  for r in\r\n    select user_uid from public.chat_participants\r\n     where conversation_id = _conversation_id\r\n  loop\r\n    perform public.fn_recalc_unread_for_user(_conversation_id, r.user_uid);\r\n  end loop;\r\nend;\r\n$function$\n",
          "name": "fn_recalc_unread_for_conversation",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "_conversation_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_recalc_unread_for_user(_conversation_id uuid, _user_uid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  _joined_at timestamptz;\r\n  _last_read timestamptz;\r\n  _cnt int;\r\nbegin\r\n  -- وقت الانضمام\r\n  select joined_at into _joined_at\r\n    from public.chat_participants\r\n   where conversation_id = _conversation_id and user_uid = _user_uid\r\n   limit 1;\r\n\r\n  -- آخر قراءة\r\n  select last_read_at into _last_read\r\n    from public.chat_reads\r\n   where conversation_id = _conversation_id and user_uid = _user_uid\r\n   limit 1;\r\n\r\n  -- عدّ الرسائل من الآخرين بعد الانضمام وآخر قراءة، غير محذوفة\r\n  select count(*) into _cnt\r\n    from public.chat_messages m\r\n   where m.conversation_id = _conversation_id\r\n     and coalesce(m.deleted, false) = false\r\n     and m.sender_uid <> _user_uid\r\n     and ( _joined_at is null or m.created_at >= _joined_at )\r\n     and ( _last_read is null or m.created_at >  _last_read );\r\n\r\n  insert into public.chat_unreads as cu (conversation_id, user_uid, unread_count, updated_at)\r\n       values (_conversation_id, _user_uid, _cnt, now())\r\n  on conflict (conversation_id, user_uid)\r\n    do update set unread_count = excluded.unread_count,\r\n                  updated_at   = now();\r\nend;\r\n$function$\n",
          "name": "fn_recalc_unread_for_user",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "_conversation_id uuid, _user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_restore_conversation(p_conversation_id_text text)\n RETURNS TABLE(conv_restored integer, msg_restored integer, att_restored integer, reac_restored integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nDECLARE\r\n  v_conv text;\r\n  v_acc  uuid;\r\nBEGIN\r\n  SELECT conv_id_text, account_id INTO v_conv, v_acc\r\n  FROM public._resolve_conversation_and_account(p_conversation_id_text);\r\n\r\n  IF v_conv IS NULL THEN\r\n    RAISE NOTICE 'Conversation not found for id=%', p_conversation_id_text;\r\n    conv_restored := 0; msg_restored := 0; att_restored := 0; reac_restored := 0;\r\n    RETURN;\r\n  END IF;\r\n\r\n  IF NOT (\r\n    EXISTS (SELECT 1 FROM public.account_users au\r\n            WHERE au.account_id=v_acc AND au.user_uid=auth.uid()\r\n              AND COALESCE(au.disabled,false)=false AND au.role IN ('owner'))\r\n    OR EXISTS (SELECT 1 FROM public.super_admins s WHERE s.user_uid=auth.uid())\r\n  ) THEN\r\n    RAISE EXCEPTION 'Not allowed';\r\n  END IF;\r\n\r\n  UPDATE public.chat_reactions r\r\n  SET is_deleted = FALSE, deleted_at = NULL\r\n  FROM public.chat_messages m\r\n  WHERE m.id = r.message_id\r\n    AND m.conversation_id::text = v_conv\r\n    AND COALESCE(r.is_deleted, FALSE) = TRUE;\r\n  GET DIAGNOSTICS reac_restored = ROW_COUNT;\r\n\r\n  UPDATE public.chat_attachments a\r\n  SET is_deleted = FALSE, deleted_at = NULL\r\n  FROM public.chat_messages m\r\n  WHERE m.id = a.message_id\r\n    AND m.conversation_id::text = v_conv\r\n    AND COALESCE(a.is_deleted, FALSE) = TRUE;\r\n  GET DIAGNOSTICS att_restored = ROW_COUNT;\r\n\r\n  UPDATE public.chat_messages\r\n  SET is_deleted = FALSE, deleted_at = NULL\r\n  WHERE conversation_id::text = v_conv\r\n    AND COALESCE(is_deleted, FALSE) = TRUE;\r\n  GET DIAGNOSTICS msg_restored = ROW_COUNT;\r\n\r\n  UPDATE public.chat_conversations\r\n  SET is_deleted = FALSE, deleted_at = NULL\r\n  WHERE id::text = v_conv\r\n    AND COALESCE(is_deleted, FALSE) = TRUE;\r\n  GET DIAGNOSTICS conv_restored = ROW_COUNT;\r\n\r\n  RETURN;\r\nEND\r\n$function$\n",
          "name": "fn_restore_conversation",
          "schema": "public",
          "returns": "TABLE(conv_restored integer, msg_restored integer, att_restored integer, reac_restored integer)",
          "language": "plpgsql",
          "signature": "p_conversation_id_text text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_set_account_from_conversation_on_participants()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.account_id IS NULL THEN\r\n    SELECT c.account_id INTO NEW.account_id\r\n    FROM public.chat_conversations c\r\n    WHERE c.id = NEW.conversation_id;\r\n  END IF;\r\n  RETURN NEW;\r\nEND$function$\n",
          "name": "fn_set_account_from_conversation_on_participants",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_set_account_from_conversation_on_reads()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.account_id IS NULL THEN\r\n    SELECT c.account_id INTO NEW.account_id\r\n    FROM public.chat_conversations c\r\n    WHERE c.id = NEW.conversation_id;\r\n  END IF;\r\n  RETURN NEW;\r\nEND$function$\n",
          "name": "fn_set_account_from_conversation_on_reads",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_set_account_from_message_on_attachments()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.account_id IS NULL OR NEW.device_id IS NULL OR NEW.local_id IS NULL THEN\r\n    SELECT m.account_id, m.device_id, m.local_id\r\n      INTO NEW.account_id, NEW.device_id, NEW.local_id\r\n    FROM public.chat_messages m\r\n    WHERE m.id = NEW.message_id;\r\n  END IF;\r\n  RETURN NEW;\r\nEND$function$\n",
          "name": "fn_set_account_from_message_on_attachments",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_set_account_from_message_on_reactions()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.account_id IS NULL OR NEW.device_id IS NULL OR NEW.local_id IS NULL THEN\r\n    SELECT m.account_id, m.device_id, m.local_id\r\n      INTO NEW.account_id, NEW.device_id, NEW.local_id\r\n    FROM public.chat_messages m\r\n    WHERE m.id = NEW.message_id;\r\n  END IF;\r\n  RETURN NEW;\r\nEND$function$\n",
          "name": "fn_set_account_from_message_on_reactions",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_set_account_id()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.account_id IS NULL THEN\r\n    NEW.account_id := public.current_account_id();\r\n  END IF;\r\n  IF NEW.device_id IS NULL THEN\r\n    NEW.device_id := '';\r\n  END IF;\r\n  IF NEW.local_id IS NULL THEN\r\n    NEW.local_id := 0;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n",
          "name": "fn_set_account_id",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_sign_chat_attachment(obj_path text, expires_in integer DEFAULT 3600)\n RETURNS text\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_url text;\r\nBEGIN\r\n  SELECT (storage.create_signed_url('chat-attachments', obj_path, expires_in)).signed_url\r\n  INTO v_url;\r\n  RETURN v_url;\r\nEND;\r\n$function$\n",
          "name": "fn_sign_chat_attachment",
          "schema": "public",
          "returns": "text",
          "language": "plpgsql",
          "signature": "obj_path text, expires_in integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_sign_chat_attachment(p_bucket text, p_path text, p_expires_in integer DEFAULT 900)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nDECLARE\r\n  v_message_id    uuid;\r\n  v_conversation  uuid;\r\n  v_has_access    boolean;\r\n  v_signed_url    text;\r\nBEGIN\r\n  -- تحقق أن هذا المسار مسجّل كمرفق دردشة\r\n  SELECT a.message_id\r\n    INTO v_message_id\r\n  FROM public.chat_attachments a\r\n  WHERE a.bucket = p_bucket\r\n    AND a.path   = p_path\r\n  LIMIT 1;\r\n\r\n  IF v_message_id IS NULL THEN\r\n    RAISE EXCEPTION 'Attachment not found' USING ERRCODE = 'no_data_found';\r\n  END IF;\r\n\r\n  -- اجلب محادثته\r\n  SELECT m.conversation_id\r\n    INTO v_conversation\r\n  FROM public.chat_messages m\r\n  WHERE m.id = v_message_id;\r\n\r\n  IF v_conversation IS NULL THEN\r\n    RAISE EXCEPTION 'Message not found for attachment' USING ERRCODE = 'no_data_found';\r\n  END IF;\r\n\r\n  -- تحقّق أن المستخدم الحالي عضو في المحادثة\r\n  SELECT EXISTS(\r\n    SELECT 1\r\n    FROM public.chat_participants p\r\n    WHERE p.conversation_id = v_conversation\r\n      AND p.user_uid = auth.uid()\r\n  ) INTO v_has_access;\r\n\r\n  IF NOT v_has_access THEN\r\n    RAISE EXCEPTION 'Forbidden' USING ERRCODE = 'insufficient_privilege';\r\n  END IF;\r\n\r\n  -- أنشئ الرابط الموقّع عبر دالة التخزين\r\n  -- ملاحظة: بعض منصّات Supabase توفّر storage.create_signed_url كدالة SQL.\r\n  -- إن لم تكن متاحة في بيئتك، استخدم Edge Function بديل.\r\n  BEGIN\r\n    v_signed_url := storage.create_signed_url(p_bucket, p_path, p_expires_in);\r\n  EXCEPTION WHEN undefined_function THEN\r\n    -- لو لم تتوفر الدالة في هذه البيئة، نرمي خطأ واضحًا.\r\n    RAISE EXCEPTION\r\n      'storage.create_signed_url is not available on this instance. Use the Edge Function instead.'\r\n      USING ERRCODE = 'feature_not_supported';\r\n  END;\r\n\r\n  RETURN jsonb_build_object(\r\n    'signedUrl', v_signed_url,\r\n    'url',       v_signed_url  -- للتوافق مع بعض العملاء\r\n  );\r\nEND;\r\n$function$\n",
          "name": "fn_sign_chat_attachment",
          "schema": "public",
          "returns": "jsonb",
          "language": "plpgsql",
          "signature": "p_bucket text, p_path text, p_expires_in integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_soft_delete_by_id()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  sql text;\r\nBEGIN\r\n  sql := format($f$\r\n      UPDATE %I.%I\r\n         SET is_deleted = TRUE,\r\n             deleted_at = timezone(''utc'', now()),\r\n             updated_at = COALESCE(updated_at, timezone(''utc'', now()))\r\n       WHERE id = $1\r\n    $f$, TG_TABLE_SCHEMA, TG_TABLE_NAME);\r\n  EXECUTE sql USING OLD.id;\r\n  RETURN NULL; -- cancel physical delete\r\nEND$function$\n",
          "name": "fn_soft_delete_by_id",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.fn_soft_delete_conversation(p_conversation_id_text text)\n RETURNS TABLE(conv_updated integer, msg_updated integer, att_updated integer, reac_updated integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nDECLARE\r\n  v_conv text;\r\n  v_acc  uuid;\r\nBEGIN\r\n  SELECT conv_id_text, account_id INTO v_conv, v_acc\r\n  FROM public._resolve_conversation_and_account(p_conversation_id_text);\r\n\r\n  IF v_conv IS NULL THEN\r\n    RAISE NOTICE 'Conversation not found for id=%', p_conversation_id_text;\r\n    conv_updated := 0; msg_updated := 0; att_updated := 0; reac_updated := 0;\r\n    RETURN;\r\n  END IF;\r\n\r\n  IF NOT (\r\n    EXISTS (SELECT 1 FROM public.account_users au\r\n            WHERE au.account_id=v_acc AND au.user_uid=auth.uid()\r\n              AND COALESCE(au.disabled,false)=false AND au.role IN ('owner'))\r\n    OR EXISTS (SELECT 1 FROM public.super_admins s WHERE s.user_uid=auth.uid())\r\n  ) THEN\r\n    RAISE EXCEPTION 'Not allowed';\r\n  END IF;\r\n\r\n  UPDATE public.chat_reactions r\r\n    SET is_deleted = TRUE,\r\n        deleted_at = timezone('utc', now()),\r\n        updated_at = COALESCE(updated_at, timezone('utc', now()))\r\n  FROM public.chat_messages m\r\n  WHERE m.id = r.message_id\r\n    AND m.conversation_id::text = v_conv\r\n    AND COALESCE(r.is_deleted, FALSE) = FALSE;\r\n  GET DIAGNOSTICS reac_updated = ROW_COUNT;\r\n\r\n  UPDATE public.chat_attachments a\r\n    SET is_deleted = TRUE,\r\n        deleted_at = timezone('utc', now()),\r\n        updated_at = COALESCE(updated_at, timezone('utc', now()))\r\n  FROM public.chat_messages m\r\n  WHERE m.id = a.message_id\r\n    AND m.conversation_id::text = v_conv\r\n    AND COALESCE(a.is_deleted, FALSE) = FALSE;\r\n  GET DIAGNOSTICS att_updated = ROW_COUNT;\r\n\r\n  UPDATE public.chat_messages\r\n    SET is_deleted = TRUE,\r\n        deleted_at = timezone('utc', now()),\r\n        updated_at = COALESCE(updated_at, timezone('utc', now()))\r\n  WHERE conversation_id::text = v_conv\r\n    AND COALESCE(is_deleted, FALSE) = FALSE;\r\n  GET DIAGNOSTICS msg_updated = ROW_COUNT;\r\n\r\n  UPDATE public.chat_conversations\r\n    SET is_deleted = TRUE,\r\n        deleted_at = timezone('utc', now()),\r\n        updated_at = COALESCE(updated_at, timezone('utc', now()))\r\n  WHERE id::text = v_conv\r\n    AND COALESCE(is_deleted, FALSE) = FALSE;\r\n  GET DIAGNOSTICS conv_updated = ROW_COUNT;\r\n\r\n  RETURN;\r\nEND\r\n$function$\n",
          "name": "fn_soft_delete_conversation",
          "schema": "public",
          "returns": "TABLE(conv_updated integer, msg_updated integer, att_updated integer, reac_updated integer)",
          "language": "plpgsql",
          "signature": "p_conversation_id_text text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.get_my_account_id()\n RETURNS uuid\n LANGUAGE plpgsql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  acc uuid;\r\nbegin\r\n  select p.account_id into acc\r\n  from public.profiles p\r\n  where p.id = auth.uid()\r\n  limit 1;\r\n\r\n  return acc;\r\nend $function$\n",
          "name": "get_my_account_id",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.get_my_role()\n RETURNS text\n LANGUAGE plpgsql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  r text;\r\nbegin\r\n  select p.role into r\r\n  from public.profiles p\r\n  where p.id = auth.uid()\r\n  limit 1;\r\n\r\n  return r;\r\nend $function$\n",
          "name": "get_my_role",
          "schema": "public",
          "returns": "text",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gin_extract_query_trgm$function$\n",
          "name": "gin_extract_query_trgm",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "text, internal, smallint, internal, internal, internal, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gin_extract_value_trgm(text, internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gin_extract_value_trgm$function$\n",
          "name": "gin_extract_value_trgm",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "text, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal)\n RETURNS boolean\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gin_trgm_consistent$function$\n",
          "name": "gin_trgm_consistent",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "internal, smallint, text, integer, internal, internal, internal, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal)\n RETURNS \"char\"\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gin_trgm_triconsistent$function$\n",
          "name": "gin_trgm_triconsistent",
          "schema": "public",
          "returns": "\"char\"",
          "language": "c",
          "signature": "internal, smallint, text, integer, internal, internal, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_compress(internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_compress$function$\n",
          "name": "gtrgm_compress",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_consistent(internal, text, smallint, oid, internal)\n RETURNS boolean\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_consistent$function$\n",
          "name": "gtrgm_consistent",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "internal, text, smallint, oid, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_decompress(internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_decompress$function$\n",
          "name": "gtrgm_decompress",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_distance(internal, text, smallint, oid, internal)\n RETURNS double precision\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_distance$function$\n",
          "name": "gtrgm_distance",
          "schema": "public",
          "returns": "double precision",
          "language": "c",
          "signature": "internal, text, smallint, oid, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_in(cstring)\n RETURNS gtrgm\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_in$function$\n",
          "name": "gtrgm_in",
          "schema": "public",
          "returns": "gtrgm",
          "language": "c",
          "signature": "cstring"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_options(internal)\n RETURNS void\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE\nAS '$libdir/pg_trgm', $function$gtrgm_options$function$\n",
          "name": "gtrgm_options",
          "schema": "public",
          "returns": "void",
          "language": "c",
          "signature": "internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_out(gtrgm)\n RETURNS cstring\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_out$function$\n",
          "name": "gtrgm_out",
          "schema": "public",
          "returns": "cstring",
          "language": "c",
          "signature": "gtrgm"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_penalty(internal, internal, internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_penalty$function$\n",
          "name": "gtrgm_penalty",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "internal, internal, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_picksplit(internal, internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_picksplit$function$\n",
          "name": "gtrgm_picksplit",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "internal, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_same(gtrgm, gtrgm, internal)\n RETURNS internal\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_same$function$\n",
          "name": "gtrgm_same",
          "schema": "public",
          "returns": "internal",
          "language": "c",
          "signature": "gtrgm, gtrgm, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.gtrgm_union(internal, internal)\n RETURNS gtrgm\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$gtrgm_union$function$\n",
          "name": "gtrgm_union",
          "schema": "public",
          "returns": "gtrgm",
          "language": "c",
          "signature": "internal, internal"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.handle_new_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth'\nAS $function$\r\nbegin\r\n  -- لا تُدخل صفًا في profiles هنا.\r\n  -- سنقوم بإنشائه/تحديثه لاحقًا عندما نعرف الـ account_id.\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "handle_new_user",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.has_account_access(p_account uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select\r\n    app.is_super_admin()\r\n    or exists (\r\n      select 1\r\n        from public.account_users au\r\n        join public.accounts acc on acc.id = au.account_id\r\n       where au.account_id = p_account\r\n         and au.user_uid   = app.jwt_uid()\r\n         and au.disabled   = false\r\n         and acc.frozen    = false\r\n    );\r\n$function$\n",
          "name": "has_account_access",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http(request http_request)\n RETURNS http_response\n LANGUAGE c\nAS '$libdir/http', $function$http_request$function$\n",
          "name": "http",
          "schema": "public",
          "returns": "http_response",
          "language": "c",
          "signature": "request http_request"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_delete(uri character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('DELETE', $1, NULL, NULL, NULL)::public.http_request) $function$\n",
          "name": "http_delete",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_delete(uri character varying, content character varying, content_type character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('DELETE', $1, NULL, $3, $2)::public.http_request) $function$\n",
          "name": "http_delete",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying, content character varying, content_type character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_get(uri character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('GET', $1, NULL, NULL, NULL)::public.http_request) $function$\n",
          "name": "http_get",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_get(uri character varying, data jsonb)\n RETURNS http_response\n LANGUAGE sql\nAS $function$\n        SELECT public.http(('GET', $1 || '?' || public.urlencode($2), NULL, NULL, NULL)::public.http_request)\n    $function$\n",
          "name": "http_get",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying, data jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_head(uri character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('HEAD', $1, NULL, NULL, NULL)::public.http_request) $function$\n",
          "name": "http_head",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_header(field character varying, value character varying)\n RETURNS http_header\n LANGUAGE sql\nAS $function$ SELECT $1, $2 $function$\n",
          "name": "http_header",
          "schema": "public",
          "returns": "http_header",
          "language": "sql",
          "signature": "field character varying, value character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_list_curlopt()\n RETURNS TABLE(curlopt text, value text)\n LANGUAGE c\nAS '$libdir/http', $function$http_list_curlopt$function$\n",
          "name": "http_list_curlopt",
          "schema": "public",
          "returns": "TABLE(curlopt text, value text)",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_patch(uri character varying, content character varying, content_type character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('PATCH', $1, NULL, $3, $2)::public.http_request) $function$\n",
          "name": "http_patch",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying, content character varying, content_type character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_post(uri character varying, content character varying, content_type character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('POST', $1, NULL, $3, $2)::public.http_request) $function$\n",
          "name": "http_post",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying, content character varying, content_type character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_post(uri character varying, data jsonb)\n RETURNS http_response\n LANGUAGE sql\nAS $function$\n        SELECT public.http(('POST', $1, NULL, 'application/x-www-form-urlencoded', public.urlencode($2))::public.http_request)\n    $function$\n",
          "name": "http_post",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying, data jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_put(uri character varying, content character varying, content_type character varying)\n RETURNS http_response\n LANGUAGE sql\nAS $function$ SELECT public.http(('PUT', $1, NULL, $3, $2)::public.http_request) $function$\n",
          "name": "http_put",
          "schema": "public",
          "returns": "http_response",
          "language": "sql",
          "signature": "uri character varying, content character varying, content_type character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_reset_curlopt()\n RETURNS boolean\n LANGUAGE c\nAS '$libdir/http', $function$http_reset_curlopt$function$\n",
          "name": "http_reset_curlopt",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.http_set_curlopt(curlopt character varying, value character varying)\n RETURNS boolean\n LANGUAGE c\nAS '$libdir/http', $function$http_set_curlopt$function$\n",
          "name": "http_set_curlopt",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "curlopt character varying, value character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_account_member(aid uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select\r\n    exists (\r\n      select 1\r\n      from public.account_users au\r\n      where au.account_id = aid\r\n        and au.user_uid   = auth.uid()\r\n        and coalesce(au.disabled,false) = false\r\n    )\r\n    or exists (\r\n      select 1\r\n      from public.accounts a\r\n      where a.id = aid and a.owner_uid = auth.uid()\r\n    )\r\n    or public.is_superadmin();\r\n$function$\n",
          "name": "is_account_member",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "aid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_account_owner(p_account_id uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select exists(\r\n    select 1 from public.accounts a\r\n    where a.id = p_account_id and a.owner_uid = auth.uid()\r\n  );\r\n$function$\n",
          "name": "is_account_owner",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_conv_member(p_conversation_id uuid, p_user_uid uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  SELECT EXISTS (\r\n    SELECT 1\r\n    FROM public.chat_participants cp\r\n    WHERE cp.conversation_id = p_conversation_id\r\n      AND cp.user_uid        = p_user_uid\r\n  );\r\n$function$\n",
          "name": "is_conv_member",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_conversation_id uuid, p_user_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_member_of_account(p_account_id uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select\r\n    lower(coalesce(auth.jwt()->>'email','')) = lower('aelmam.app@gmail.com')\r\n    or exists (\r\n      select 1\r\n      from public.account_users au\r\n      where au.account_id = p_account_id\r\n        and au.user_uid   = auth.uid()\r\n        and coalesce(au.disabled,false) = false\r\n    );\r\n$function$\n",
          "name": "is_member_of_account",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_account_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_owner_of_account(acc uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select exists (\r\n    select 1 from public.accounts a\r\n    where a.id = acc and a.owner_uid = auth.uid()\r\n  );\r\n$function$\n",
          "name": "is_owner_of_account",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "acc uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_participant(p_conv uuid, p_uid uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select exists (\r\n    select 1\r\n    from public.chat_participants p\r\n    where p.conversation_id = p_conv\r\n      and p.user_uid       = p_uid\r\n  );\r\n$function$\n",
          "name": "is_participant",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "p_conv uuid, p_uid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_super_admin()\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select\r\n    auth.uid() = '1af3d832-ee4c-4ca8-92d1-80b32c43fd7a'::uuid\r\n    or lower(coalesce(auth.jwt()->>'email','')) = 'aelmam.app@gmail.com';\r\n$function$\n",
          "name": "is_super_admin",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.is_superadmin()\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select exists (\r\n    select 1 from public.profiles p\r\n    where p.id = auth.uid() and p.role = 'superadmin'\r\n  )\r\n$function$\n",
          "name": "is_superadmin",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.list_employees_with_email(p_account uuid)\n RETURNS TABLE(user_uid uuid, email text)\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public', 'auth', 'pg_temp'\nAS $function$\r\nbegin\r\n  -- تصريح الوصول: المالك فقط\r\n  if not exists (\r\n    select 1\r\n    from public.account_users au\r\n    where au.account_id = p_account\r\n      and au.user_uid  = auth.uid()\r\n      and au.role      = 'owner'\r\n  ) then\r\n    raise exception 'forbidden';\r\n  end if;\r\n\r\n  return query\r\n  with id_email as (\r\n    select i.user_id,\r\n           -- حاول الحصول على الإيميل من identities بالترتيب المفضل\r\n           (i.identity_data->>'email') as id_email,\r\n           row_number() over (\r\n             partition by i.user_id\r\n             order by case i.provider\r\n                        when 'email' then 1\r\n                        when 'google' then 2\r\n                        when 'apple'  then 3\r\n                        else 9\r\n                      end\r\n           ) as rn\r\n    from auth.identities i\r\n    where (i.identity_data->>'email') is not null\r\n  )\r\n  select\r\n    au.user_uid,\r\n    coalesce(\r\n      u.email::text,\r\n      (select id_email from id_email ie where ie.user_id = au.user_uid and ie.rn = 1),\r\n      u.raw_user_meta_data->>'email',\r\n      null -- اتركها null إن ما فيه إيميل حقيقي\r\n    ) as email\r\n  from public.account_users au\r\n  left join auth.users u on u.id = au.user_uid\r\n  where au.account_id = p_account;\r\nend;\r\n$function$\n",
          "name": "list_employees_with_email",
          "schema": "public",
          "returns": "TABLE(user_uid uuid, email text)",
          "language": "plpgsql",
          "signature": "p_account uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.moddatetime()\n RETURNS trigger\n LANGUAGE c\nAS '$libdir/moddatetime', $function$moddatetime$function$\n",
          "name": "moddatetime",
          "schema": "public",
          "returns": "trigger",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_account_id()\n RETURNS uuid\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select account_id\r\n  from public.account_users\r\n  where user_uid = auth.uid()\r\n    and coalesce(disabled, false) = false\r\n  order by created_at desc\r\n  limit 1;\r\n$function$\n",
          "name": "my_account_id",
          "schema": "public",
          "returns": "uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_account_ids()\n RETURNS SETOF uuid\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select a.id\r\n  from public.accounts a\r\n  where a.owner_uid = auth.uid()\r\n  union\r\n  select au.account_id\r\n  from public.account_users au\r\n  where au.user_uid = auth.uid()\r\n    and coalesce(au.disabled,false) = false\r\n$function$\n",
          "name": "my_account_ids",
          "schema": "public",
          "returns": "SETOF uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_accounts()\n RETURNS SETOF uuid\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select account_id\r\n  from public.account_users\r\n  where user_uid = auth.uid()\r\n    and coalesce(disabled, false) = false\r\n  order by created_at desc;\r\n$function$\n",
          "name": "my_accounts",
          "schema": "public",
          "returns": "SETOF uuid",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_conversations(p_limit integer DEFAULT 20)\n RETURNS SETOF chat_conversations\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select c.*\r\n  from public.chat_conversations c\r\n  where public.conv_has_member(c.id, auth.uid())  -- ← حددنا وسيطين\r\n  order by coalesce(c.last_msg_at, c.created_at) desc\r\n  limit coalesce(p_limit, 20)\r\n$function$\n",
          "name": "my_conversations",
          "schema": "public",
          "returns": "SETOF chat_conversations",
          "language": "sql",
          "signature": "p_limit integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_feature_permissions(p_account uuid)\n RETURNS TABLE(allowed_features text[], can_create boolean, can_update boolean, can_delete boolean)\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select\r\n    coalesce(afp.allowed_features, array[]::text[]) as allowed_features,\r\n    coalesce(afp.can_create, true)  as can_create,\r\n    coalesce(afp.can_update, true)  as can_update,\r\n    coalesce(afp.can_delete, true)  as can_delete\r\n  from public.account_feature_permissions afp\r\n  where afp.account_id = p_account\r\n    and afp.user_uid  = auth.uid()\r\n  limit 1\r\n$function$\n",
          "name": "my_feature_permissions",
          "schema": "public",
          "returns": "TABLE(allowed_features text[], can_create boolean, can_update boolean, can_delete boolean)",
          "language": "sql",
          "signature": "p_account uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_messages(p_conversation uuid, p_limit integer DEFAULT 50)\n RETURNS SETOF chat_messages\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select m.*\r\n  from public.chat_messages m\r\n  where m.conversation_id = p_conversation\r\n    and public.conv_has_member(m.conversation_id, auth.uid())  -- ← وسيطان\r\n  order by m.created_at desc\r\n  limit coalesce(p_limit, 50)\r\n$function$\n",
          "name": "my_messages",
          "schema": "public",
          "returns": "SETOF chat_messages",
          "language": "sql",
          "signature": "p_conversation uuid, p_limit integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.my_profile()\n RETURNS TABLE(id uuid, email text, role text, account_id uuid)\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select\r\n    u.id,\r\n    u.email,\r\n    p.role,\r\n    my_account_id() as account_id\r\n  from auth.users u\r\n  left join profiles p on p.id = u.id\r\n  where u.id = auth.uid()\r\n$function$\n",
          "name": "my_profile",
          "schema": "public",
          "returns": "TABLE(id uuid, email text, role text, account_id uuid)",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.reaction_counts_for_conversation(p_conv uuid)\n RETURNS TABLE(message_id uuid, emoji text, cnt integer)\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select r.message_id, r.emoji, count(*)::int as cnt\r\n  from public.chat_reactions r\r\n  join public.chat_messages m on m.id = r.message_id\r\n  where m.conversation_id = p_conv\r\n  group by r.message_id, r.emoji\r\n$function$\n",
          "name": "reaction_counts_for_conversation",
          "schema": "public",
          "returns": "TABLE(message_id uuid, emoji text, cnt integer)",
          "language": "sql",
          "signature": "p_conv uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.reaction_counts_for_message(p_msg uuid)\n RETURNS TABLE(emoji text, cnt integer)\n LANGUAGE sql\n STABLE\nAS $function$\r\n  select r.emoji, count(*)::int as cnt\r\n  from public.chat_reactions r\r\n  where r.message_id = p_msg\r\n  group by r.emoji\r\n$function$\n",
          "name": "reaction_counts_for_message",
          "schema": "public",
          "returns": "TABLE(emoji text, cnt integer)",
          "language": "sql",
          "signature": "p_msg uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.refresh_conv_last_msg(p_conv uuid)\n RETURNS void\n LANGUAGE sql\nAS $function$\r\n  with last as (\r\n    select id, created_at,\r\n           coalesce(nullif(trim(text), ''), nullif(trim(body), '')) as snippet\r\n    from public.chat_messages\r\n    where conversation_id = p_conv\r\n      and coalesce(deleted,false) = false\r\n    order by created_at desc\r\n    limit 1\r\n  )\r\n  update public.chat_conversations c\r\n     set last_msg_at      = l.created_at,\r\n         last_msg_snippet = l.snippet\r\n  from last l\r\n  where c.id = p_conv;\r\n$function$\n",
          "name": "refresh_conv_last_msg",
          "schema": "public",
          "returns": "void",
          "language": "sql",
          "signature": "p_conv uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.rpc_start_dm(target_email text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  _me uuid := auth.uid();\r\n  _my_acc uuid;\r\n  _is_super boolean := false;\r\n  _target record;\r\n  _conv uuid;\r\n  _now timestamptz := NOW();\r\nBEGIN\r\n  IF _me IS NULL THEN\r\n    RAISE EXCEPTION 'auth required';\r\n  END IF;\r\n\r\n  SELECT account_id, (lower(role)='superadmin') INTO _my_acc, _is_super\r\n  FROM public.account_users\r\n  WHERE user_uid = _me\r\n  ORDER BY created_at DESC\r\n  LIMIT 1;\r\n\r\n  IF NOT _is_super THEN\r\n    SELECT user_uid, email, account_id, role\r\n      INTO _target\r\n    FROM public.account_users\r\n    WHERE account_id = _my_acc\r\n      AND lower(email) = lower(target_email)\r\n    LIMIT 1;\r\n  ELSE\r\n    SELECT user_uid, email, account_id, role\r\n      INTO _target\r\n    FROM public.account_users\r\n    WHERE lower(email) = lower(target_email)\r\n    LIMIT 1;\r\n  END IF;\r\n\r\n  IF NOT FOUND THEN\r\n    RAISE EXCEPTION 'target not found';\r\n  END IF;\r\n\r\n  IF _target.user_uid = _me THEN\r\n    RAISE EXCEPTION 'cannot DM yourself';\r\n  END IF;\r\n\r\n  -- إن وُجدت محادثة مباشرة قائمة بين الطرفين، أعدها\r\n  SELECT c.id\r\n    INTO _conv\r\n  FROM public.chat_conversations c\r\n  JOIN public.chat_participants p1 ON p1.conversation_id = c.id AND p1.user_uid = _me\r\n  JOIN public.chat_participants p2 ON p2.conversation_id = c.id AND p2.user_uid = _target.user_uid\r\n  WHERE c.is_group = FALSE\r\n  LIMIT 1;\r\n\r\n  IF _conv IS NOT NULL THEN\r\n    RETURN _conv;\r\n  END IF;\r\n\r\n  -- أنشئ المحادثة + سيُضاف المنشئ كمشارك تلقائياً عبر التريجر\r\n  INSERT INTO public.chat_conversations(id, account_id, is_group, title, created_by, created_at, updated_at)\r\n  VALUES (gen_random_uuid(), coalesce(_my_acc, _target.account_id), FALSE, NULL, _me, _now, _now)\r\n  RETURNING id INTO _conv;\r\n\r\n  -- أضف الطرف الآخر (upsert احترازي)\r\n  INSERT INTO public.chat_participants (conversation_id, user_uid, email, joined_at)\r\n  VALUES (_conv, _target.user_uid, lower(_target.email), _now)\r\n  ON CONFLICT (conversation_id, user_uid) DO NOTHING;\r\n\r\n  RETURN _conv;\r\nEND;\r\n$function$\n",
          "name": "rpc_start_dm",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "target_email text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.set_employee_disabled(p_account uuid, p_user_uid uuid, p_disabled boolean)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- فقط السوبر أدمن أو مالك/أدمن الحساب\r\n  if lower(coalesce(auth.jwt()->>'email','')) <> 'aelmam.app@gmail.com'\r\n     and not exists (\r\n       select 1\r\n       from public.account_users au\r\n       where au.account_id = p_account\r\n         and au.user_uid   = auth.uid()\r\n         and au.role in ('owner','admin')\r\n         and coalesce(au.disabled,false) = false\r\n     )\r\n  then\r\n    raise exception 'forbidden' using errcode='42501';\r\n  end if;\r\n\r\n  update public.account_users\r\n     set disabled   = coalesce(p_disabled,false),\r\n         updated_at = now()\r\n   where account_id = p_account\r\n     and user_uid   = p_user_uid\r\n     and role       = 'employee';\r\nend;\r\n$function$\n",
          "name": "set_employee_disabled",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_account uuid, p_user_uid uuid, p_disabled boolean"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.set_limit(real)\n RETURNS real\n LANGUAGE c\n STRICT\nAS '$libdir/pg_trgm', $function$set_limit$function$\n",
          "name": "set_limit",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "real"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.set_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  new.updated_at := now();\r\n  return new;\r\nend$function$\n",
          "name": "set_updated_at",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.setup_owner(clinic_name text, owner_email text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare v_owner uuid; v_account uuid;\r\nbegin\r\n  select id into v_owner from auth.users where email = owner_email;\r\n  if v_owner is null then raise exception 'Owner email % not found in auth.users', owner_email; end if;\r\n\r\n  select account_id into v_account from public.profiles where id = v_owner limit 1;\r\n\r\n  if v_account is null then\r\n    insert into public.accounts(name) values (clinic_name) returning id into v_account;\r\n    insert into public.profiles(id, role, account_id)\r\n      values (v_owner, 'owner', v_account)\r\n    on conflict (id) do update set role='owner', account_id=excluded.account_id;\r\n  else\r\n    update public.accounts set name = clinic_name where id = v_account;\r\n    update public.profiles set role='owner' where id = v_owner;\r\n  end if;\r\n  return v_account;\r\nend$function$\n",
          "name": "setup_owner",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "clinic_name text, owner_email text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.setup_superadmin(super_email text)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare v_user uuid; v_account uuid;\r\nbegin\r\n  select id into v_user from auth.users where email = super_email;\r\n  if v_user is null then raise exception 'Super admin email % not found in auth.users', super_email; end if;\r\n\r\n  select id into v_account from public.accounts where name='Root Admin' limit 1;\r\n  if v_account is null then\r\n    insert into public.accounts(name) values ('Root Admin') returning id into v_account;\r\n  end if;\r\n\r\n  insert into public.profiles(id, role, account_id)\r\n    values (v_user, 'superadmin', v_account)\r\n  on conflict (id) do update set role='superadmin', account_id=excluded.account_id;\r\n\r\n  return v_account;\r\nend$function$\n",
          "name": "setup_superadmin",
          "schema": "public",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "super_email text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.setup_sync_table(p_table regclass)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\n    declare\r\n      t_name  text := p_table::text;\r\n      base    text := split_part(t_name, '.', 2);\r\n      idx_name text := format('uix_%s_acc_dev_local', base);\r\n    begin\r\n      perform public._add_col_if_missing(p_table, 'account_id', 'uuid');\r\n      perform public._add_col_if_missing(p_table, 'device_id',  'text');\r\n      perform public._add_col_if_missing(p_table, 'local_id',   'bigint');\r\n\r\n      if not exists (\r\n        select 1 from pg_indexes\r\n        where schemaname='public' and indexname=idx_name\r\n      ) then\r\n        execute format('create unique index %I on %s (account_id, device_id, local_id)', idx_name, t_name);\r\n      end if;\r\n\r\n      execute format('alter table %s enable row level security', t_name);\r\n\r\n      begin execute format(\r\n        'create policy %I on %s for select using (public.fn_is_account_member(account_id))',\r\n        base||'_sel', t_name\r\n      ); exception when duplicate_object then null; end;\r\n\r\n      begin execute format(\r\n        'create policy %I on %s for insert with check (public.fn_can_write_account(account_id))',\r\n        base||'_ins', t_name\r\n      ); exception when duplicate_object then null; end;\r\n\r\n      begin execute format(\r\n        'create policy %I on %s for update using (public.fn_can_write_account(account_id)) with check (public.fn_can_write_account(account_id))',\r\n        base||'_upd', t_name\r\n      ); exception when duplicate_object then null; end;\r\n\r\n      begin execute format(\r\n        'create policy %I on %s for delete using (public.fn_can_write_account(account_id))',\r\n        base||'_del', t_name\r\n      ); exception when duplicate_object then null; end;\r\n    end;\r\n    $function$\n",
          "name": "setup_sync_table",
          "schema": "public",
          "returns": "void",
          "language": "plpgsql",
          "signature": "p_table regclass"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.show_limit()\n RETURNS real\n LANGUAGE c\n STABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$show_limit$function$\n",
          "name": "show_limit",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.show_trgm(text)\n RETURNS text[]\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$show_trgm$function$\n",
          "name": "show_trgm",
          "schema": "public",
          "returns": "text[]",
          "language": "c",
          "signature": "text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.similarity(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$similarity$function$\n",
          "name": "similarity",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.similarity_dist(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$similarity_dist$function$\n",
          "name": "similarity_dist",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.similarity_op(text, text)\n RETURNS boolean\n LANGUAGE c\n STABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$similarity_op$function$\n",
          "name": "similarity_op",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.strict_word_similarity(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$strict_word_similarity$function$\n",
          "name": "strict_word_similarity",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.strict_word_similarity_commutator_op(text, text)\n RETURNS boolean\n LANGUAGE c\n STABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$strict_word_similarity_commutator_op$function$\n",
          "name": "strict_word_similarity_commutator_op",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.strict_word_similarity_dist_commutator_op(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$strict_word_similarity_dist_commutator_op$function$\n",
          "name": "strict_word_similarity_dist_commutator_op",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.strict_word_similarity_dist_op(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$strict_word_similarity_dist_op$function$\n",
          "name": "strict_word_similarity_dist_op",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.strict_word_similarity_op(text, text)\n RETURNS boolean\n LANGUAGE c\n STABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$strict_word_similarity_op$function$\n",
          "name": "strict_word_similarity_op",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.text_to_bytea(data text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/http', $function$text_to_bytea$function$\n",
          "name": "text_to_bytea",
          "schema": "public",
          "returns": "bytea",
          "language": "c",
          "signature": "data text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.tg__audit_log()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\ndeclare\r\n  v_actor   uuid := auth.uid();\r\n  v_email   text := current_setting('request.jwt.claim.email', true);\r\n  v_before  jsonb;\r\n  v_after   jsonb;\r\n  v_diff    jsonb;\r\n  v_pk      text;\r\n  v_acc     uuid := coalesce( (to_jsonb(new)->>'account_id')::uuid\r\n                            , (to_jsonb(old)->>'account_id')::uuid );\r\nbegin\r\n  if TG_OP = 'INSERT' then\r\n    v_after := to_jsonb(NEW);\r\n  elsif TG_OP = 'UPDATE' then\r\n    v_before := to_jsonb(OLD);\r\n    v_after  := to_jsonb(NEW);\r\n    -- اختلاف الحقول\r\n    v_diff := (\r\n      select jsonb_object_agg(k, jsonb_build_object('from', v_before->k, 'to', v_after->k))\r\n      from (\r\n        select key as k\r\n        from jsonb_each(v_after)\r\n        where (v_before->key) is distinct from (v_after->key)\r\n      ) s\r\n    );\r\n  else\r\n    v_before := to_jsonb(OLD);\r\n  end if;\r\n\r\n  -- محاولة استخراج مفتاح السطر (id/local_id)\r\n  v_pk := coalesce(\r\n      to_jsonb(coalesce(NEW,OLD))->>'id',\r\n      to_jsonb(coalesce(NEW,OLD))->>'local_id'\r\n    );\r\n\r\n  insert into public.audit_logs(account_id, actor_uid, actor_email, table_name, op, row_pk, before_row, after_row, diff, created_at)\r\n  values (\r\n    v_acc,\r\n    v_actor,\r\n    v_email,\r\n    TG_TABLE_NAME,\r\n    lower(TG_OP),\r\n    v_pk,\r\n    v_before,\r\n    v_after,\r\n    v_diff,\r\n    now()\r\n  );\r\n\r\n  if TG_OP = 'DELETE' then\r\n    return OLD;\r\n  else\r\n    return NEW;\r\n  end if;\r\nend $function$\n",
          "name": "tg__audit_log",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.tg_accounts_fill_owner_uid()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.owner_uid IS NULL THEN\r\n    -- في سياق المستخدم العادي فقط\r\n    NEW.owner_uid := auth.uid();\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n",
          "name": "tg_accounts_fill_owner_uid",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.tg_fill_account_id()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  if new.account_id is null then\r\n    new.account_id := public.account_id_of();\r\n  end if;\r\n  return new;\r\nend $function$\n",
          "name": "tg_fill_account_id",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.tg_touch_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  new.updated_at := now();\r\n  return new;\r\nend\r\n$function$\n",
          "name": "tg_touch_updated_at",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.touch_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  NEW.updated_at := NOW();\r\n  RETURN NEW;\r\nEND;\r\n$function$\n",
          "name": "touch_updated_at",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_account_users_ensure_clinic()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  perform ensure_clinic_exists(new.account_id);\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "trg_account_users_ensure_clinic",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_account_users_fill_email()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nbegin\r\n  if new.email is null or btrim(new.email) = '' then\r\n    select lower(email) into new.email from auth.users where id = new.user_uid;\r\n  end if;\r\n  new.email := lower(new.email);\r\n  return new;\r\nend$function$\n",
          "name": "trg_account_users_fill_email",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_chat_conversations_ensure_clinic()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  perform ensure_clinic_exists(new.account_id);\r\n  return new;\r\nend;\r\n$function$\n",
          "name": "trg_chat_conversations_ensure_clinic",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_conv_auto_add_creator()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _email text;\r\nBEGIN\r\n  SELECT lower(au.email)\r\n    INTO _email\r\n  FROM account_users au\r\n  WHERE au.user_uid = NEW.created_by\r\n    AND (NEW.account_id IS NULL OR au.account_id = NEW.account_id)\r\n  ORDER BY au.created_at DESC\r\n  LIMIT 1;\r\n\r\n  INSERT INTO chat_participants (conversation_id, user_uid, email, joined_at)\r\n  VALUES (NEW.id, NEW.created_by, coalesce(_email,''), NOW())\r\n  ON CONFLICT (conversation_id, user_uid) DO NOTHING;\r\n\r\n  RETURN NEW;\r\nEND;\r\n$function$\n",
          "name": "trg_conv_auto_add_creator",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_messages_fill_defaults()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _acc uuid;\r\n  _email text;\r\nBEGIN\r\n  IF NEW.created_at IS NULL THEN\r\n    NEW.created_at := NOW();\r\n  END IF;\r\n\r\n  IF NEW.account_id IS NULL THEN\r\n    SELECT account_id INTO _acc\r\n    FROM chat_conversations\r\n    WHERE id = NEW.conversation_id;\r\n    NEW.account_id := _acc;\r\n  END IF;\r\n\r\n  IF NEW.sender_email IS NULL OR length(btrim(NEW.sender_email)) = 0 THEN\r\n    SELECT lower(email) INTO _email\r\n    FROM account_users\r\n    WHERE user_uid = NEW.sender_uid\r\n    ORDER BY created_at DESC\r\n    LIMIT 1;\r\n    NEW.sender_email := coalesce(_email, '');\r\n  ELSE\r\n    NEW.sender_email := lower(NEW.sender_email);\r\n  END IF;\r\n\r\n  RETURN NEW;\r\nEND;\r\n$function$\n",
          "name": "trg_messages_fill_defaults",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_messages_update_conversation_last()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _last_at timestamptz;\r\n  _last_kind text;\r\n  _last_body text;\r\n  _snippet  text;\r\n  _cid uuid := COALESCE(NEW.conversation_id, OLD.conversation_id);\r\nBEGIN\r\n  SELECT created_at, kind, body\r\n    INTO _last_at, _last_kind, _last_body\r\n  FROM chat_messages\r\n  WHERE conversation_id = _cid\r\n    AND (deleted IS DISTINCT FROM TRUE)\r\n  ORDER BY created_at DESC\r\n  LIMIT 1;\r\n\r\n  IF _last_at IS NULL THEN\r\n    UPDATE chat_conversations\r\n      SET last_msg_at = NULL,\r\n          last_msg_snippet = NULL\r\n    WHERE id = _cid;\r\n  ELSE\r\n    _snippet := public.build_msg_snippet(_last_kind, _last_body);\r\n    UPDATE chat_conversations\r\n      SET last_msg_at = _last_at,\r\n          last_msg_snippet = _snippet\r\n    WHERE id = _cid;\r\n  END IF;\r\n\r\n  RETURN COALESCE(NEW, OLD);\r\nEND;\r\n$function$\n",
          "name": "trg_messages_update_conversation_last",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_msg_after_change()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\ndeclare v uuid;\r\nbegin\r\n  v := coalesce(new.conversation_id, old.conversation_id);\r\n  if v is not null then\r\n    perform public.refresh_conv_last_msg(v);\r\n  end if;\r\n\r\n  if tg_op = 'DELETE' then\r\n    return old;\r\n  else\r\n    return new;\r\n  end if;\r\nend$function$\n",
          "name": "trg_msg_after_change",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.trg_participants_normalize_email()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _fallback text;\r\nBEGIN\r\n  IF NEW.email IS NULL OR length(btrim(NEW.email)) = 0 THEN\r\n    SELECT lower(email) INTO _fallback\r\n    FROM account_users\r\n    WHERE user_uid = NEW.user_uid\r\n    ORDER BY created_at DESC\r\n    LIMIT 1;\r\n\r\n    NEW.email := coalesce(_fallback, '');\r\n  END IF;\r\n\r\n  NEW.email := lower(coalesce(NEW.email, ''));\r\n  RETURN NEW;\r\nEND;\r\n$function$\n",
          "name": "trg_participants_normalize_email",
          "schema": "public",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.urlencode(data jsonb)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/http', $function$urlencode_jsonb$function$\n",
          "name": "urlencode",
          "schema": "public",
          "returns": "text",
          "language": "c",
          "signature": "data jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.urlencode(string bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/http', $function$urlencode$function$\n",
          "name": "urlencode",
          "schema": "public",
          "returns": "text",
          "language": "c",
          "signature": "string bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.urlencode(string character varying)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/http', $function$urlencode$function$\n",
          "name": "urlencode",
          "schema": "public",
          "returns": "text",
          "language": "c",
          "signature": "string character varying"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.user_in_account(aid uuid)\n RETURNS boolean\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  select exists (\r\n    select 1\r\n    from public.account_users au\r\n    where au.user_uid = auth.uid()\r\n      and au.account_id = aid\r\n      and coalesce(au.disabled, false) = false\r\n  );\r\n$function$\n",
          "name": "user_in_account",
          "schema": "public",
          "returns": "boolean",
          "language": "sql",
          "signature": "aid uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.word_similarity(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$word_similarity$function$\n",
          "name": "word_similarity",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.word_similarity_commutator_op(text, text)\n RETURNS boolean\n LANGUAGE c\n STABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$word_similarity_commutator_op$function$\n",
          "name": "word_similarity_commutator_op",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.word_similarity_dist_commutator_op(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$word_similarity_dist_commutator_op$function$\n",
          "name": "word_similarity_dist_commutator_op",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.word_similarity_dist_op(text, text)\n RETURNS real\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$word_similarity_dist_op$function$\n",
          "name": "word_similarity_dist_op",
          "schema": "public",
          "returns": "real",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION public.word_similarity_op(text, text)\n RETURNS boolean\n LANGUAGE c\n STABLE PARALLEL SAFE STRICT\nAS '$libdir/pg_trgm', $function$word_similarity_op$function$\n",
          "name": "word_similarity_op",
          "schema": "public",
          "returns": "boolean",
          "language": "c",
          "signature": "text, text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024))\n RETURNS SETOF realtime.wal_rls\n LANGUAGE plpgsql\nAS $function$\ndeclare\n-- Regclass of the table e.g. public.notes\nentity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;\n\n-- I, U, D, T: insert, update ...\naction realtime.action = (\n    case wal ->> 'action'\n        when 'I' then 'INSERT'\n        when 'U' then 'UPDATE'\n        when 'D' then 'DELETE'\n        else 'ERROR'\n    end\n);\n\n-- Is row level security enabled for the table\nis_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;\n\nsubscriptions realtime.subscription[] = array_agg(subs)\n    from\n        realtime.subscription subs\n    where\n        subs.entity = entity_;\n\n-- Subscription vars\nroles regrole[] = array_agg(distinct us.claims_role::text)\n    from\n        unnest(subscriptions) us;\n\nworking_role regrole;\nclaimed_role regrole;\nclaims jsonb;\n\nsubscription_id uuid;\nsubscription_has_access bool;\nvisible_to_subscription_ids uuid[] = '{}';\n\n-- structured info for wal's columns\ncolumns realtime.wal_column[];\n-- previous identity values for update/delete\nold_columns realtime.wal_column[];\n\nerror_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;\n\n-- Primary jsonb output for record\noutput jsonb;\n\nbegin\nperform set_config('role', null, true);\n\ncolumns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'columns') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nold_columns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'identity') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nfor working_role in select * from unnest(roles) loop\n\n    -- Update `is_selectable` for columns and old_columns\n    columns =\n        array_agg(\n            (\n                c.name,\n                c.type_name,\n                c.type_oid,\n                c.value,\n                c.is_pkey,\n                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n            )::realtime.wal_column\n        )\n        from\n            unnest(columns) c;\n\n    old_columns =\n            array_agg(\n                (\n                    c.name,\n                    c.type_name,\n                    c.type_oid,\n                    c.value,\n                    c.is_pkey,\n                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n                )::realtime.wal_column\n            )\n            from\n                unnest(old_columns) c;\n\n    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            -- subscriptions is already filtered by entity\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 400: Bad Request, no primary key']\n        )::realtime.wal_rls;\n\n    -- The claims role does not have SELECT permission to the primary key of entity\n    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 401: Unauthorized']\n        )::realtime.wal_rls;\n\n    else\n        output = jsonb_build_object(\n            'schema', wal ->> 'schema',\n            'table', wal ->> 'table',\n            'type', action,\n            'commit_timestamp', to_char(\n                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),\n                'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'\n            ),\n            'columns', (\n                select\n                    jsonb_agg(\n                        jsonb_build_object(\n                            'name', pa.attname,\n                            'type', pt.typname\n                        )\n                        order by pa.attnum asc\n                    )\n                from\n                    pg_attribute pa\n                    join pg_type pt\n                        on pa.atttypid = pt.oid\n                where\n                    attrelid = entity_\n                    and attnum > 0\n                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')\n            )\n        )\n        -- Add \"record\" key for insert and update\n        || case\n            when action in ('INSERT', 'UPDATE') then\n                jsonb_build_object(\n                    'record',\n                    (\n                        select\n                            jsonb_object_agg(\n                                -- if unchanged toast, get column name and value from old record\n                                coalesce((c).name, (oc).name),\n                                case\n                                    when (c).name is null then (oc).value\n                                    else (c).value\n                                end\n                            )\n                        from\n                            unnest(columns) c\n                            full outer join unnest(old_columns) oc\n                                on (c).name = (oc).name\n                        where\n                            coalesce((c).is_selectable, (oc).is_selectable)\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                    )\n                )\n            else '{}'::jsonb\n        end\n        -- Add \"old_record\" key for update and delete\n        || case\n            when action = 'UPDATE' then\n                jsonb_build_object(\n                        'old_record',\n                        (\n                            select jsonb_object_agg((c).name, (c).value)\n                            from unnest(old_columns) c\n                            where\n                                (c).is_selectable\n                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                        )\n                    )\n            when action = 'DELETE' then\n                jsonb_build_object(\n                    'old_record',\n                    (\n                        select jsonb_object_agg((c).name, (c).value)\n                        from unnest(old_columns) c\n                        where\n                            (c).is_selectable\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey\n                    )\n                )\n            else '{}'::jsonb\n        end;\n\n        -- Create the prepared statement\n        if is_rls_enabled and action <> 'DELETE' then\n            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then\n                deallocate walrus_rls_stmt;\n            end if;\n            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);\n        end if;\n\n        visible_to_subscription_ids = '{}';\n\n        for subscription_id, claims in (\n                select\n                    subs.subscription_id,\n                    subs.claims\n                from\n                    unnest(subscriptions) subs\n                where\n                    subs.entity = entity_\n                    and subs.claims_role = working_role\n                    and (\n                        realtime.is_visible_through_filters(columns, subs.filters)\n                        or (\n                          action = 'DELETE'\n                          and realtime.is_visible_through_filters(old_columns, subs.filters)\n                        )\n                    )\n        ) loop\n\n            if not is_rls_enabled or action = 'DELETE' then\n                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n            else\n                -- Check if RLS allows the role to see the record\n                perform\n                    -- Trim leading and trailing quotes from working_role because set_config\n                    -- doesn't recognize the role as valid if they are included\n                    set_config('role', trim(both '\"' from working_role::text), true),\n                    set_config('request.jwt.claims', claims::text, true);\n\n                execute 'execute walrus_rls_stmt' into subscription_has_access;\n\n                if subscription_has_access then\n                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n                end if;\n            end if;\n        end loop;\n\n        perform set_config('role', null, true);\n\n        return next (\n            output,\n            is_rls_enabled,\n            visible_to_subscription_ids,\n            case\n                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']\n                else '{}'\n            end\n        )::realtime.wal_rls;\n\n    end if;\nend loop;\n\nperform set_config('role', null, true);\nend;\n$function$\n",
          "name": "apply_rls",
          "schema": "realtime",
          "returns": "SETOF realtime.wal_rls",
          "language": "plpgsql",
          "signature": "wal jsonb, max_record_bytes integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    -- Declare a variable to hold the JSONB representation of the row\n    row_data jsonb := '{}'::jsonb;\nBEGIN\n    IF level = 'STATEMENT' THEN\n        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';\n    END IF;\n    -- Check the operation type and handle accordingly\n    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN\n        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);\n        PERFORM realtime.send (row_data, event_name, topic_name);\n    ELSE\n        RAISE EXCEPTION 'Unexpected operation type: %', operation;\n    END IF;\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;\nEND;\n\n$function$\n",
          "name": "broadcast_changes",
          "schema": "realtime",
          "returns": "void",
          "language": "plpgsql",
          "signature": "topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[])\n RETURNS text\n LANGUAGE sql\nAS $function$\n      /*\n      Builds a sql string that, if executed, creates a prepared statement to\n      tests retrive a row from *entity* by its primary key columns.\n      Example\n          select realtime.build_prepared_statement_sql('public.notes', '{\"id\"}'::text[], '{\"bigint\"}'::text[])\n      */\n          select\n      'prepare ' || prepared_statement_name || ' as\n          select\n              exists(\n                  select\n                      1\n                  from\n                      ' || entity || '\n                  where\n                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '\n              )'\n          from\n              unnest(columns) pkc\n          where\n              pkc.is_pkey\n          group by\n              entity\n      $function$\n",
          "name": "build_prepared_statement_sql",
          "schema": "realtime",
          "returns": "text",
          "language": "sql",
          "signature": "prepared_statement_name text, entity regclass, columns realtime.wal_column[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.\"cast\"(val text, type_ regtype)\n RETURNS jsonb\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\n    declare\n      res jsonb;\n    begin\n      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;\n      return res;\n    end\n    $function$\n",
          "name": "cast",
          "schema": "realtime",
          "returns": "jsonb",
          "language": "plpgsql",
          "signature": "val text, type_ regtype"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text)\n RETURNS boolean\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\n      /*\n      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness\n      */\n      declare\n          op_symbol text = (\n              case\n                  when op = 'eq' then '='\n                  when op = 'neq' then '!='\n                  when op = 'lt' then '<'\n                  when op = 'lte' then '<='\n                  when op = 'gt' then '>'\n                  when op = 'gte' then '>='\n                  when op = 'in' then '= any'\n                  else 'UNKNOWN OP'\n              end\n          );\n          res boolean;\n      begin\n          execute format(\n              'select %L::'|| type_::text || ' ' || op_symbol\n              || ' ( %L::'\n              || (\n                  case\n                      when op = 'in' then type_::text || '[]'\n                      else type_::text end\n              )\n              || ')', val_1, val_2) into res;\n          return res;\n      end;\n      $function$\n",
          "name": "check_equality_op",
          "schema": "realtime",
          "returns": "boolean",
          "language": "plpgsql",
          "signature": "op realtime.equality_op, type_ regtype, val_1 text, val_2 text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[])\n RETURNS boolean\n LANGUAGE sql\n IMMUTABLE\nAS $function$\n    /*\n    Should the record be visible (true) or filtered out (false) after *filters* are applied\n    */\n        select\n            -- Default to allowed when no filters present\n            $2 is null -- no filters. this should not happen because subscriptions has a default\n            or array_length($2, 1) is null -- array length of an empty array is null\n            or bool_and(\n                coalesce(\n                    realtime.check_equality_op(\n                        op:=f.op,\n                        type_:=coalesce(\n                            col.type_oid::regtype, -- null when wal2json version <= 2.4\n                            col.type_name::regtype\n                        ),\n                        -- cast jsonb to text\n                        val_1:=col.value #>> '{}',\n                        val_2:=f.value\n                    ),\n                    false -- if null, filter does not match\n                )\n            )\n        from\n            unnest(filters) f\n            join unnest(columns) col\n                on f.column_name = col.name;\n    $function$\n",
          "name": "is_visible_through_filters",
          "schema": "realtime",
          "returns": "boolean",
          "language": "sql",
          "signature": "columns realtime.wal_column[], filters realtime.user_defined_filter[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer)\n RETURNS SETOF realtime.wal_rls\n LANGUAGE sql\n SET log_min_messages TO 'fatal'\nAS $function$\n      with pub as (\n        select\n          concat_ws(\n            ',',\n            case when bool_or(pubinsert) then 'insert' else null end,\n            case when bool_or(pubupdate) then 'update' else null end,\n            case when bool_or(pubdelete) then 'delete' else null end\n          ) as w2j_actions,\n          coalesce(\n            string_agg(\n              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),\n              ','\n            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),\n            ''\n          ) w2j_add_tables\n        from\n          pg_publication pp\n          left join pg_publication_tables ppt\n            on pp.pubname = ppt.pubname\n        where\n          pp.pubname = publication\n        group by\n          pp.pubname\n        limit 1\n      ),\n      w2j as (\n        select\n          x.*, pub.w2j_add_tables\n        from\n          pub,\n          pg_logical_slot_get_changes(\n            slot_name, null, max_changes,\n            'include-pk', 'true',\n            'include-transaction', 'false',\n            'include-timestamp', 'true',\n            'include-type-oids', 'true',\n            'format-version', '2',\n            'actions', pub.w2j_actions,\n            'add-tables', pub.w2j_add_tables\n          ) x\n      )\n      select\n        xyz.wal,\n        xyz.is_rls_enabled,\n        xyz.subscription_ids,\n        xyz.errors\n      from\n        w2j,\n        realtime.apply_rls(\n          wal := w2j.data::jsonb,\n          max_record_bytes := max_record_bytes\n        ) xyz(wal, is_rls_enabled, subscription_ids, errors)\n      where\n        w2j.w2j_add_tables <> ''\n        and xyz.subscription_ids[1] is not null\n    $function$\n",
          "name": "list_changes",
          "schema": "realtime",
          "returns": "SETOF realtime.wal_rls",
          "language": "sql",
          "signature": "publication name, slot_name name, max_changes integer, max_record_bytes integer"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.quote_wal2json(entity regclass)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\n      select\n        (\n          select string_agg('' || ch,'')\n          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)\n          where\n            not (x.idx = 1 and x.ch = '\"')\n            and not (\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\n              and x.ch = '\"'\n            )\n        )\n        || '.'\n        || (\n          select string_agg('' || ch,'')\n          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)\n          where\n            not (x.idx = 1 and x.ch = '\"')\n            and not (\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\n              and x.ch = '\"'\n            )\n          )\n      from\n        pg_class pc\n        join pg_namespace nsp\n          on pc.relnamespace = nsp.oid\n      where\n        pc.oid = entity\n    $function$\n",
          "name": "quote_wal2json",
          "schema": "realtime",
          "returns": "text",
          "language": "sql",
          "signature": "entity regclass"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  BEGIN\n    -- Set the topic configuration\n    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);\n\n    -- Attempt to insert the message\n    INSERT INTO realtime.messages (payload, event, topic, private, extension)\n    VALUES (payload, event, topic, private, 'broadcast');\n  EXCEPTION\n    WHEN OTHERS THEN\n      -- Capture and notify the error\n      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;\n  END;\nEND;\n$function$\n",
          "name": "send",
          "schema": "realtime",
          "returns": "void",
          "language": "plpgsql",
          "signature": "payload jsonb, event text, topic text, private boolean"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.subscription_check_filters()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\n    /*\n    Validates that the user defined filters for a subscription:\n    - refer to valid columns that the claimed role may access\n    - values are coercable to the correct column type\n    */\n    declare\n        col_names text[] = coalesce(\n                array_agg(c.column_name order by c.ordinal_position),\n                '{}'::text[]\n            )\n            from\n                information_schema.columns c\n            where\n                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity\n                and pg_catalog.has_column_privilege(\n                    (new.claims ->> 'role'),\n                    format('%I.%I', c.table_schema, c.table_name)::regclass,\n                    c.column_name,\n                    'SELECT'\n                );\n        filter realtime.user_defined_filter;\n        col_type regtype;\n\n        in_val jsonb;\n    begin\n        for filter in select * from unnest(new.filters) loop\n            -- Filtered column is valid\n            if not filter.column_name = any(col_names) then\n                raise exception 'invalid column for filter %', filter.column_name;\n            end if;\n\n            -- Type is sanitized and safe for string interpolation\n            col_type = (\n                select atttypid::regtype\n                from pg_catalog.pg_attribute\n                where attrelid = new.entity\n                      and attname = filter.column_name\n            );\n            if col_type is null then\n                raise exception 'failed to lookup type for column %', filter.column_name;\n            end if;\n\n            -- Set maximum number of entries for in filter\n            if filter.op = 'in'::realtime.equality_op then\n                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);\n                if coalesce(jsonb_array_length(in_val), 0) > 100 then\n                    raise exception 'too many values for `in` filter. Maximum 100';\n                end if;\n            else\n                -- raises an exception if value is not coercable to type\n                perform realtime.cast(filter.value, col_type);\n            end if;\n\n        end loop;\n\n        -- Apply consistent order to filters so the unique constraint on\n        -- (subscription_id, entity, filters) can't be tricked by a different filter order\n        new.filters = coalesce(\n            array_agg(f order by f.column_name, f.op, f.value),\n            '{}'\n        ) from unnest(new.filters) f;\n\n        return new;\n    end;\n    $function$\n",
          "name": "subscription_check_filters",
          "schema": "realtime",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.to_regrole(role_name text)\n RETURNS regrole\n LANGUAGE sql\n IMMUTABLE\nAS $function$ select role_name::regrole $function$\n",
          "name": "to_regrole",
          "schema": "realtime",
          "returns": "regrole",
          "language": "sql",
          "signature": "role_name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION realtime.topic()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\nselect nullif(current_setting('realtime.topic', true), '')::text;\n$function$\n",
          "name": "topic",
          "schema": "realtime",
          "returns": "text",
          "language": "sql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.add_prefixes(_bucket_id text, _name text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    prefixes text[];\nBEGIN\n    prefixes := \"storage\".\"get_prefixes\"(\"_name\");\n\n    IF array_length(prefixes, 1) > 0 THEN\n        INSERT INTO storage.prefixes (name, bucket_id)\n        SELECT UNNEST(prefixes) as name, \"_bucket_id\" ON CONFLICT DO NOTHING;\n    END IF;\nEND;\n$function$\n",
          "name": "add_prefixes",
          "schema": "storage",
          "returns": "void",
          "language": "plpgsql",
          "signature": "_bucket_id text, _name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  INSERT INTO \"storage\".\"objects\" (\"bucket_id\", \"name\", \"owner\", \"metadata\") VALUES (bucketid, name, owner, metadata);\n  -- hack to rollback the successful insert\n  RAISE sqlstate 'PT200' using\n  message = 'ROLLBACK',\n  detail = 'rollback successful insert';\nEND\n$function$\n",
          "name": "can_insert_object",
          "schema": "storage",
          "returns": "void",
          "language": "plpgsql",
          "signature": "bucketid text, name text, owner uuid, metadata jsonb"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.delete_leaf_prefixes(bucket_ids text[], names text[])\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    v_rows_deleted integer;\nBEGIN\n    LOOP\n        WITH candidates AS (\n            SELECT DISTINCT\n                t.bucket_id,\n                unnest(storage.get_prefixes(t.name)) AS name\n            FROM unnest(bucket_ids, names) AS t(bucket_id, name)\n        ),\n        uniq AS (\n             SELECT\n                 bucket_id,\n                 name,\n                 storage.get_level(name) AS level\n             FROM candidates\n             WHERE name <> ''\n             GROUP BY bucket_id, name\n        ),\n        leaf AS (\n             SELECT\n                 p.bucket_id,\n                 p.name,\n                 p.level\n             FROM storage.prefixes AS p\n                  JOIN uniq AS u\n                       ON u.bucket_id = p.bucket_id\n                           AND u.name = p.name\n                           AND u.level = p.level\n             WHERE NOT EXISTS (\n                 SELECT 1\n                 FROM storage.objects AS o\n                 WHERE o.bucket_id = p.bucket_id\n                   AND o.level = p.level + 1\n                   AND o.name COLLATE \"C\" LIKE p.name || '/%'\n             )\n             AND NOT EXISTS (\n                 SELECT 1\n                 FROM storage.prefixes AS c\n                 WHERE c.bucket_id = p.bucket_id\n                   AND c.level = p.level + 1\n                   AND c.name COLLATE \"C\" LIKE p.name || '/%'\n             )\n        )\n        DELETE\n        FROM storage.prefixes AS p\n            USING leaf AS l\n        WHERE p.bucket_id = l.bucket_id\n          AND p.name = l.name\n          AND p.level = l.level;\n\n        GET DIAGNOSTICS v_rows_deleted = ROW_COUNT;\n        EXIT WHEN v_rows_deleted = 0;\n    END LOOP;\nEND;\n$function$\n",
          "name": "delete_leaf_prefixes",
          "schema": "storage",
          "returns": "void",
          "language": "plpgsql",
          "signature": "bucket_ids text[], names text[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.delete_prefix(_bucket_id text, _name text)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    -- Check if we can delete the prefix\n    IF EXISTS(\n        SELECT FROM \"storage\".\"prefixes\"\n        WHERE \"prefixes\".\"bucket_id\" = \"_bucket_id\"\n          AND level = \"storage\".\"get_level\"(\"_name\") + 1\n          AND \"prefixes\".\"name\" COLLATE \"C\" LIKE \"_name\" || '/%'\n        LIMIT 1\n    )\n    OR EXISTS(\n        SELECT FROM \"storage\".\"objects\"\n        WHERE \"objects\".\"bucket_id\" = \"_bucket_id\"\n          AND \"storage\".\"get_level\"(\"objects\".\"name\") = \"storage\".\"get_level\"(\"_name\") + 1\n          AND \"objects\".\"name\" COLLATE \"C\" LIKE \"_name\" || '/%'\n        LIMIT 1\n    ) THEN\n    -- There are sub-objects, skip deletion\n    RETURN false;\n    ELSE\n        DELETE FROM \"storage\".\"prefixes\"\n        WHERE \"prefixes\".\"bucket_id\" = \"_bucket_id\"\n          AND level = \"storage\".\"get_level\"(\"_name\")\n          AND \"prefixes\".\"name\" = \"_name\";\n        RETURN true;\n    END IF;\nEND;\n$function$\n",
          "name": "delete_prefix",
          "schema": "storage",
          "returns": "boolean",
          "language": "plpgsql",
          "signature": "_bucket_id text, _name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.delete_prefix_hierarchy_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    prefix text;\nBEGIN\n    prefix := \"storage\".\"get_prefix\"(OLD.\"name\");\n\n    IF coalesce(prefix, '') != '' THEN\n        PERFORM \"storage\".\"delete_prefix\"(OLD.\"bucket_id\", prefix);\n    END IF;\n\n    RETURN OLD;\nEND;\n$function$\n",
          "name": "delete_prefix_hierarchy_trigger",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.enforce_bucket_name_length()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nbegin\n    if length(new.name) > 100 then\n        raise exception 'bucket name \"%\" is too long (% characters). Max is 100.', new.name, length(new.name);\n    end if;\n    return new;\nend;\n$function$\n",
          "name": "enforce_bucket_name_length",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.extension(name text)\n RETURNS text\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\nDECLARE\n    _parts text[];\n    _filename text;\nBEGIN\n    SELECT string_to_array(name, '/') INTO _parts;\n    SELECT _parts[array_length(_parts,1)] INTO _filename;\n    RETURN reverse(split_part(reverse(_filename), '.', 1));\nEND\n$function$\n",
          "name": "extension",
          "schema": "storage",
          "returns": "text",
          "language": "plpgsql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.filename(name text)\n RETURNS text\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n_parts text[];\nBEGIN\n\tselect string_to_array(name, '/') into _parts;\n\treturn _parts[array_length(_parts,1)];\nEND\n$function$\n",
          "name": "filename",
          "schema": "storage",
          "returns": "text",
          "language": "plpgsql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.foldername(name text)\n RETURNS text[]\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\nDECLARE\n    _parts text[];\nBEGIN\n    -- Split on \"/\" to get path segments\n    SELECT string_to_array(name, '/') INTO _parts;\n    -- Return everything except the last segment\n    RETURN _parts[1 : array_length(_parts,1) - 1];\nEND\n$function$\n",
          "name": "foldername",
          "schema": "storage",
          "returns": "text[]",
          "language": "plpgsql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.get_level(name text)\n RETURNS integer\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\nSELECT array_length(string_to_array(\"name\", '/'), 1);\n$function$\n",
          "name": "get_level",
          "schema": "storage",
          "returns": "integer",
          "language": "sql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.get_prefix(name text)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\nSELECT\n    CASE WHEN strpos(\"name\", '/') > 0 THEN\n             regexp_replace(\"name\", '[\\/]{1}[^\\/]+\\/?$', '')\n         ELSE\n             ''\n        END;\n$function$\n",
          "name": "get_prefix",
          "schema": "storage",
          "returns": "text",
          "language": "sql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.get_prefixes(name text)\n RETURNS text[]\n LANGUAGE plpgsql\n IMMUTABLE STRICT\nAS $function$\nDECLARE\n    parts text[];\n    prefixes text[];\n    prefix text;\nBEGIN\n    -- Split the name into parts by '/'\n    parts := string_to_array(\"name\", '/');\n    prefixes := '{}';\n\n    -- Construct the prefixes, stopping one level below the last part\n    FOR i IN 1..array_length(parts, 1) - 1 LOOP\n            prefix := array_to_string(parts[1:i], '/');\n            prefixes := array_append(prefixes, prefix);\n    END LOOP;\n\n    RETURN prefixes;\nEND;\n$function$\n",
          "name": "get_prefixes",
          "schema": "storage",
          "returns": "text[]",
          "language": "plpgsql",
          "signature": "name text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.get_size_by_bucket()\n RETURNS TABLE(size bigint, bucket_id text)\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    return query\n        select sum((metadata->>'size')::bigint) as size, obj.bucket_id\n        from \"storage\".objects as obj\n        group by obj.bucket_id;\nEND\n$function$\n",
          "name": "get_size_by_bucket",
          "schema": "storage",
          "returns": "TABLE(size bigint, bucket_id text)",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text)\n RETURNS TABLE(key text, id text, created_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(key COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))\n                    ELSE\n                        key\n                END AS key, id, created_at\n            FROM\n                storage.s3_multipart_uploads\n            WHERE\n                bucket_id = $5 AND\n                key ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $4 != '''' AND $6 = '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                key COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END AND\n                CASE\n                    WHEN $6 != '''' THEN\n                        id COLLATE \"C\" > $6\n                    ELSE\n                        true\n                    END\n            ORDER BY\n                key COLLATE \"C\" ASC, created_at ASC) as e order by key COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;\nEND;\n$function$\n",
          "name": "list_multipart_uploads_with_delimiter",
          "schema": "storage",
          "returns": "TABLE(key text, id text, created_at timestamp with time zone)",
          "language": "plpgsql",
          "signature": "bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text)\n RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(name COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))\n                    ELSE\n                        name\n                END AS name, id, metadata, updated_at\n            FROM\n                storage.objects\n            WHERE\n                bucket_id = $5 AND\n                name ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $6 != '''' THEN\n                    name COLLATE \"C\" > $6\n                ELSE true END\n                AND CASE\n                    WHEN $4 != '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                name COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END\n            ORDER BY\n                name COLLATE \"C\" ASC) as e order by name COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;\nEND;\n$function$\n",
          "name": "list_objects_with_delimiter",
          "schema": "storage",
          "returns": "TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)",
          "language": "plpgsql",
          "signature": "bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.lock_top_prefixes(bucket_ids text[], names text[])\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    v_bucket text;\n    v_top text;\nBEGIN\n    FOR v_bucket, v_top IN\n        SELECT DISTINCT t.bucket_id,\n            split_part(t.name, '/', 1) AS top\n        FROM unnest(bucket_ids, names) AS t(bucket_id, name)\n        WHERE t.name <> ''\n        ORDER BY 1, 2\n        LOOP\n            PERFORM pg_advisory_xact_lock(hashtextextended(v_bucket || '/' || v_top, 0));\n        END LOOP;\nEND;\n$function$\n",
          "name": "lock_top_prefixes",
          "schema": "storage",
          "returns": "void",
          "language": "plpgsql",
          "signature": "bucket_ids text[], names text[]"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.objects_delete_cleanup()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    v_bucket_ids text[];\n    v_names      text[];\nBEGIN\n    IF current_setting('storage.gc.prefixes', true) = '1' THEN\n        RETURN NULL;\n    END IF;\n\n    PERFORM set_config('storage.gc.prefixes', '1', true);\n\n    SELECT COALESCE(array_agg(d.bucket_id), '{}'),\n           COALESCE(array_agg(d.name), '{}')\n    INTO v_bucket_ids, v_names\n    FROM deleted AS d\n    WHERE d.name <> '';\n\n    PERFORM storage.lock_top_prefixes(v_bucket_ids, v_names);\n    PERFORM storage.delete_leaf_prefixes(v_bucket_ids, v_names);\n\n    RETURN NULL;\nEND;\n$function$\n",
          "name": "objects_delete_cleanup",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.objects_insert_prefix_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    NEW.level := \"storage\".\"get_level\"(NEW.\"name\");\n\n    RETURN NEW;\nEND;\n$function$\n",
          "name": "objects_insert_prefix_trigger",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.objects_update_cleanup()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    -- NEW - OLD (destinations to create prefixes for)\n    v_add_bucket_ids text[];\n    v_add_names      text[];\n\n    -- OLD - NEW (sources to prune)\n    v_src_bucket_ids text[];\n    v_src_names      text[];\nBEGIN\n    IF TG_OP <> 'UPDATE' THEN\n        RETURN NULL;\n    END IF;\n\n    -- 1) Compute NEW−OLD (added paths) and OLD−NEW (moved-away paths)\n    WITH added AS (\n        SELECT n.bucket_id, n.name\n        FROM new_rows n\n        WHERE n.name <> '' AND position('/' in n.name) > 0\n        EXCEPT\n        SELECT o.bucket_id, o.name FROM old_rows o WHERE o.name <> ''\n    ),\n    moved AS (\n         SELECT o.bucket_id, o.name\n         FROM old_rows o\n         WHERE o.name <> ''\n         EXCEPT\n         SELECT n.bucket_id, n.name FROM new_rows n WHERE n.name <> ''\n    )\n    SELECT\n        -- arrays for ADDED (dest) in stable order\n        COALESCE( (SELECT array_agg(a.bucket_id ORDER BY a.bucket_id, a.name) FROM added a), '{}' ),\n        COALESCE( (SELECT array_agg(a.name      ORDER BY a.bucket_id, a.name) FROM added a), '{}' ),\n        -- arrays for MOVED (src) in stable order\n        COALESCE( (SELECT array_agg(m.bucket_id ORDER BY m.bucket_id, m.name) FROM moved m), '{}' ),\n        COALESCE( (SELECT array_agg(m.name      ORDER BY m.bucket_id, m.name) FROM moved m), '{}' )\n    INTO v_add_bucket_ids, v_add_names, v_src_bucket_ids, v_src_names;\n\n    -- Nothing to do?\n    IF (array_length(v_add_bucket_ids, 1) IS NULL) AND (array_length(v_src_bucket_ids, 1) IS NULL) THEN\n        RETURN NULL;\n    END IF;\n\n    -- 2) Take per-(bucket, top) locks: ALL prefixes in consistent global order to prevent deadlocks\n    DECLARE\n        v_all_bucket_ids text[];\n        v_all_names text[];\n    BEGIN\n        -- Combine source and destination arrays for consistent lock ordering\n        v_all_bucket_ids := COALESCE(v_src_bucket_ids, '{}') || COALESCE(v_add_bucket_ids, '{}');\n        v_all_names := COALESCE(v_src_names, '{}') || COALESCE(v_add_names, '{}');\n\n        -- Single lock call ensures consistent global ordering across all transactions\n        IF array_length(v_all_bucket_ids, 1) IS NOT NULL THEN\n            PERFORM storage.lock_top_prefixes(v_all_bucket_ids, v_all_names);\n        END IF;\n    END;\n\n    -- 3) Create destination prefixes (NEW−OLD) BEFORE pruning sources\n    IF array_length(v_add_bucket_ids, 1) IS NOT NULL THEN\n        WITH candidates AS (\n            SELECT DISTINCT t.bucket_id, unnest(storage.get_prefixes(t.name)) AS name\n            FROM unnest(v_add_bucket_ids, v_add_names) AS t(bucket_id, name)\n            WHERE name <> ''\n        )\n        INSERT INTO storage.prefixes (bucket_id, name)\n        SELECT c.bucket_id, c.name\n        FROM candidates c\n        ON CONFLICT DO NOTHING;\n    END IF;\n\n    -- 4) Prune source prefixes bottom-up for OLD−NEW\n    IF array_length(v_src_bucket_ids, 1) IS NOT NULL THEN\n        -- re-entrancy guard so DELETE on prefixes won't recurse\n        IF current_setting('storage.gc.prefixes', true) <> '1' THEN\n            PERFORM set_config('storage.gc.prefixes', '1', true);\n        END IF;\n\n        PERFORM storage.delete_leaf_prefixes(v_src_bucket_ids, v_src_names);\n    END IF;\n\n    RETURN NULL;\nEND;\n$function$\n",
          "name": "objects_update_cleanup",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.objects_update_level_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    -- Ensure this is an update operation and the name has changed\n    IF TG_OP = 'UPDATE' AND (NEW.\"name\" <> OLD.\"name\" OR NEW.\"bucket_id\" <> OLD.\"bucket_id\") THEN\n        -- Set the new level\n        NEW.\"level\" := \"storage\".\"get_level\"(NEW.\"name\");\n    END IF;\n    RETURN NEW;\nEND;\n$function$\n",
          "name": "objects_update_level_trigger",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.objects_update_prefix_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    old_prefixes TEXT[];\nBEGIN\n    -- Ensure this is an update operation and the name has changed\n    IF TG_OP = 'UPDATE' AND (NEW.\"name\" <> OLD.\"name\" OR NEW.\"bucket_id\" <> OLD.\"bucket_id\") THEN\n        -- Retrieve old prefixes\n        old_prefixes := \"storage\".\"get_prefixes\"(OLD.\"name\");\n\n        -- Remove old prefixes that are only used by this object\n        WITH all_prefixes as (\n            SELECT unnest(old_prefixes) as prefix\n        ),\n        can_delete_prefixes as (\n             SELECT prefix\n             FROM all_prefixes\n             WHERE NOT EXISTS (\n                 SELECT 1 FROM \"storage\".\"objects\"\n                 WHERE \"bucket_id\" = OLD.\"bucket_id\"\n                   AND \"name\" <> OLD.\"name\"\n                   AND \"name\" LIKE (prefix || '%')\n             )\n         )\n        DELETE FROM \"storage\".\"prefixes\" WHERE name IN (SELECT prefix FROM can_delete_prefixes);\n\n        -- Add new prefixes\n        PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    END IF;\n    -- Set the new level\n    NEW.\"level\" := \"storage\".\"get_level\"(NEW.\"name\");\n\n    RETURN NEW;\nEND;\n$function$\n",
          "name": "objects_update_prefix_trigger",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.operation()\n RETURNS text\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    RETURN current_setting('storage.operation', true);\nEND;\n$function$\n",
          "name": "operation",
          "schema": "storage",
          "returns": "text",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.prefixes_delete_cleanup()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    v_bucket_ids text[];\n    v_names      text[];\nBEGIN\n    IF current_setting('storage.gc.prefixes', true) = '1' THEN\n        RETURN NULL;\n    END IF;\n\n    PERFORM set_config('storage.gc.prefixes', '1', true);\n\n    SELECT COALESCE(array_agg(d.bucket_id), '{}'),\n           COALESCE(array_agg(d.name), '{}')\n    INTO v_bucket_ids, v_names\n    FROM deleted AS d\n    WHERE d.name <> '';\n\n    PERFORM storage.lock_top_prefixes(v_bucket_ids, v_names);\n    PERFORM storage.delete_leaf_prefixes(v_bucket_ids, v_names);\n\n    RETURN NULL;\nEND;\n$function$\n",
          "name": "prefixes_delete_cleanup",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.prefixes_insert_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    RETURN NEW;\nEND;\n$function$\n",
          "name": "prefixes_insert_trigger",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\nAS $function$\ndeclare\n    can_bypass_rls BOOLEAN;\nbegin\n    SELECT rolbypassrls\n    INTO can_bypass_rls\n    FROM pg_roles\n    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);\n\n    IF can_bypass_rls THEN\n        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\n    ELSE\n        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\n    END IF;\nend;\n$function$\n",
          "name": "search",
          "schema": "storage",
          "returns": "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
          "language": "plpgsql",
          "signature": "prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\ndeclare\n    v_order_by text;\n    v_sort_order text;\nbegin\n    case\n        when sortcolumn = 'name' then\n            v_order_by = 'name';\n        when sortcolumn = 'updated_at' then\n            v_order_by = 'updated_at';\n        when sortcolumn = 'created_at' then\n            v_order_by = 'created_at';\n        when sortcolumn = 'last_accessed_at' then\n            v_order_by = 'last_accessed_at';\n        else\n            v_order_by = 'name';\n        end case;\n\n    case\n        when sortorder = 'asc' then\n            v_sort_order = 'asc';\n        when sortorder = 'desc' then\n            v_sort_order = 'desc';\n        else\n            v_sort_order = 'asc';\n        end case;\n\n    v_order_by = v_order_by || ' ' || v_sort_order;\n\n    return query execute\n        'with folders as (\n           select path_tokens[$1] as folder\n           from storage.objects\n             where objects.name ilike $2 || $3 || ''%''\n               and bucket_id = $4\n               and array_length(objects.path_tokens, 1) <> $1\n           group by folder\n           order by folder ' || v_sort_order || '\n     )\n     (select folder as \"name\",\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[$1] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where objects.name ilike $2 || $3 || ''%''\n       and bucket_id = $4\n       and array_length(objects.path_tokens, 1) = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$function$\n",
          "name": "search_legacy_v1",
          "schema": "storage",
          "returns": "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
          "language": "plpgsql",
          "signature": "prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\ndeclare\n    v_order_by text;\n    v_sort_order text;\nbegin\n    case\n        when sortcolumn = 'name' then\n            v_order_by = 'name';\n        when sortcolumn = 'updated_at' then\n            v_order_by = 'updated_at';\n        when sortcolumn = 'created_at' then\n            v_order_by = 'created_at';\n        when sortcolumn = 'last_accessed_at' then\n            v_order_by = 'last_accessed_at';\n        else\n            v_order_by = 'name';\n        end case;\n\n    case\n        when sortorder = 'asc' then\n            v_sort_order = 'asc';\n        when sortorder = 'desc' then\n            v_sort_order = 'desc';\n        else\n            v_sort_order = 'asc';\n        end case;\n\n    v_order_by = v_order_by || ' ' || v_sort_order;\n\n    return query execute\n        'with folders as (\n           select (string_to_array(name, ''/''))[level] as name\n           from storage.prefixes\n             where lower(prefixes.name) like lower($2 || $3) || ''%''\n               and bucket_id = $4\n               and level = $1\n           order by name ' || v_sort_order || '\n     )\n     (select name,\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[level] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where lower(objects.name) like lower($2 || $3) || ''%''\n       and bucket_id = $4\n       and level = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$function$\n",
          "name": "search_v1_optimised",
          "schema": "storage",
          "returns": "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
          "language": "plpgsql",
          "signature": "prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text, sort_order text DEFAULT 'asc'::text, sort_column text DEFAULT 'name'::text, sort_column_after text DEFAULT ''::text)\n RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\nDECLARE\n    sort_col text;\n    sort_ord text;\n    cursor_op text;\n    cursor_expr text;\n    sort_expr text;\nBEGIN\n    -- Validate sort_order\n    sort_ord := lower(sort_order);\n    IF sort_ord NOT IN ('asc', 'desc') THEN\n        sort_ord := 'asc';\n    END IF;\n\n    -- Determine cursor comparison operator\n    IF sort_ord = 'asc' THEN\n        cursor_op := '>';\n    ELSE\n        cursor_op := '<';\n    END IF;\n    \n    sort_col := lower(sort_column);\n    -- Validate sort column  \n    IF sort_col IN ('updated_at', 'created_at') THEN\n        cursor_expr := format(\n            '($5 = '''' OR ROW(date_trunc(''milliseconds'', %I), name COLLATE \"C\") %s ROW(COALESCE(NULLIF($6, '''')::timestamptz, ''epoch''::timestamptz), $5))',\n            sort_col, cursor_op\n        );\n        sort_expr := format(\n            'COALESCE(date_trunc(''milliseconds'', %I), ''epoch''::timestamptz) %s, name COLLATE \"C\" %s',\n            sort_col, sort_ord, sort_ord\n        );\n    ELSE\n        cursor_expr := format('($5 = '''' OR name COLLATE \"C\" %s $5)', cursor_op);\n        sort_expr := format('name COLLATE \"C\" %s', sort_ord);\n    END IF;\n\n    RETURN QUERY EXECUTE format(\n        $sql$\n        SELECT * FROM (\n            (\n                SELECT\n                    split_part(name, '/', $4) AS key,\n                    name,\n                    NULL::uuid AS id,\n                    updated_at,\n                    created_at,\n                    NULL::timestamptz AS last_accessed_at,\n                    NULL::jsonb AS metadata\n                FROM storage.prefixes\n                WHERE name COLLATE \"C\" LIKE $1 || '%%'\n                    AND bucket_id = $2\n                    AND level = $4\n                    AND %s\n                ORDER BY %s\n                LIMIT $3\n            )\n            UNION ALL\n            (\n                SELECT\n                    split_part(name, '/', $4) AS key,\n                    name,\n                    id,\n                    updated_at,\n                    created_at,\n                    last_accessed_at,\n                    metadata\n                FROM storage.objects\n                WHERE name COLLATE \"C\" LIKE $1 || '%%'\n                    AND bucket_id = $2\n                    AND level = $4\n                    AND %s\n                ORDER BY %s\n                LIMIT $3\n            )\n        ) obj\n        ORDER BY %s\n        LIMIT $3\n        $sql$,\n        cursor_expr,    -- prefixes WHERE\n        sort_expr,      -- prefixes ORDER BY\n        cursor_expr,    -- objects WHERE\n        sort_expr,      -- objects ORDER BY\n        sort_expr       -- final ORDER BY\n    )\n    USING prefix, bucket_name, limits, levels, start_after, sort_column_after;\nEND;\n$function$\n",
          "name": "search_v2",
          "schema": "storage",
          "returns": "TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
          "language": "plpgsql",
          "signature": "prefix text, bucket_name text, limits integer, levels integer, start_after text, sort_order text, sort_column text, sort_column_after text"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION storage.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = now();\n    RETURN NEW; \nEND;\n$function$\n",
          "name": "update_updated_at_column",
          "schema": "storage",
          "returns": "trigger",
          "language": "plpgsql",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea DEFAULT '\\x7067736f6469756d'::bytea, nonce bytea DEFAULT NULL::bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE\nAS '$libdir/supabase_vault', $function$pgsodium_crypto_aead_det_decrypt_by_id$function$\n",
          "name": "_crypto_aead_det_decrypt",
          "schema": "vault",
          "returns": "bytea",
          "language": "c",
          "signature": "message bytea, additional bytea, key_id bigint, context bytea, nonce bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION vault._crypto_aead_det_encrypt(message bytea, additional bytea, key_id bigint, context bytea DEFAULT '\\x7067736f6469756d'::bytea, nonce bytea DEFAULT NULL::bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE\nAS '$libdir/supabase_vault', $function$pgsodium_crypto_aead_det_encrypt_by_id$function$\n",
          "name": "_crypto_aead_det_encrypt",
          "schema": "vault",
          "returns": "bytea",
          "language": "c",
          "signature": "message bytea, additional bytea, key_id bigint, context bytea, nonce bytea"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION vault._crypto_aead_det_noncegen()\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE\nAS '$libdir/supabase_vault', $function$pgsodium_crypto_aead_det_noncegen$function$\n",
          "name": "_crypto_aead_det_noncegen",
          "schema": "vault",
          "returns": "bytea",
          "language": "c",
          "signature": ""
        },
        {
          "def": "CREATE OR REPLACE FUNCTION vault.create_secret(new_secret text, new_name text DEFAULT NULL::text, new_description text DEFAULT ''::text, new_key_id uuid DEFAULT NULL::uuid)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO ''\nAS $function$\nDECLARE\n  rec record;\nBEGIN\n  INSERT INTO vault.secrets (secret, name, description)\n  VALUES (\n    new_secret,\n    new_name,\n    new_description\n  )\n  RETURNING * INTO rec;\n  UPDATE vault.secrets s\n  SET secret = encode(vault._crypto_aead_det_encrypt(\n    message := convert_to(rec.secret, 'utf8'),\n    additional := convert_to(s.id::text, 'utf8'),\n    key_id := 0,\n    context := 'pgsodium'::bytea,\n    nonce := rec.nonce\n  ), 'base64')\n  WHERE id = rec.id;\n  RETURN rec.id;\nEND\n$function$\n",
          "name": "create_secret",
          "schema": "vault",
          "returns": "uuid",
          "language": "plpgsql",
          "signature": "new_secret text, new_name text, new_description text, new_key_id uuid"
        },
        {
          "def": "CREATE OR REPLACE FUNCTION vault.update_secret(secret_id uuid, new_secret text DEFAULT NULL::text, new_name text DEFAULT NULL::text, new_description text DEFAULT NULL::text, new_key_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO ''\nAS $function$\nDECLARE\n  decrypted_secret text := (SELECT decrypted_secret FROM vault.decrypted_secrets WHERE id = secret_id);\nBEGIN\n  UPDATE vault.secrets s\n  SET\n    secret = CASE WHEN new_secret IS NULL THEN s.secret\n                  ELSE encode(vault._crypto_aead_det_encrypt(\n                    message := convert_to(new_secret, 'utf8'),\n                    additional := convert_to(s.id::text, 'utf8'),\n                    key_id := 0,\n                    context := 'pgsodium'::bytea,\n                    nonce := s.nonce\n                  ), 'base64') END,\n    name = coalesce(new_name, s.name),\n    description = coalesce(new_description, s.description),\n    updated_at = now()\n  WHERE s.id = secret_id;\nEND\n$function$\n",
          "name": "update_secret",
          "schema": "vault",
          "returns": "void",
          "language": "plpgsql",
          "signature": "secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid"
        }
      ],
      "sequences": [
        {
          "schema": "auth",
          "sequence": "refresh_tokens_id_seq",
          "owned_by_table": "refresh_tokens",
          "owned_by_column": "id"
        },
        {
          "schema": "graphql",
          "sequence": "seq_schema_version",
          "owned_by_table": null,
          "owned_by_column": null
        },
        {
          "schema": "public",
          "sequence": "attachments_id_seq",
          "owned_by_table": "attachments",
          "owned_by_column": "id"
        },
        {
          "schema": "public",
          "sequence": "audit_logs_id_seq",
          "owned_by_table": "audit_logs",
          "owned_by_column": "id"
        },
        {
          "schema": "realtime",
          "sequence": "subscription_id_seq",
          "owned_by_table": null,
          "owned_by_column": null
        }
      ],
      "extensions": [
        {
          "name": "http",
          "schema": "public",
          "version": "1.6"
        },
        {
          "name": "moddatetime",
          "schema": "public",
          "version": "1.0"
        },
        {
          "name": "pg_graphql",
          "schema": "graphql",
          "version": "1.5.11"
        },
        {
          "name": "pg_stat_statements",
          "schema": "extensions",
          "version": "1.11"
        },
        {
          "name": "pg_trgm",
          "schema": "public",
          "version": "1.6"
        },
        {
          "name": "pgcrypto",
          "schema": "extensions",
          "version": "1.3"
        },
        {
          "name": "plpgsql",
          "schema": "pg_catalog",
          "version": "1.0"
        },
        {
          "name": "supabase_vault",
          "schema": "vault",
          "version": "0.3.1"
        },
        {
          "name": "uuid-ossp",
          "schema": "extensions",
          "version": "1.1"
        }
      ],
      "auth_schema": {
        "tables": [
          "audit_log_entries",
          "flow_state",
          "identities",
          "instances",
          "mfa_amr_claims",
          "mfa_challenges",
          "mfa_factors",
          "oauth_authorizations",
          "oauth_clients",
          "oauth_consents",
          "one_time_tokens",
          "refresh_tokens",
          "saml_providers",
          "saml_relay_states",
          "schema_migrations",
          "sessions",
          "sso_domains",
          "sso_providers",
          "users"
        ],
        "row_estimates": [
          {
            "table": "audit_log_entries",
            "estimated_rows": 31
          },
          {
            "table": "flow_state",
            "estimated_rows": 0
          },
          {
            "table": "identities",
            "estimated_rows": 3
          },
          {
            "table": "instances",
            "estimated_rows": 0
          },
          {
            "table": "mfa_amr_claims",
            "estimated_rows": 2
          },
          {
            "table": "mfa_challenges",
            "estimated_rows": 0
          },
          {
            "table": "mfa_factors",
            "estimated_rows": 0
          },
          {
            "table": "oauth_authorizations",
            "estimated_rows": 0
          },
          {
            "table": "oauth_clients",
            "estimated_rows": 0
          },
          {
            "table": "oauth_consents",
            "estimated_rows": 0
          },
          {
            "table": "one_time_tokens",
            "estimated_rows": 0
          },
          {
            "table": "refresh_tokens",
            "estimated_rows": 12
          },
          {
            "table": "saml_providers",
            "estimated_rows": 0
          },
          {
            "table": "saml_relay_states",
            "estimated_rows": 0
          },
          {
            "table": "schema_migrations",
            "estimated_rows": 4
          },
          {
            "table": "sessions",
            "estimated_rows": 2
          },
          {
            "table": "sso_domains",
            "estimated_rows": 0
          },
          {
            "table": "sso_providers",
            "estimated_rows": 0
          },
          {
            "table": "users",
            "estimated_rows": 3
          }
        ]
      },
      "search_path": "\"\\$user\", public, extensions",
      "collected_at": "2025-10-21 11:49:54.242601+00",
      "publications": [
        {
          "name": "supabase_realtime",
          "delete": true,
          "insert": true,
          "tables": [
            {
              "table": "account_feature_permissions",
              "schema": "public"
            },
            {
              "table": "account_users",
              "schema": "public"
            },
            {
              "table": "accounts",
              "schema": "public"
            },
            {
              "table": "alert_settings",
              "schema": "public"
            },
            {
              "table": "appointments",
              "schema": "public"
            },
            {
              "table": "attachments",
              "schema": "public"
            },
            {
              "table": "audit_logs",
              "schema": "public"
            },
            {
              "table": "chat_attachments",
              "schema": "public"
            },
            {
              "table": "chat_conversations",
              "schema": "public"
            },
            {
              "table": "chat_messages",
              "schema": "public"
            },
            {
              "table": "chat_participants",
              "schema": "public"
            },
            {
              "table": "chat_reactions",
              "schema": "public"
            },
            {
              "table": "chat_reads",
              "schema": "public"
            },
            {
              "table": "chat_unreads",
              "schema": "public"
            },
            {
              "table": "clinics",
              "schema": "public"
            },
            {
              "table": "complaints",
              "schema": "public"
            },
            {
              "table": "consumption_types",
              "schema": "public"
            },
            {
              "table": "consumptions",
              "schema": "public"
            },
            {
              "table": "doctors",
              "schema": "public"
            },
            {
              "table": "drugs",
              "schema": "public"
            },
            {
              "table": "employees",
              "schema": "public"
            },
            {
              "table": "employees_discounts",
              "schema": "public"
            },
            {
              "table": "employees_loans",
              "schema": "public"
            },
            {
              "table": "employees_salaries",
              "schema": "public"
            },
            {
              "table": "financial_logs",
              "schema": "public"
            },
            {
              "table": "item_types",
              "schema": "public"
            },
            {
              "table": "items",
              "schema": "public"
            },
            {
              "table": "medical_services",
              "schema": "public"
            },
            {
              "table": "memberships",
              "schema": "public"
            },
            {
              "table": "patient_services",
              "schema": "public"
            },
            {
              "table": "patients",
              "schema": "public"
            },
            {
              "table": "prescription_items",
              "schema": "public"
            },
            {
              "table": "prescriptions",
              "schema": "public"
            },
            {
              "table": "profiles",
              "schema": "public"
            },
            {
              "table": "purchases",
              "schema": "public"
            },
            {
              "table": "returns",
              "schema": "public"
            },
            {
              "table": "service_doctor_share",
              "schema": "public"
            },
            {
              "table": "super_admins",
              "schema": "public"
            },
            {
              "table": "user_push_tokens",
              "schema": "public"
            }
          ],
          "update": true,
          "truncate": true,
          "alltables": false
        },
        {
          "name": "supabase_realtime_messages_publication",
          "delete": true,
          "insert": true,
          "tables": [
            {
              "table": "messages_2025_10_19",
              "schema": "realtime"
            },
            {
              "table": "messages_2025_10_20",
              "schema": "realtime"
            },
            {
              "table": "messages_2025_10_21",
              "schema": "realtime"
            },
            {
              "table": "messages_2025_10_22",
              "schema": "realtime"
            },
            {
              "table": "messages_2025_10_23",
              "schema": "realtime"
            }
          ],
          "update": true,
          "truncate": true,
          "alltables": false
        }
      ],
      "subscriptions": [],
      "server_version": "17.4",
      "server_encoding": "UTF8",
      "role_memberships": [
        {
          "role": "anon",
          "member": "authenticator",
          "grantor": "supabase_admin",
          "admin_option": false
        },
        {
          "role": "anon",
          "member": "postgres",
          "grantor": "supabase_admin",
          "admin_option": true
        },
        {
          "role": "authenticated",
          "member": "authenticator",
          "grantor": "supabase_admin",
          "admin_option": false
        },
        {
          "role": "authenticated",
          "member": "postgres",
          "grantor": "supabase_admin",
          "admin_option": true
        },
        {
          "role": "authenticator",
          "member": "postgres",
          "grantor": "supabase_admin",
          "admin_option": true
        },
        {
          "role": "authenticator",
          "member": "supabase_storage_admin",
          "grantor": "supabase_admin",
          "admin_option": false
        },
        {
          "role": "service_role",
          "member": "authenticator",
          "grantor": "supabase_admin",
          "admin_option": false
        },
        {
          "role": "service_role",
          "member": "postgres",
          "grantor": "supabase_admin",
          "admin_option": true
        },
        {
          "role": "supabase_realtime_admin",
          "member": "postgres",
          "grantor": "supabase_admin",
          "admin_option": false
        }
      ],
      "materialized_views": [],
      "rls_enabled_tables": [
        {
          "table": "audit_log_entries",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "flow_state",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "identities",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "instances",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "mfa_amr_claims",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "mfa_challenges",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "mfa_factors",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "one_time_tokens",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "refresh_tokens",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "saml_providers",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "saml_relay_states",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "schema_migrations",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "sessions",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "sso_domains",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "sso_providers",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "users",
          "schema": "auth",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "account_feature_permissions",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "account_users",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "accounts",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "alert_settings",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "appointments",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "attachments",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "audit_logs",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_attachments",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_conversations",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_messages",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_participants",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_reactions",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_reads",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "chat_unreads",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "clinics",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "complaints",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "consumption_types",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "consumptions",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "doctors",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "drugs",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "employees",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "employees_discounts",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "employees_loans",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "employees_salaries",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "financial_logs",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "item_types",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "items",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "medical_services",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "memberships",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "patient_services",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "patients",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "prescription_items",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "prescriptions",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "profiles",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "purchases",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "returns",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "service_doctor_share",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "super_admins",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": true
        },
        {
          "table": "user_push_tokens",
          "schema": "public",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "buckets",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "buckets_analytics",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "migrations",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "objects",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "prefixes",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "s3_multipart_uploads",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        },
        {
          "table": "s3_multipart_uploads_parts",
          "schema": "storage",
          "rowsecurity": true,
          "forcerowsecurity": false
        }
      ]
    }
  }
]